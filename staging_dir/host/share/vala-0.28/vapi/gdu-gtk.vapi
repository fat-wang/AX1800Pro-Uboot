/* gdu-gtk.vapi generated by vapigen, do not modify. */

namespace Gdu {
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class AddComponentLinuxMdDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AddComponentLinuxMdDialog (Gtk.Window parent, Gdu.AddComponentLinuxMdFlags flags, Gdu.LinuxMdDrive linux_md_drive);
		public unowned GLib.GenericArray<Gdu.Drive> get_drives ();
		public uint64 get_size ();
		public GLib.GenericArray<Gdu.Drive> drives { get; }
		[NoAccessorMethod]
		public Gdu.AddComponentLinuxMdFlags flags { get; construct; }
		public uint64 size { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class AddPvLinuxLvm2Dialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AddPvLinuxLvm2Dialog (Gtk.Window parent, Gdu.LinuxLvm2VolumeGroup vg);
		public unowned Gdu.Drive get_drive ();
		public uint64 get_size ();
		public Gdu.Drive drive { get; }
		public uint64 size { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class AtaSmartDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AtaSmartDialog (Gtk.Window parent, Gdu.Drive drive);
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class ButtonElement : GLib.Object {
		[CCode (has_construct_function = false)]
		public ButtonElement (string icon_name, string primary_text, string secondary_text);
		public unowned string get_icon_name ();
		public unowned string get_primary_text ();
		public unowned string get_secondary_text ();
		public bool get_visible ();
		public void set_icon_name (string icon_name);
		public void set_primary_text (string primary_text);
		public void set_secondary_text (string primary_text);
		public void set_visible (bool visible);
		public string icon_name { get; set construct; }
		public string primary_text { get; set construct; }
		public string secondary_text { get; set construct; }
		public bool visible { get; set construct; }
		public virtual signal void changed ();
		public virtual signal void clicked ();
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class ButtonTable : Gtk.HBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ButtonTable (uint num_columns, GLib.GenericArray<Gdu.ButtonElement> elements);
		public GLib.GenericArray<Gdu.ButtonElement> get_elements ();
		public uint get_num_columns ();
		public void set_elements (GLib.GenericArray<Gdu.ButtonElement> elements);
		public void set_num_columns (uint num_columns);
		public GLib.GenericArray<Gdu.ButtonElement> elements { get; set construct; }
		public uint num_columns { get; set construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	[Compact]
	public class Color {
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class ConfirmationDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ConfirmationDialog (Gtk.Window parent, Gdu.Presentable presentable, string message, string button_text);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ConfirmationDialog.for_drive (Gtk.Window parent, Gdu.Device device, string message, string button_text);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ConfirmationDialog.for_volume (Gtk.Window parent, Gdu.Device device, string message, string button_text);
		[NoAccessorMethod]
		public string button_text { owned get; construct; }
		[NoAccessorMethod]
		public string message { owned get; construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class ConnectToServerDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ConnectToServerDialog (Gtk.Window parent);
		public unowned string get_address ();
		public unowned string get_user_name ();
		public string address { get; }
		public string user_name { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class CreateLinuxLvm2VolumeDialog : Gdu.FormatDialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CreateLinuxLvm2VolumeDialog (Gtk.Window parent, Gdu.Presentable presentable, uint64 max_size, Gdu.FormatDialogFlags flags);
		public uint64 get_max_size ();
		public uint64 get_size ();
		public uint64 max_size { get; construct; }
		public uint64 size { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class CreateLinuxMdDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CreateLinuxMdDialog (Gtk.Window parent, Gdu.Pool pool);
		public uint64 get_component_size ();
		public GLib.GenericArray<Gdu.Drive> get_drives ();
		public unowned string get_level ();
		public uint64 get_size ();
		public uint64 get_stripe_size ();
		public uint64 component_size { get; }
		public GLib.GenericArray<Gdu.Drive> drives { get; }
		public string level { get; }
		public string name { get; }
		[NoAccessorMethod]
		public Gdu.Pool pool { owned get; construct; }
		public uint64 size { get; }
		public uint64 stripe_size { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class CreatePartitionDialog : Gdu.FormatDialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CreatePartitionDialog (Gtk.Window parent, Gdu.Presentable presentable, uint64 max_size, Gdu.FormatDialogFlags flags);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CreatePartitionDialog.for_drive (Gtk.Window parent, Gdu.Device device, uint64 max_size, Gdu.FormatDialogFlags flags);
		public uint64 get_max_size ();
		public uint64 get_size ();
		public uint64 max_size { get; construct; }
		public uint64 size { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	[Compact]
	public class Curve {
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class DetailsElement : GLib.Object {
		[CCode (has_construct_function = false)]
		public DetailsElement (string heading, string text, string tooltip);
		public unowned string get_action_text ();
		public unowned string get_action_tooltip ();
		public unowned string get_action_uri ();
		public unowned string get_heading ();
		public unowned GLib.Icon get_icon ();
		public bool get_is_spinning ();
		public double get_progress ();
		public unowned string get_text ();
		public uint64 get_time ();
		public unowned string get_tooltip ();
		public unowned Gtk.Widget get_widget ();
		public void set_action_text (string action_text);
		public void set_action_tooltip (string action_tooltip);
		public void set_action_uri (string action_uri);
		public void set_heading (string heading);
		public void set_icon (GLib.Icon icon);
		public void set_is_spinning (bool is_spinning);
		public void set_progress (double progress);
		public void set_text (string text);
		public void set_time (uint64 time);
		public void set_tooltip (string tooltip);
		public void set_widget (Gtk.Widget widget);
		public string action_text { get; set construct; }
		public string action_tooltip { get; set construct; }
		public string action_uri { get; set construct; }
		public string heading { get; set construct; }
		public GLib.Icon icon { get; set construct; }
		public bool is_spinning { get; set construct; }
		public double progress { get; set construct; }
		public string text { get; set construct; }
		public uint64 time { get; set construct; }
		public string tooltip { get; set construct; }
		public Gtk.Widget widget { get; set construct; }
		public virtual signal void activated (string uri);
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class DetailsTable : Gtk.HBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DetailsTable (uint num_columns, GLib.GenericArray<Gdu.DetailsElement> elements);
		public GLib.GenericArray<Gdu.DetailsElement> get_elements ();
		public uint get_num_columns ();
		public void set_elements (GLib.GenericArray<Gdu.DetailsElement> elements);
		public void set_num_columns (uint num_columns);
		public GLib.GenericArray<Gdu.DetailsElement> elements { get; set construct; }
		public uint num_columns { get; set construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class Dialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Dialog ();
		public unowned Gdu.Device get_device ();
		public unowned Gdu.Pool get_pool ();
		public unowned Gdu.Presentable get_presentable ();
		public Gdu.Device drive_device { construct; }
		public Gdu.Presentable presentable { get; construct; }
		public Gdu.Device volume_device { construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class DiskSelectionWidget : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DiskSelectionWidget (Gdu.Pool pool, Gdu.DiskSelectionWidgetFlags flags);
		public uint64 get_component_size ();
		public uint64 get_largest_segment_for_all ();
		public uint64 get_largest_segment_for_selected ();
		public uint get_num_available_disks ();
		public unowned GLib.GenericArray<Gdu.Drive> get_selected_drives ();
		public void set_component_size (uint64 component_size);
		public uint64 component_size { get; set; }
		[NoAccessorMethod]
		public Gdu.DiskSelectionWidgetFlags flags { get; construct; }
		public uint64 largest_segment_for_all { get; }
		public uint64 largest_segment_for_selected { get; }
		public uint num_available_disks { get; }
		[NoAccessorMethod]
		public Gdu.Pool pool { owned get; construct; }
		public GLib.GenericArray<Gdu.Drive> selected_drives { get; }
		public virtual signal void changed ();
		public virtual signal unowned string is_drive_ignored (Gdu.Drive drive);
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class DriveBenchmarkDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DriveBenchmarkDialog (Gtk.Window parent, Gdu.Drive drive);
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class EditLinuxLvm2Dialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EditLinuxLvm2Dialog (Gtk.Window parent, Gdu.LinuxLvm2VolumeGroup vg);
		public virtual signal void new_button_clicked ();
		public virtual signal void remove_button_clicked (string pv_uuid);
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class EditLinuxMdDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EditLinuxMdDialog (Gtk.Window parent, Gdu.LinuxMdDrive linux_md_drive);
		public virtual signal void add_spare_button_clicked ();
		public virtual signal void attach_button_clicked (Gdu.Device slave);
		public virtual signal void expand_button_clicked ();
		public virtual signal void remove_button_clicked (Gdu.Device slave);
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class EditNameDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EditNameDialog (Gtk.Window parent, Gdu.Presentable presentable, string name, uint name_max_bytes, string message, string entry_mnemonic);
		[NoAccessorMethod]
		public string entry_mnemonic { owned get; construct; }
		[NoAccessorMethod]
		public string message { owned get; construct; }
		public string name { get; set; }
		[NoAccessorMethod]
		public uint name_max_bytes { get; construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class EditPartitionDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EditPartitionDialog (Gtk.Window parent, Gdu.Presentable volume);
		public unowned string get_partition_flags ();
		public unowned string get_partition_label ();
		public unowned string get_partition_type ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] partition_flags { get; }
		public string partition_label { get; }
		public string partition_type { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class ErrorDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ErrorDialog (Gtk.Window parent, Gdu.Presentable presentable, string message, GLib.Error error);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ErrorDialog.for_drive (Gtk.Window parent, Gdu.Device device, string message, GLib.Error error);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ErrorDialog.for_volume (Gtk.Window parent, Gdu.Device device, string message, GLib.Error error);
		[NoAccessorMethod]
		public Gdu.Error error { get; construct; }
		[NoAccessorMethod]
		public string message { owned get; construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class FormatDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FormatDialog (Gtk.Window parent, Gdu.Presentable presentable, Gdu.FormatDialogFlags flags);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FormatDialog.for_drive (Gtk.Window parent, Gdu.Device device, Gdu.FormatDialogFlags flags);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FormatDialog.for_volume (Gtk.Window parent, Gdu.Device device, Gdu.FormatDialogFlags flags);
		public bool get_encrypt ();
		public unowned string get_fs_label ();
		public unowned string get_fs_options ();
		public unowned string get_fs_type ();
		public unowned Gtk.Widget get_table ();
		public bool get_take_ownership ();
		public string affirmative_button_mnemonic { construct; }
		public bool encrypt { get; }
		[NoAccessorMethod]
		public Gdu.FormatDialogFlags flags { get; construct; }
		public string fs_label { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] fs_options { get; }
		public string fs_type { get; }
		public bool take_ownership { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	[Compact]
	public class Graph {
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class PartitionDialog : Gdu.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PartitionDialog (Gtk.Window parent, Gdu.Presentable presentable);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PartitionDialog.for_drive (Gtk.Window parent, Gdu.Device device);
		public unowned string get_scheme ();
		public string scheme { get; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class PoolTreeModel : Gtk.TreeStore, Gtk.TreeModel, Gtk.TreeDragSource, Gtk.TreeDragDest, Gtk.TreeSortable, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public PoolTreeModel (GLib.GenericArray<Gdu.Pool> pools, Gdu.Presentable root, Gdu.PoolTreeModelFlags flags);
		public bool get_iter_for_presentable (Gdu.Presentable presentable, Gtk.TreeIter out_iter);
		public void set_pools (GLib.GenericArray<Gdu.Pool> pools);
		[NoAccessorMethod]
		public Gdu.PoolTreeModelFlags flags { get; construct; }
		[NoAccessorMethod]
		public GLib.GenericArray<Gdu.Pool> pools { owned get; set construct; }
		[NoAccessorMethod]
		public Gdu.Presentable root { owned get; construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class PoolTreeView : Gtk.TreeView, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PoolTreeView (Gdu.PoolTreeModel model, Gdu.PoolTreeViewFlags flags);
		public unowned Gdu.Presentable get_selected_presentable ();
		public void select_first_presentable ();
		public void select_presentable (Gdu.Presentable presentable);
		[NoAccessorMethod]
		public Gdu.PoolTreeViewFlags flags { get; construct; }
		[NoAccessorMethod]
		public Gdu.PoolTreeModel pool_tree_model { owned get; construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	[Compact]
	public class Sample {
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class SizeWidget : Gtk.HBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SizeWidget (uint64 size, uint64 min_size, uint64 max_size);
		public uint64 get_max_size ();
		public uint64 get_min_size ();
		public uint64 get_size ();
		public void set_max_size (uint64 max_size);
		public void set_min_size (uint64 min_size);
		public void set_size (uint64 size);
		public uint64 max_size { get; set construct; }
		public uint64 min_size { get; set construct; }
		public uint64 size { get; set construct; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class Spinner : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Spinner ();
		public void start ();
		public void stop ();
		[NoAccessorMethod]
		public string color { set construct; }
		public uint lines { construct; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class TimeLabel : Gtk.Label, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TimeLabel (GLib.TimeVal time);
		public void set_time (GLib.TimeVal time);
		[NoAccessorMethod]
		public GLib.TimeVal time { get; set; }
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public class VolumeGrid : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VolumeGrid (Gdu.Drive drive);
		public unowned Gdu.Presentable get_selected ();
		public bool select (Gdu.Presentable volume);
		[NoAccessorMethod]
		public Gdu.Drive drive { owned get; construct; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h", cprefix = "GDU_ADD_COMPONENT_LINUX_MD_FLAGS_")]
	[Flags]
	public enum AddComponentLinuxMdFlags {
		NONE,
		SPARE,
		EXPANSION
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h", cprefix = "GDU_DISK_SELECTION_WIDGET_FLAGS_")]
	[Flags]
	public enum DiskSelectionWidgetFlags {
		NONE,
		ALLOW_MULTIPLE,
		ALLOW_DISKS_WITH_INSUFFICIENT_SPACE
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h", cprefix = "GDU_FORMAT_DIALOG_FLAGS_")]
	[Flags]
	public enum FormatDialogFlags {
		NONE,
		SIMPLE,
		DISK_UTILITY_BUTTON,
		ALLOW_MSDOS_EXTENDED
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h", cprefix = "GDU_POOL_TREE_MODEL_COLUMN_")]
	public enum PoolTreeModelColumn {
		ICON,
		NAME,
		VPD_NAME,
		DESCRIPTION,
		PRESENTABLE,
		VISIBLE,
		TOGGLED,
		CAN_BE_TOGGLED
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h", cprefix = "GDU_POOL_TREE_MODEL_FLAGS_")]
	[Flags]
	public enum PoolTreeModelFlags {
		NONE,
		NO_VOLUMES,
		NO_UNALLOCATABLE_DRIVES
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h", cprefix = "GDU_POOL_TREE_VIEW_FLAGS_")]
	[Flags]
	public enum PoolTreeViewFlags {
		NONE,
		SHOW_TOGGLE
	}
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static bool util_delete_confirmation_dialog (Gtk.Widget parent_window, string title, string primary_text, string secondary_text, string affirmative_action_button_mnemonic);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned string util_dialog_ask_for_new_secret (Gtk.Widget parent_window, bool save_in_keyring, bool save_in_keyring_session);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned string util_dialog_ask_for_secret (Gtk.Widget parent_window, Gdu.Presentable presentable, bool bypass_keyring, bool indicate_wrong_passphrase, bool asked_user);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static bool util_dialog_change_secret (Gtk.Widget parent_window, Gdu.Presentable presentable, out unowned string old_secret, out unowned string new_secret, bool save_in_keyring, bool save_in_keyring_session, bool bypass_keyring, bool indicate_wrong_passphrase);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static bool util_dialog_show_filesystem_busy (Gtk.Widget parent_window, Gdu.Presentable presentable);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned Gtk.Widget util_fstype_combo_box_create (Gdu.Pool pool, string include_extended_partitions_for_scheme);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned string util_fstype_combo_box_get_selected (Gtk.Widget combo_box);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static void util_fstype_combo_box_rebuild (Gtk.Widget combo_box, Gdu.Pool pool, string include_extended_partitions_for_scheme);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static bool util_fstype_combo_box_select (Gtk.Widget combo_box, string fstype);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static void util_fstype_combo_box_set_desc_label (Gtk.Widget combo_box, Gtk.Widget desc_label);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static void util_get_mix_color (Gtk.Widget widget, Gtk.StateType state, string color_buf, size_t color_buf_size);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned Gdk.Pixbuf util_get_pixbuf_for_presentable (Gdu.Presentable presentable, Gtk.IconSize size);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned Gdk.Pixbuf util_get_pixbuf_for_presentable_at_pixel_size (Gdu.Presentable presentable, int pixel_size);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned Gtk.Widget util_part_table_type_combo_box_create ();
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned string util_part_table_type_combo_box_get_selected (Gtk.Widget combo_box);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static bool util_part_table_type_combo_box_select (Gtk.Widget combo_box, string part_table_type);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static void util_part_table_type_combo_box_set_desc_label (Gtk.Widget combo_box, Gtk.Widget desc_label);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned Gtk.Widget util_part_type_combo_box_create (string part_scheme);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static unowned string util_part_type_combo_box_get_selected (Gtk.Widget combo_box);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static void util_part_type_combo_box_rebuild (Gtk.Widget combo_box, string part_scheme);
	[CCode (cheader_filename = "gdu-gtk/gdu-gtk.h")]
	public static bool util_part_type_combo_box_select (Gtk.Widget combo_box, string part_type);
}
