/* gtk+-3.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gtk", gir_namespace = "Gtk", gir_version = "3.0", lower_case_cprefix = "gtk_")]
namespace Gtk {
	[Deprecated (since = "3.10")]
	namespace Stock {
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ABOUT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ADD;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string APPLY;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string BOLD;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CANCEL;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CAPS_LOCK_WARNING;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CDROM;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CLEAR;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CLOSE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string COLOR_PICKER;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CONNECT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CONVERT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string COPY;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string CUT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DELETE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DIALOG_AUTHENTICATION;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DIALOG_ERROR;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DIALOG_INFO;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DIALOG_QUESTION;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DIALOG_WARNING;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DIRECTORY;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DISCARD;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DISCONNECT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DND;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string DND_MULTIPLE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string EDIT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string EXECUTE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string FILE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string FIND;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string FIND_AND_REPLACE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string FLOPPY;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string FULLSCREEN;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GOTO_BOTTOM;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GOTO_FIRST;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GOTO_LAST;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GOTO_TOP;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GO_BACK;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GO_DOWN;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GO_FORWARD;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string GO_UP;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string HARDDISK;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string HELP;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string HOME;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string INDENT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string INDEX;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string INFO;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ITALIC;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string JUMP_TO;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string JUSTIFY_CENTER;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string JUSTIFY_FILL;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string JUSTIFY_LEFT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string JUSTIFY_RIGHT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string LEAVE_FULLSCREEN;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_FORWARD;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_NEXT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_PAUSE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_PLAY;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_PREVIOUS;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_RECORD;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_REWIND;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MEDIA_STOP;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string MISSING_IMAGE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string NETWORK;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string NEW;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string NO;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string OK;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string OPEN;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ORIENTATION_LANDSCAPE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ORIENTATION_PORTRAIT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ORIENTATION_REVERSE_LANDSCAPE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ORIENTATION_REVERSE_PORTRAIT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PAGE_SETUP;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PASTE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PREFERENCES;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PRINT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PRINT_ERROR;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PRINT_PAUSED;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PRINT_PREVIEW;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PRINT_REPORT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PRINT_WARNING;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string PROPERTIES;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string QUIT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string REDO;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string REFRESH;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string REMOVE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string REVERT_TO_SAVED;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SAVE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SAVE_AS;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SELECT_ALL;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SELECT_COLOR;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SELECT_FONT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SORT_ASCENDING;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SORT_DESCENDING;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string SPELL_CHECK;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string STOP;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string STRIKETHROUGH;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string UNDELETE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string UNDERLINE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string UNDO;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string UNINDENT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string YES;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ZOOM_100;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ZOOM_FIT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ZOOM_IN;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public const string ZOOM_OUT;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void add (Gtk.StockItem[] items);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void add_static (Gtk.StockItem[] items);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static GLib.SList<string> list_ids ();
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static bool lookup (string stock_id, out Gtk.StockItem item);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void set_translate_func (string domain, owned Gtk.TranslateFunc func);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_about_dialog_get_type ()")]
	public class AboutDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AboutDialog ();
		public void add_credit_section (string section_name, [CCode (array_length = false, array_null_terminated = true)] string[] people);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_artists ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_authors ();
		public unowned string get_comments ();
		public unowned string get_copyright ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_documenters ();
		public unowned string get_license ();
		public Gtk.License get_license_type ();
		public unowned Gdk.Pixbuf get_logo ();
		public unowned string get_logo_icon_name ();
		public unowned string get_program_name ();
		public unowned string get_translator_credits ();
		public unowned string get_version ();
		public unowned string get_website ();
		public unowned string get_website_label ();
		public bool get_wrap_license ();
		public void set_artists ([CCode (array_length = false, array_null_terminated = true)] string[] artists);
		public void set_authors ([CCode (array_length = false, array_null_terminated = true)] string[] authors);
		public void set_comments (string comments);
		public void set_copyright (string copyright);
		public void set_documenters ([CCode (array_length = false, array_null_terminated = true)] string[] documenters);
		public void set_license (string license);
		public void set_license_type (Gtk.License license_type);
		public void set_logo (Gdk.Pixbuf logo);
		public void set_logo_icon_name (string icon_name);
		public void set_program_name (string name);
		public void set_translator_credits (string translator_credits);
		public void set_version (string version);
		public void set_website (string website);
		public void set_website_label (string website_label);
		public void set_wrap_license (bool wrap_license);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] artists { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] authors { get; set; }
		public string comments { get; set; }
		public string copyright { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] documenters { get; set; }
		public string license { get; set; }
		public Gtk.License license_type { get; set; }
		public Gdk.Pixbuf logo { get; set; }
		public string logo_icon_name { get; set; }
		public string program_name { get; set; }
		public string translator_credits { get; set; }
		public string version { get; set; }
		public string website { get; set; }
		public string website_label { get; set; }
		public bool wrap_license { get; set; }
		public virtual signal bool activate_link (string uri);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_accel_group_get_type ()")]
	public class AccelGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public AccelGroup ();
		public bool activate (GLib.Quark accel_quark, GLib.Object acceleratable, uint accel_key, Gdk.ModifierType accel_mods);
		public void connect (uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags, [CCode (type = "GClosure*")] owned Gtk.AccelGroupActivate closure);
		public void connect_by_path (string accel_path, [CCode (type = "GClosure*")] owned Gtk.AccelGroupActivate closure);
		public bool disconnect (GLib.Closure closure);
		public bool disconnect_key (uint accel_key, Gdk.ModifierType accel_mods);
		public Gtk.AccelKey* find (Gtk.AccelGroupFindFunc find_func);
		public static unowned Gtk.AccelGroup from_accel_closure (GLib.Closure closure);
		public bool get_is_locked ();
		public Gdk.ModifierType get_modifier_mask ();
		public void @lock ();
		[CCode (array_length_type = "guint")]
		public unowned Gtk.AccelGroupEntry[] query (uint accel_key, Gdk.ModifierType accel_mods);
		public void unlock ();
		public bool is_locked { get; }
		public Gdk.ModifierType modifier_mask { get; }
		public virtual signal bool accel_activate (GLib.Object p0, uint p1, Gdk.ModifierType p2);
		public virtual signal void accel_changed (uint keyval, Gdk.ModifierType modifier, GLib.Closure accel_closure);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_accel_label_get_type ()")]
	public class AccelLabel : Gtk.Label, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AccelLabel (string str);
		public void get_accel (out uint accelerator_key, out Gdk.ModifierType accelerator_mods);
		public unowned Gtk.Widget get_accel_widget ();
		public uint get_accel_width ();
		public bool refetch ();
		public void set_accel (uint accelerator_key, Gdk.ModifierType accelerator_mods);
		public void set_accel_closure ([CCode (type = "GClosure*")] owned Gtk.AccelGroupActivate accel_closure);
		public void set_accel_widget (Gtk.Widget accel_widget);
		[NoAccessorMethod]
		public GLib.Closure accel_closure { owned get; set; }
		public Gtk.Widget accel_widget { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_accel_map_get_type ()")]
	public class AccelMap : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AccelMap ();
		public static void add_entry (string accel_path, uint accel_key, Gdk.ModifierType accel_mods);
		public static void add_filter (string filter_pattern);
		public static bool change_entry (string accel_path, uint accel_key, Gdk.ModifierType accel_mods, bool replace);
		public static void @foreach (void* data, Gtk.AccelMapForeach foreach_func);
		public static void foreach_unfiltered (void* data, Gtk.AccelMapForeach foreach_func);
		public static unowned Gtk.AccelMap @get ();
		public static void load (string file_name);
		public static void load_fd (int fd);
		public static void load_scanner (GLib.Scanner scanner);
		public static void lock_path (string accel_path);
		public static bool lookup_entry (string accel_path, out Gtk.AccelKey key);
		public static void save (string file_name);
		public static void save_fd (int fd);
		public static void unlock_path (string accel_path);
		public virtual signal void changed (string p0, uint p1, Gdk.ModifierType p2);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class AccelMapClass {
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_accessible_get_type ()")]
	public class Accessible : Atk.Object {
		[CCode (has_construct_function = false)]
		protected Accessible ();
		[Deprecated (replacement = "Accessible.set_widget", since = "3.4")]
		public virtual void connect_widget_destroyed ();
		public unowned Gtk.Widget get_widget ();
		public void set_widget (Gtk.Widget widget);
		[NoWrapper]
		public virtual void widget_set ();
		[NoWrapper]
		public virtual void widget_unset ();
		public Gtk.Widget widget { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_action_get_type ()")]
	[Deprecated (replacement = "GLib.Action", since = "3.10")]
	public class Action : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public Action (string name, string? label, string? tooltip, string? stock_id);
		public void block_activate ();
		public void connect_accelerator ();
		[NoWrapper]
		public virtual void connect_proxy (Gtk.Widget proxy);
		public unowned Gtk.Widget create_icon (Gtk.IconSize icon_size);
		public virtual unowned Gtk.Widget create_menu ();
		public virtual unowned Gtk.Widget create_menu_item ();
		public virtual unowned Gtk.Widget create_tool_item ();
		public void disconnect_accelerator ();
		[NoWrapper]
		public virtual void disconnect_proxy (Gtk.Widget proxy);
		public unowned GLib.Closure get_accel_closure ();
		public unowned string get_accel_path ();
		public bool get_always_show_image ();
		public unowned GLib.Icon get_gicon ();
		public unowned string get_icon_name ();
		public bool get_is_important ();
		public unowned string get_label ();
		public unowned GLib.SList<Gtk.Widget> get_proxies ();
		public bool get_sensitive ();
		public unowned string get_short_label ();
		public unowned string get_stock_id ();
		public unowned string get_tooltip ();
		public bool get_visible ();
		public bool get_visible_horizontal ();
		public bool get_visible_vertical ();
		public bool is_sensitive ();
		public bool is_visible ();
		public void set_accel_group (Gtk.AccelGroup accel_group);
		public void set_accel_path (string accel_path);
		public void set_always_show_image (bool always_show);
		public void set_gicon (GLib.Icon icon);
		public void set_icon_name (string icon_name);
		public void set_is_important (bool is_important);
		public void set_label (string label);
		public void set_sensitive (bool sensitive);
		public void set_short_label (string short_label);
		public void set_stock_id (string stock_id);
		public void set_tooltip (string tooltip);
		public void set_visible (bool visible);
		public void set_visible_horizontal (bool visible_horizontal);
		public void set_visible_vertical (bool visible_vertical);
		public void unblock_activate ();
		[NoAccessorMethod]
		public Gtk.ActionGroup action_group { owned get; set; }
		public bool always_show_image { get; set construct; }
		public GLib.Icon gicon { get; set; }
		[NoAccessorMethod]
		public bool hide_if_empty { get; set; }
		public string icon_name { get; set; }
		public bool is_important { get; set; }
		public string label { get; set; }
		public string name { get; construct; }
		public bool sensitive { get; set; }
		public string short_label { get; set; }
		public string stock_id { get; set; }
		public string tooltip { get; set; }
		public bool visible { get; set; }
		public bool visible_horizontal { get; set; }
		[NoAccessorMethod]
		public bool visible_overflown { get; set; }
		public bool visible_vertical { get; set; }
		[HasEmitter]
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_action_bar_get_type ()")]
	public class ActionBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ActionBar ();
		public unowned Gtk.Widget get_center_widget ();
		public void pack_end (Gtk.Widget child);
		public void pack_start (Gtk.Widget child);
		public void set_center_widget (Gtk.Widget? center_widget);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_action_group_get_type ()")]
	[Deprecated (since = "3.10")]
	public class ActionGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public ActionGroup (string name);
		public void add_action (Gtk.Action action);
		public void add_action_with_accel (Gtk.Action action, string? accelerator);
		public void add_actions (Gtk.ActionEntry[] entries, void* user_data);
		public void add_actions_full (Gtk.ActionEntry[] entries, void* user_data, GLib.DestroyNotify? destroy);
		public void add_radio_actions (Gtk.RadioActionEntry[] entries, int value, [CCode (type = "GCallback")] Gtk.RadioActionCallback on_change);
		public void add_radio_actions_full (Gtk.RadioActionEntry[] entries, int value, [CCode (type = "GCallback")] Gtk.RadioActionCallback on_change, GLib.DestroyNotify? destroy);
		public void add_toggle_actions (Gtk.ToggleActionEntry[] entries, void* user_data);
		public void add_toggle_actions_full (Gtk.ToggleActionEntry[] entries, void* user_data, GLib.DestroyNotify? destroy);
		public unowned Gtk.AccelGroup get_accel_group ();
		public virtual unowned Gtk.Action get_action (string action_name);
		public bool get_sensitive ();
		public bool get_visible ();
		public GLib.List<weak Gtk.Action> list_actions ();
		public void remove_action (Gtk.Action action);
		public void set_accel_group (Gtk.AccelGroup accel_group);
		public void set_sensitive (bool sensitive);
		public void set_translate_func (owned Gtk.TranslateFunc func);
		public void set_translation_domain (string domain);
		public void set_visible (bool visible);
		public unowned string translate_string (string str);
		public Gtk.AccelGroup accel_group { get; set; }
		public string name { get; construct; }
		public bool sensitive { get; set; }
		public bool visible { get; set; }
		public virtual signal void connect_proxy (Gtk.Action p0, Gtk.Widget p1);
		public virtual signal void disconnect_proxy (Gtk.Action p0, Gtk.Widget p1);
		public virtual signal void post_activate (Gtk.Action p0);
		public virtual signal void pre_activate (Gtk.Action p0);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_adjustment_get_type ()")]
	public class Adjustment : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public Adjustment (double value, double lower, double upper, double step_increment, double page_increment, double page_size);
		public void clamp_page (double lower, double upper);
		public void configure (double value, double lower, double upper, double step_increment, double page_increment, double page_size);
		public double get_lower ();
		public double get_minimum_increment ();
		public double get_page_increment ();
		public double get_page_size ();
		public double get_step_increment ();
		public double get_upper ();
		public double get_value ();
		public void set_lower (double lower);
		public void set_page_increment (double page_increment);
		public void set_page_size (double page_size);
		public void set_step_increment (double step_increment);
		public void set_upper (double upper);
		public void set_value (double value);
		public double lower { get; set; }
		public double page_increment { get; set; }
		public double page_size { get; set; }
		public double step_increment { get; set; }
		public double upper { get; set; }
		public double value { get; set; }
		[HasEmitter]
		public virtual signal void changed ();
		[HasEmitter]
		public virtual signal void value_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_alignment_get_type ()")]
	public class Alignment : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Alignment (float xalign, float yalign, float xscale, float yscale);
		public void get_padding (out uint padding_top, out uint padding_bottom, out uint padding_left, out uint padding_right);
		public void @set (float xalign, float yalign, float xscale, float yscale);
		public void set_padding (uint padding_top, uint padding_bottom, uint padding_left, uint padding_right);
		[NoAccessorMethod]
		public uint bottom_padding { get; set; }
		[NoAccessorMethod]
		public uint left_padding { get; set; }
		[NoAccessorMethod]
		public uint right_padding { get; set; }
		[NoAccessorMethod]
		public uint top_padding { get; set; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public float xscale { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
		[NoAccessorMethod]
		public float yscale { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_button_get_type ()")]
	public class AppChooserButton : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.CellEditable, Gtk.AppChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AppChooserButton (string content_type);
		public void append_custom_item (string name, string label, GLib.Icon icon);
		public void append_separator ();
		public unowned string get_heading ();
		public bool get_show_default_item ();
		public bool get_show_dialog_item ();
		public void set_active_custom_item (string name);
		public void set_heading (string heading);
		public void set_show_default_item (bool setting);
		public void set_show_dialog_item (bool setting);
		public string heading { get; set; }
		public bool show_default_item { get; set construct; }
		public bool show_dialog_item { get; set construct; }
		public virtual signal void custom_item_activated (string item_name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_dialog_get_type ()")]
	public class AppChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.AppChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AppChooserDialog (Gtk.Window parent, Gtk.DialogFlags flags, GLib.File file);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AppChooserDialog.for_content_type (Gtk.Window parent, Gtk.DialogFlags flags, string content_type);
		public unowned string get_heading ();
		public unowned Gtk.Widget get_widget ();
		public void set_heading (string heading);
		[NoAccessorMethod]
		public GLib.File gfile { owned get; construct; }
		public string heading { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_widget_get_type ()")]
	public class AppChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.AppChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AppChooserWidget (string content_type);
		public unowned string get_default_text ();
		public bool get_show_all ();
		public bool get_show_default ();
		public bool get_show_fallback ();
		public bool get_show_other ();
		public bool get_show_recommended ();
		public void set_default_text (string text);
		public void set_show_all (bool setting);
		public void set_show_default (bool setting);
		public void set_show_fallback (bool setting);
		public void set_show_other (bool setting);
		public void set_show_recommended (bool setting);
		public string default_text { get; set; }
		public bool show_all { get; set construct; }
		public bool show_default { get; set construct; }
		public bool show_fallback { get; set construct; }
		public bool show_other { get; set construct; }
		public bool show_recommended { get; set construct; }
		public virtual signal void application_activated (GLib.AppInfo app_info);
		public virtual signal void application_selected (GLib.AppInfo app_info);
		public virtual signal void populate_popup (Gtk.Menu menu, GLib.AppInfo app_info);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_application_get_type ()")]
	public class Application : GLib.Application, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false)]
		public Application (string application_id, GLib.ApplicationFlags flags);
		public void add_accelerator (string accelerator, string action_name, GLib.Variant? parameter);
		public void add_window (Gtk.Window window);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_accels_for_action (string detailed_action_name);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_actions_for_accel (string accel);
		public unowned Gtk.Window get_active_window ();
		public unowned GLib.MenuModel get_app_menu ();
		public unowned GLib.Menu get_menu_by_id (string id);
		public unowned GLib.MenuModel get_menubar ();
		public unowned Gtk.Window get_window_by_id (uint id);
		public unowned GLib.List<weak Gtk.Window> get_windows ();
		public uint inhibit (Gtk.Window? window, Gtk.ApplicationInhibitFlags flags, string? reason);
		public bool is_inhibited (Gtk.ApplicationInhibitFlags flags);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] list_action_descriptions ();
		public bool prefers_app_menu ();
		public void remove_accelerator (string action_name, GLib.Variant? parameter);
		public void remove_window (Gtk.Window window);
		public void set_accels_for_action (string detailed_action_name, [CCode (array_length = false, array_null_terminated = true)] string[] accels);
		public void set_app_menu (GLib.MenuModel app_menu);
		public void set_menubar (GLib.MenuModel menubar);
		public void uninhibit (uint cookie);
		public Gtk.Window active_window { get; }
		public GLib.MenuModel app_menu { get; set; }
		public GLib.MenuModel menubar { get; set; }
		[NoAccessorMethod]
		public bool register_session { get; set; }
		public virtual signal void window_added (Gtk.Window window);
		public virtual signal void window_removed (Gtk.Window window);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_application_window_get_type ()")]
	public class ApplicationWindow : Gtk.Window, Atk.Implementor, Gtk.Buildable, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ApplicationWindow (Gtk.Application application);
		public uint get_id ();
		public bool get_show_menubar ();
		public void set_show_menubar (bool show_menubar);
		public bool show_menubar { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_arrow_get_type ()")]
	public class Arrow : Gtk.Misc, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Arrow (Gtk.ArrowType arrow_type, Gtk.ShadowType shadow_type);
		public void @set (Gtk.ArrowType arrow_type, Gtk.ShadowType shadow_type);
		[NoAccessorMethod]
		public Gtk.ArrowType arrow_type { get; set; }
		[NoAccessorMethod]
		public Gtk.ShadowType shadow_type { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_arrow_accessible_get_type ()")]
	public class ArrowAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ArrowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_aspect_frame_get_type ()")]
	public class AspectFrame : Gtk.Frame, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AspectFrame (string? label, float xalign, float yalign, float ratio, bool obey_child);
		public void @set (float xalign, float yalign, float ratio, bool obey_child);
		[NoAccessorMethod]
		public bool obey_child { get; set; }
		[NoAccessorMethod]
		public float ratio { get; set; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_assistant_get_type ()")]
	public class Assistant : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Assistant ();
		public void add_action_widget (Gtk.Widget child);
		public int append_page (Gtk.Widget page);
		public void commit ();
		public int get_current_page ();
		public int get_n_pages ();
		public unowned Gtk.Widget get_nth_page (int page_num);
		public bool get_page_complete (Gtk.Widget page);
		[Deprecated (since = "3.2")]
		public unowned Gdk.Pixbuf get_page_header_image (Gtk.Widget page);
		[Deprecated (since = "3.2")]
		public unowned Gdk.Pixbuf get_page_side_image (Gtk.Widget page);
		public unowned string get_page_title (Gtk.Widget page);
		public Gtk.AssistantPageType get_page_type (Gtk.Widget page);
		public int insert_page (Gtk.Widget page, int position);
		public void next_page ();
		public int prepend_page (Gtk.Widget page);
		public void previous_page ();
		public void remove_action_widget (Gtk.Widget child);
		public void remove_page (int page_num);
		public void set_current_page (int page_num);
		public void set_forward_page_func (owned Gtk.AssistantPageFunc page_func);
		public void set_page_complete (Gtk.Widget page, bool complete);
		[Deprecated (since = "3.2")]
		public void set_page_header_image (Gtk.Widget page, Gdk.Pixbuf pixbuf);
		[Deprecated (since = "3.2")]
		public void set_page_side_image (Gtk.Widget page, Gdk.Pixbuf pixbuf);
		public void set_page_title (Gtk.Widget page, string title);
		public void set_page_type (Gtk.Widget page, Gtk.AssistantPageType type);
		public void update_buttons_state ();
		[NoAccessorMethod]
		public int use_header_bar { get; construct; }
		public virtual signal void apply ();
		public virtual signal void cancel ();
		public virtual signal void close ();
		public virtual signal void escape ();
		public virtual signal void prepare (Gtk.Widget page);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_bin_get_type ()")]
	public abstract class Bin : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Bin ();
		public unowned Gtk.Widget get_child ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class BindingEntry {
		public weak Gtk.BindingSet binding_set;
		public uint destroyed;
		public weak Gtk.BindingEntry hash_next;
		public uint in_emission;
		public uint keyval;
		public uint marks_unbound;
		public Gdk.ModifierType modifiers;
		public weak Gtk.BindingEntry set_next;
		public weak Gtk.BindingSignal signals;
		public static void add_signal (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers, string signal_name, uint n_args, ...);
		public static GLib.TokenType add_signal_from_string (Gtk.BindingSet binding_set, string signal_desc);
		public static void add_signall (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers, string signal_name, GLib.SList<Gtk.BindingArg?> binding_args);
		public static void remove (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers);
		public static void skip (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class BindingSet {
		public weak Gtk.BindingEntry current;
		public weak Gtk.BindingEntry entries;
		public uint parsed;
		public int priority;
		public weak string set_name;
		public bool activate (uint keyval, Gdk.ModifierType modifiers, GLib.Object object);
		[Deprecated (since = "3.0")]
		public void add_path (Gtk.PathType path_type, string path_pattern, Gtk.PathPriorityType priority);
		public static unowned Gtk.BindingSet by_class (GLib.ObjectClass object_class);
		public static unowned Gtk.BindingSet find (string set_name);
		public static unowned Gtk.BindingSet @new (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class BindingSignal {
		[CCode (array_length_cname = "n_args")]
		public weak Gtk.BindingArg[] args;
		public uint n_args;
		public weak Gtk.BindingSignal next;
		public weak string signal_name;
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_boolean_cell_accessible_get_type ()")]
	public class BooleanCellAccessible : Gtk.RendererCellAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected BooleanCellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_box_get_type ()")]
	public class Box : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Box (Gtk.Orientation orientation, int spacing);
		public Gtk.BaselinePosition get_baseline_position ();
		public unowned Gtk.Widget get_center_widget ();
		public bool get_homogeneous ();
		public int get_spacing ();
		public void pack_end (Gtk.Widget child, bool expand = true, bool fill = true, uint padding = 0);
		public void pack_start (Gtk.Widget child, bool expand = true, bool fill = true, uint padding = 0);
		public void query_child_packing (Gtk.Widget child, out bool expand, out bool fill, out uint padding, out Gtk.PackType pack_type);
		public void reorder_child (Gtk.Widget child, int position);
		public void set_baseline_position (Gtk.BaselinePosition position);
		public void set_center_widget (Gtk.Widget widget);
		public void set_child_packing (Gtk.Widget child, bool expand, bool fill, uint padding, Gtk.PackType pack_type);
		public void set_homogeneous (bool homogeneous);
		public void set_spacing (int spacing);
		public Gtk.BaselinePosition baseline_position { get; set; }
		public bool homogeneous { get; set; }
		public int spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_builder_get_type ()")]
	public class Builder : GLib.Object {
		[CCode (has_construct_function = false)]
		public Builder ();
		public void add_callback_symbol (string callback_name, GLib.Callback callback_symbol);
		public void add_callback_symbols (string first_callback_name, ...);
		public uint add_from_file (string filename) throws GLib.Error;
		public uint add_from_resource (string resource_path) throws GLib.Error;
		public uint add_from_string (string buffer, size_t length) throws GLib.Error;
		public uint add_objects_from_file (string filename, [CCode (array_length = false, array_null_terminated = true)] string[] object_ids) throws GLib.Error;
		public uint add_objects_from_resource (string resource_path, [CCode (array_length = false, array_null_terminated = true)] string[] object_ids) throws GLib.Error;
		public uint add_objects_from_string (string buffer, size_t length, [CCode (array_length = false, array_null_terminated = true)] string[] object_ids) throws GLib.Error;
		public void connect_signals (void* user_data);
		public void connect_signals_full (Gtk.BuilderConnectFunc func);
		public static GLib.Quark error_quark ();
		public void expose_object (string name, GLib.Object object);
		[CCode (has_construct_function = false)]
		public Builder.from_file (string filename);
		[CCode (has_construct_function = false)]
		public Builder.from_resource (string resource_path);
		[CCode (has_construct_function = false)]
		public Builder.from_string (string str, ssize_t length);
		public unowned Gtk.Application get_application ();
		public unowned GLib.Object get_object (string name);
		public GLib.SList<weak GLib.Object> get_objects ();
		public unowned string get_translation_domain ();
		public virtual GLib.Type get_type_from_name (string type_name);
		public unowned GLib.Callback lookup_callback_symbol (string callback_name);
		public void set_application (Gtk.Application application);
		public void set_translation_domain (string domain);
		public bool value_from_string (GLib.ParamSpec pspec, string str, out GLib.Value value) throws GLib.Error;
		public bool value_from_string_type (GLib.Type type, string str, out GLib.Value value) throws GLib.Error;
		public string translation_domain { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_button_get_type ()")]
	public class Button : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button.from_icon_name (string icon_name, Gtk.IconSize size = Gtk.IconSize.BUTTON);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button.from_stock (string stock_id);
		public void get_alignment (out float xalign, out float yalign);
		public bool get_always_show_image ();
		public unowned Gdk.Window get_event_window ();
		public bool get_focus_on_click ();
		public unowned Gtk.Widget get_image ();
		public Gtk.PositionType get_image_position ();
		public unowned string get_label ();
		public Gtk.ReliefStyle get_relief ();
		public bool get_use_stock ();
		public bool get_use_underline ();
		public void set_alignment (float xalign, float yalign);
		public void set_always_show_image (bool always_show);
		public void set_focus_on_click (bool focus_on_click);
		public void set_image (Gtk.Widget image);
		public void set_image_position (Gtk.PositionType position);
		public void set_label (string? label);
		public void set_relief (Gtk.ReliefStyle relief);
		public void set_use_stock (bool use_stock);
		public void set_use_underline (bool use_underline);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button.with_mnemonic (string label);
		public bool always_show_image { get; set construct; }
		public bool focus_on_click { get; set; }
		public Gtk.Widget image { get; set; }
		public Gtk.PositionType image_position { get; set; }
		public string label { get; set construct; }
		public Gtk.ReliefStyle relief { get; set; }
		public bool use_stock { get; set construct; }
		public bool use_underline { get; set construct; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
		public virtual signal void activate ();
		[HasEmitter]
		public virtual signal void clicked ();
		[Deprecated (replacement = "Gtk.Widget.enter_notify_event", since = "2.8")]
		[HasEmitter]
		public virtual signal void enter ();
		[Deprecated (replacement = "Gtk.Widget.leave_notify_event", since = "2.8")]
		[HasEmitter]
		public virtual signal void leave ();
		[Deprecated (replacement = "Gtk.Widget.button_press_event", since = "2.8")]
		[HasEmitter]
		public virtual signal void pressed ();
		[Deprecated (replacement = "Gtk.Widget.button_release_event", since = "2.8")]
		[HasEmitter]
		public virtual signal void released ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_button_accessible_get_type ()")]
	public class ButtonAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Action, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_button_box_get_type ()")]
	public class ButtonBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ButtonBox (Gtk.Orientation orientation);
		public bool get_child_non_homogeneous (Gtk.Widget child);
		public bool get_child_secondary (Gtk.Widget child);
		public Gtk.ButtonBoxStyle get_layout ();
		public void set_child_non_homogeneous (Gtk.Widget child, bool non_homogeneous);
		public void set_child_secondary (Gtk.Widget child, bool is_secondary);
		public void set_layout (Gtk.ButtonBoxStyle layout_style);
		[NoAccessorMethod]
		public Gtk.ButtonBoxStyle layout_style { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_calendar_get_type ()")]
	public class Calendar : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Calendar ();
		public void clear_marks ();
		public void get_date (out uint year, out uint month, out uint day);
		public bool get_day_is_marked (uint day);
		public int get_detail_height_rows ();
		public int get_detail_width_chars ();
		public Gtk.CalendarDisplayOptions get_display_options ();
		public void mark_day (uint day);
		public void select_day (uint day);
		public void select_month (uint month, uint year);
		public void set_detail_func (owned Gtk.CalendarDetailFunc func);
		public void set_detail_height_rows (int rows);
		public void set_detail_width_chars (int chars);
		public void set_display_options (Gtk.CalendarDisplayOptions flags);
		public void unmark_day (uint day);
		[NoAccessorMethod]
		public int day { get; set; }
		public int detail_height_rows { get; set; }
		public int detail_width_chars { get; set; }
		[NoAccessorMethod]
		public int month { get; set; }
		[NoAccessorMethod]
		public bool no_month_change { get; set; }
		[NoAccessorMethod]
		public bool show_day_names { get; set; }
		[NoAccessorMethod]
		public bool show_details { get; set; }
		[NoAccessorMethod]
		public bool show_heading { get; set; }
		[NoAccessorMethod]
		public bool show_week_numbers { get; set; }
		[NoAccessorMethod]
		public int year { get; set; }
		public virtual signal void day_selected ();
		public virtual signal void day_selected_double_click ();
		public virtual signal void month_changed ();
		public virtual signal void next_month ();
		public virtual signal void next_year ();
		public virtual signal void prev_month ();
		public virtual signal void prev_year ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_cell_accessible_get_type ()")]
	public class CellAccessible : Gtk.Accessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected CellAccessible ();
		[NoWrapper]
		public virtual void update_cache ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_area_get_type ()")]
	public abstract class CellArea : GLib.InitiallyUnowned, Gtk.CellLayout, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected CellArea ();
		public virtual bool activate (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool edit_only);
		public bool activate_cell (Gtk.Widget widget, Gtk.CellRenderer renderer, Gdk.Event event, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		public virtual void add (Gtk.CellRenderer renderer);
		public void add_focus_sibling (Gtk.CellRenderer renderer, Gtk.CellRenderer sibling);
		public void add_with_properties (Gtk.CellRenderer renderer, ...);
		public void attribute_connect (Gtk.CellRenderer renderer, string attribute, int column);
		public void attribute_disconnect (Gtk.CellRenderer renderer, string attribute);
		public int attribute_get_column (Gtk.CellRenderer renderer, string attribute);
		public void cell_get (Gtk.CellRenderer renderer, ...);
		public void cell_get_property (Gtk.CellRenderer renderer, string property_name, GLib.Value value);
		public void cell_get_valist (Gtk.CellRenderer renderer, string first_property_name, va_list var_args);
		public void cell_set (Gtk.CellRenderer renderer, ...);
		public void cell_set_property (Gtk.CellRenderer renderer, string property_name, GLib.Value value);
		public void cell_set_valist (Gtk.CellRenderer renderer, string first_property_name, va_list var_args);
		public virtual Gtk.CellAreaContext copy_context (Gtk.CellAreaContext context);
		public virtual Gtk.CellAreaContext create_context ();
		public virtual int event (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Event event, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		[CCode (cname = "gtk_cell_area_class_find_cell_property")]
		public class unowned GLib.ParamSpec find_cell_property (string property_name);
		public virtual bool focus (Gtk.DirectionType direction);
		public virtual void @foreach (Gtk.CellCallback callback);
		public virtual void foreach_alloc (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gdk.Rectangle background_area, Gtk.CellAllocCallback callback);
		public Gdk.Rectangle get_cell_allocation (Gtk.CellAreaContext context, Gtk.Widget widget, Gtk.CellRenderer renderer, Gdk.Rectangle cell_area);
		public unowned Gtk.CellRenderer get_cell_at_position (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, int x, int y, out Gdk.Rectangle alloc_area);
		[NoWrapper]
		public virtual void get_cell_property (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public unowned string get_current_path_string ();
		public unowned Gtk.CellEditable get_edit_widget ();
		public unowned Gtk.CellRenderer get_edited_cell ();
		public unowned Gtk.CellRenderer get_focus_cell ();
		public unowned Gtk.CellRenderer get_focus_from_sibling (Gtk.CellRenderer renderer);
		public unowned GLib.List<Gtk.CellRenderer> get_focus_siblings (Gtk.CellRenderer renderer);
		public virtual void get_preferred_height (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_height, out int natural_height);
		public virtual void get_preferred_height_for_width (Gtk.CellAreaContext context, Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
		public virtual void get_preferred_width (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_width, out int natural_width);
		public virtual void get_preferred_width_for_height (Gtk.CellAreaContext context, Gtk.Widget widget, int height, out int minimum_width, out int natural_width);
		public virtual Gtk.SizeRequestMode get_request_mode ();
		public bool has_renderer (Gtk.CellRenderer renderer);
		public Gdk.Rectangle inner_cell_area (Gtk.Widget widget, Gdk.Rectangle cell_area);
		[CCode (cname = "gtk_cell_area_class_install_cell_property")]
		public class void install_cell_property (uint property_id, GLib.ParamSpec pspec);
		public virtual bool is_activatable ();
		public bool is_focus_sibling (Gtk.CellRenderer renderer, Gtk.CellRenderer sibling);
		[CCode (cname = "gtk_cell_area_class_list_cell_properties")]
		public class unowned GLib.ParamSpec list_cell_properties (uint n_properties);
		public virtual void remove (Gtk.CellRenderer renderer);
		public void remove_focus_sibling (Gtk.CellRenderer renderer, Gtk.CellRenderer sibling);
		public virtual void render (Gtk.CellAreaContext context, Gtk.Widget widget, Cairo.Context cr, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool paint_focus);
		public void request_renderer (Gtk.CellRenderer renderer, Gtk.Orientation orientation, Gtk.Widget widget, int for_size, out int minimum_size, out int natural_size);
		[NoWrapper]
		public virtual void set_cell_property (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public void set_focus_cell (Gtk.CellRenderer renderer);
		public void stop_editing (bool canceled);
		public Gtk.CellEditable edit_widget { get; }
		public Gtk.CellRenderer edited_cell { get; }
		public Gtk.CellRenderer focus_cell { get; set; }
		public virtual signal void add_editable (Gtk.CellRenderer p0, Gtk.CellEditable p1, Gdk.Rectangle p2, string p3);
		[HasEmitter]
		public virtual signal void apply_attributes (Gtk.TreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded);
		public virtual signal void focus_changed (Gtk.CellRenderer p0, string p1);
		public virtual signal void remove_editable (Gtk.CellRenderer p0, Gtk.CellEditable p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_area_box_get_type ()")]
	public class CellAreaBox : Gtk.CellArea, Gtk.CellLayout, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkCellArea*")]
		public CellAreaBox ();
		public int get_spacing ();
		public void set_spacing (int spacing);
		public int spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_area_context_get_type ()")]
	public class CellAreaContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CellAreaContext ();
		public virtual void allocate (int width, int height);
		public void get_allocation (out int width, out int height);
		public unowned Gtk.CellArea get_area ();
		public void get_preferred_height (out int minimum_height, out int natural_height);
		public virtual void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
		public void get_preferred_width (out int minimum_width, out int natural_width);
		public virtual void get_preferred_width_for_height (int height, out int minimum_width, out int natural_width);
		public void push_preferred_height (int minimum_height, int natural_height);
		public void push_preferred_width (int minimum_width, int natural_width);
		public virtual void reset ();
		public Gtk.CellArea area { get; construct; }
		[NoAccessorMethod]
		public int minimum_height { get; }
		[NoAccessorMethod]
		public int minimum_width { get; }
		[NoAccessorMethod]
		public int natural_height { get; }
		[NoAccessorMethod]
		public int natural_width { get; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_get_type ()")]
	public abstract class CellRenderer : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected CellRenderer ();
		public virtual bool activate (Gdk.Event event, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		public virtual Gdk.Rectangle get_aligned_area (Gtk.Widget widget, Gtk.CellRendererState flags, Gdk.Rectangle cell_area);
		public void get_alignment (out float xalign, out float yalign);
		public void get_fixed_size (out int width, out int height);
		public void get_padding (out int xpad, out int ypad);
		public virtual void get_preferred_height (Gtk.Widget widget, out int minimum_size, out int natural_size);
		public virtual void get_preferred_height_for_width (Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
		public void get_preferred_size (Gtk.Widget widget, out Gtk.Requisition minimum_size, out Gtk.Requisition natural_size);
		public virtual void get_preferred_width (Gtk.Widget widget, out int minimum_size, out int natural_size);
		public virtual void get_preferred_width_for_height (Gtk.Widget widget, int height, out int minimum_width, out int natural_width);
		public virtual Gtk.SizeRequestMode get_request_mode ();
		public bool get_sensitive ();
		[Deprecated (replacement = "get_preferred_size", since = "3.0")]
		public abstract void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
		public Gtk.StateFlags get_state (Gtk.Widget widget, Gtk.CellRendererState cell_state);
		public bool get_visible ();
		public bool is_activatable ();
		public abstract void render (Cairo.Context cr, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		[CCode (cname = "gtk_cell_renderer_class_set_accessible_type")]
		public class void set_accessible_type (GLib.Type type);
		public void set_alignment (float xalign, float yalign);
		public void set_fixed_size (int width, int height);
		public void set_padding (int xpad, int ypad);
		public void set_sensitive (bool sensitive);
		public void set_visible (bool visible);
		public virtual unowned Gtk.CellEditable start_editing (Gdk.Event event, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		public void stop_editing (bool canceled);
		[NoAccessorMethod]
		public string cell_background { set; }
		[Deprecated (replacement = "Gtk.CellRenderer.cell_background_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color cell_background_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA cell_background_rgba { get; set; }
		[NoAccessorMethod]
		public bool cell_background_set { get; set; }
		[NoAccessorMethod]
		public bool editing { get; }
		[NoAccessorMethod]
		public int height { get; set; }
		[NoAccessorMethod]
		public bool is_expanded { get; set; }
		[NoAccessorMethod]
		public bool is_expander { get; set; }
		[NoAccessorMethod]
		public Gtk.CellRendererMode mode { get; set; }
		public bool sensitive { get; set; }
		public bool visible { get; set; }
		[NoAccessorMethod]
		public int width { get; set; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public uint xpad { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
		[NoAccessorMethod]
		public uint ypad { get; set; }
		[HasEmitter]
		public virtual signal void editing_canceled ();
		public virtual signal void editing_started (Gtk.CellEditable editable, string path);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_accel_get_type ()")]
	public class CellRendererAccel : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererAccel ();
		[NoAccessorMethod]
		public uint accel_key { get; set; }
		[NoAccessorMethod]
		public Gtk.CellRendererAccelMode accel_mode { get; set; }
		[NoAccessorMethod]
		public Gdk.ModifierType accel_mods { get; set; }
		[NoAccessorMethod]
		public uint keycode { get; set; }
		public virtual signal void accel_cleared (string path_string);
		public virtual signal void accel_edited (string path_string, uint accel_key, Gdk.ModifierType accel_mods, uint hardware_keycode);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_combo_get_type ()")]
	public class CellRendererCombo : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererCombo ();
		[NoAccessorMethod]
		public bool has_entry { get; set; }
		[NoAccessorMethod]
		public Gtk.TreeModel model { owned get; set; }
		[NoAccessorMethod]
		public int text_column { get; set; }
		public virtual signal void changed (string p0, Gtk.TreeIter p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_pixbuf_get_type ()")]
	public class CellRendererPixbuf : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererPixbuf ();
		[NoAccessorMethod]
		public bool follow_state { get; set; }
		[NoAccessorMethod]
		public GLib.Icon gicon { owned get; set; }
		[NoAccessorMethod]
		public string icon_name { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf_expander_closed { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf_expander_open { owned get; set; }
		[NoAccessorMethod]
		public string stock_detail { owned get; set; }
		[NoAccessorMethod]
		public string stock_id { owned get; set; }
		[NoAccessorMethod]
		public uint stock_size { get; set; }
		[NoAccessorMethod]
		public Cairo.Surface surface { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_progress_get_type ()")]
	public class CellRendererProgress : Gtk.CellRenderer, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererProgress ();
		[NoAccessorMethod]
		public bool inverted { get; set; }
		[NoAccessorMethod]
		public int pulse { get; set; }
		[NoAccessorMethod]
		public string text { owned get; set; }
		[NoAccessorMethod]
		public float text_xalign { get; set; }
		[NoAccessorMethod]
		public float text_yalign { get; set; }
		[NoAccessorMethod]
		public int value { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_spin_get_type ()")]
	public class CellRendererSpin : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererSpin ();
		[NoAccessorMethod]
		public Gtk.Adjustment adjustment { owned get; set; }
		[NoAccessorMethod]
		public double climb_rate { get; set; }
		[NoAccessorMethod]
		public uint digits { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_spinner_get_type ()")]
	public class CellRendererSpinner : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererSpinner ();
		[NoAccessorMethod]
		public bool active { get; set; }
		[NoAccessorMethod]
		public uint pulse { get; set; }
		[NoAccessorMethod]
		public Gtk.IconSize size { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_text_get_type ()")]
	public class CellRendererText : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererText ();
		public void set_fixed_height_from_font (int number_of_rows);
		[NoAccessorMethod]
		public bool align_set { get; set; }
		[NoAccessorMethod]
		public Pango.Alignment alignment { get; set; }
		[NoAccessorMethod]
		public Pango.AttrList attributes { owned get; set; }
		[NoAccessorMethod]
		public string background { set; }
		[Deprecated (replacement = "background_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color background_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA background_rgba { get; set; }
		[NoAccessorMethod]
		public bool background_set { get; set; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool editable_set { get; set; }
		[NoAccessorMethod]
		public Pango.EllipsizeMode ellipsize { get; set; }
		[NoAccessorMethod]
		public bool ellipsize_set { get; set; }
		[NoAccessorMethod]
		public string family { owned get; set; }
		[NoAccessorMethod]
		public bool family_set { get; set; }
		[NoAccessorMethod]
		public string font { owned get; set; }
		[NoAccessorMethod]
		public Pango.FontDescription font_desc { owned get; set; }
		[NoAccessorMethod]
		public string foreground { set; }
		[Deprecated (replacement = "foreground_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color foreground_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA foreground_rgba { get; set; }
		[NoAccessorMethod]
		public bool foreground_set { get; set; }
		[NoAccessorMethod]
		public string language { owned get; set; }
		[NoAccessorMethod]
		public bool language_set { get; set; }
		[NoAccessorMethod]
		public string markup { set; }
		[NoAccessorMethod]
		public int max_width_chars { get; set; }
		[NoAccessorMethod]
		public string placeholder_text { owned get; set; }
		[NoAccessorMethod]
		public int rise { get; set; }
		[NoAccessorMethod]
		public bool rise_set { get; set; }
		[NoAccessorMethod]
		public double scale { get; set; }
		[NoAccessorMethod]
		public bool scale_set { get; set; }
		[NoAccessorMethod]
		public bool single_paragraph_mode { get; set; }
		[NoAccessorMethod]
		public int size { get; set; }
		[NoAccessorMethod]
		public double size_points { get; set; }
		[NoAccessorMethod]
		public bool size_set { get; set; }
		[NoAccessorMethod]
		public Pango.Stretch stretch { get; set; }
		[NoAccessorMethod]
		public bool stretch_set { get; set; }
		[NoAccessorMethod]
		public bool strikethrough { get; set; }
		[NoAccessorMethod]
		public bool strikethrough_set { get; set; }
		[NoAccessorMethod]
		public Pango.Style style { get; set; }
		[NoAccessorMethod]
		public bool style_set { get; set; }
		[NoAccessorMethod]
		public string text { owned get; set; }
		[NoAccessorMethod]
		public Pango.Underline underline { get; set; }
		[NoAccessorMethod]
		public bool underline_set { get; set; }
		[NoAccessorMethod]
		public Pango.Variant variant { get; set; }
		[NoAccessorMethod]
		public bool variant_set { get; set; }
		[NoAccessorMethod]
		public int weight { get; set; }
		[NoAccessorMethod]
		public bool weight_set { get; set; }
		[NoAccessorMethod]
		public int width_chars { get; set; }
		[NoAccessorMethod]
		public Pango.WrapMode wrap_mode { get; set; }
		[NoAccessorMethod]
		public int wrap_width { get; set; }
		public virtual signal void edited (string path, string new_text);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_toggle_get_type ()")]
	public class CellRendererToggle : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererToggle ();
		public bool get_activatable ();
		public bool get_active ();
		public bool get_radio ();
		public void set_activatable (bool setting);
		public void set_active (bool setting);
		public void set_radio (bool radio);
		public bool activatable { get; set; }
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool inconsistent { get; set; }
		[NoAccessorMethod]
		public int indicator_size { get; set; }
		public bool radio { get; set; }
		public virtual signal void toggled (string path);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_view_get_type ()")]
	public class CellView : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CellView ();
		public Gtk.TreePath get_displayed_row ();
		public bool get_draw_sensitive ();
		public bool get_fit_model ();
		public unowned Gtk.TreeModel get_model ();
		public bool get_size_of_row (Gtk.TreePath path, out Gtk.Requisition requisition);
		[Deprecated (replacement = "set_background_rgba", since = "3.4")]
		public void set_background_color (Gdk.Color color);
		public void set_background_rgba (Gdk.RGBA rgba);
		public void set_displayed_row (Gtk.TreePath path);
		public void set_draw_sensitive (bool draw_sensitive);
		public void set_fit_model (bool fit_model);
		public void set_model (Gtk.TreeModel? model);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CellView.with_context (Gtk.CellArea area, Gtk.CellAreaContext context);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CellView.with_markup (string markup);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CellView.with_pixbuf (Gdk.Pixbuf pixbuf);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CellView.with_text (string text);
		[NoAccessorMethod]
		public string background { set; }
		[Deprecated (replacement = "background_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color background_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA background_rgba { get; set; }
		[NoAccessorMethod]
		public bool background_set { get; set; }
		[NoAccessorMethod]
		public Gtk.CellArea cell_area { owned get; construct; }
		[NoAccessorMethod]
		public Gtk.CellAreaContext cell_area_context { owned get; construct; }
		public bool draw_sensitive { get; set; }
		public bool fit_model { get; set; }
		public Gtk.TreeModel model { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_check_button_get_type ()")]
	public class CheckButton : Gtk.ToggleButton, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckButton ();
		[NoWrapper]
		public virtual void draw_indicator (Cairo.Context cr);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckButton.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckButton.with_mnemonic (string label);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_check_menu_item_get_type ()")]
	public class CheckMenuItem : Gtk.MenuItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckMenuItem ();
		[NoWrapper]
		public virtual void draw_indicator (Cairo.Context cr);
		public bool get_active ();
		public bool get_draw_as_radio ();
		public bool get_inconsistent ();
		public void set_active (bool is_active);
		public void set_draw_as_radio (bool draw_as_radio);
		public void set_inconsistent (bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckMenuItem.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckMenuItem.with_mnemonic (string label);
		public bool active { get; set; }
		public bool draw_as_radio { get; set; }
		public bool inconsistent { get; set; }
		[HasEmitter]
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_check_menu_item_accessible_get_type ()")]
	public class CheckMenuItemAccessible : Gtk.MenuItemAccessible, Atk.Component, Atk.Action, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected CheckMenuItemAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_clipboard_get_type ()")]
	public class Clipboard : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Clipboard ();
		public void clear ();
		public static unowned Gtk.Clipboard @get (Gdk.Atom selection);
		public static unowned Gtk.Clipboard get_default (Gdk.Display display);
		public unowned Gdk.Display get_display ();
		public static unowned Gtk.Clipboard get_for_display (Gdk.Display display, Gdk.Atom selection);
		public unowned GLib.Object get_owner ();
		public void request_contents (Gdk.Atom target, Gtk.ClipboardReceivedFunc callback);
		public void request_image (Gtk.ClipboardImageReceivedFunc callback);
		public void request_rich_text (Gtk.TextBuffer buffer, Gtk.ClipboardRichTextReceivedFunc callback);
		public void request_targets (Gtk.ClipboardTargetsReceivedFunc callback);
		public void request_text (Gtk.ClipboardTextReceivedFunc callback);
		public void request_uris (Gtk.ClipboardURIReceivedFunc callback);
		public void set_can_store (Gtk.TargetEntry[] targets);
		public void set_image (Gdk.Pixbuf pixbuf);
		public void set_text (string text, int len);
		public bool set_with_data (Gtk.TargetEntry[] targets, Gtk.ClipboardGetFunc get_func, Gtk.ClipboardClearFunc clear_func);
		public bool set_with_owner (Gtk.TargetEntry[] targets, Gtk.ClipboardGetFunc get_func, Gtk.ClipboardClearFunc clear_func, GLib.Object owner);
		public void store ();
		public Gtk.SelectionData? wait_for_contents (Gdk.Atom target);
		public Gdk.Pixbuf? wait_for_image ();
		[CCode (array_length_type = "gsize")]
		public uint8[]? wait_for_rich_text (Gtk.TextBuffer buffer, out Gdk.Atom format);
		public bool wait_for_targets (out Gdk.Atom[] targets);
		public string? wait_for_text ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[]? wait_for_uris ();
		public bool wait_is_image_available ();
		public bool wait_is_rich_text_available (Gtk.TextBuffer buffer);
		public bool wait_is_target_available (Gdk.Atom target);
		public bool wait_is_text_available ();
		public bool wait_is_uris_available ();
		public virtual signal void owner_change (Gdk.Event p0);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_button_get_type ()")]
	public class ColorButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable, Gtk.ColorChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorButton ();
		public uint16 get_alpha ();
		public void get_color (out Gdk.Color color);
		public unowned string get_title ();
		public bool get_use_alpha ();
		public void set_alpha (uint16 alpha);
		public void set_color (Gdk.Color color);
		public void set_title (string title);
		public void set_use_alpha (bool use_alpha);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorButton.with_color (Gdk.Color color);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorButton.with_rgba (Gdk.RGBA rgba);
		public uint alpha { get; set; }
		[Deprecated (replacement = "rgba", since = "3.4")]
		public Gdk.Color color { get; set; }
		public Gdk.RGBA rgba { get; set; }
		public string title { get; set; }
		public bool use_alpha { get; set; }
		public virtual signal void color_set ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_chooser_dialog_get_type ()")]
	public class ColorChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.ColorChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorChooserDialog (string? title, Gtk.Window? parent);
		[NoAccessorMethod]
		public bool show_editor { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_chooser_widget_get_type ()")]
	public class ColorChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.ColorChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorChooserWidget ();
		[NoAccessorMethod]
		public bool show_editor { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_selection_get_type ()")]
	public class ColorSelection : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorSelection ();
		public uint16 get_current_alpha ();
		[Deprecated (replacement = "get_current_rgba", since = "3.4")]
		public void get_current_color (out Gdk.Color color);
		public Gdk.RGBA get_current_rgba ();
		public bool get_has_opacity_control ();
		public bool get_has_palette ();
		public uint16 get_previous_alpha ();
		public void get_previous_color (out Gdk.Color color);
		public Gdk.RGBA get_previous_rgba ();
		public bool is_adjusting ();
		public static bool palette_from_string (string str, out Gdk.Color[] colors);
		public static string palette_to_string (Gdk.Color[] colors);
		public static unowned Gtk.ColorSelectionChangePaletteWithScreenFunc set_change_palette_with_screen_hook (Gtk.ColorSelectionChangePaletteWithScreenFunc func);
		public void set_current_alpha (uint16 alpha);
		[Deprecated (replacement = "set_current_rgba", since = "3.4")]
		public void set_current_color (Gdk.Color color);
		public void set_current_rgba (Gdk.RGBA rgba);
		public void set_has_opacity_control (bool has_opacity);
		public void set_has_palette (bool has_palette);
		public void set_previous_alpha (uint16 alpha);
		public void set_previous_color (Gdk.Color color);
		public void set_previous_rgba (Gdk.RGBA rgba);
		public uint current_alpha { get; set; }
		[Deprecated (replacement = "current_rgba", since = "3.4")]
		public Gdk.Color current_color { get; set; }
		public Gdk.RGBA current_rgba { get; set; }
		public bool has_opacity_control { get; set; }
		public bool has_palette { get; set; }
		public virtual signal void color_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_selection_dialog_get_type ()")]
	public class ColorSelectionDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorSelectionDialog (string title);
		public unowned Gtk.ColorSelection get_color_selection ();
		[NoAccessorMethod]
		public Gtk.Widget cancel_button { owned get; }
		public Gtk.Widget color_selection { get; }
		[NoAccessorMethod]
		public Gtk.Widget help_button { owned get; }
		[NoAccessorMethod]
		public Gtk.Widget ok_button { owned get; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_combo_box_get_type ()")]
	public class ComboBox : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.CellEditable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox ();
		public int get_active ();
		public unowned string get_active_id ();
		public bool get_active_iter (out Gtk.TreeIter iter);
		public bool get_add_tearoffs ();
		public Gtk.SensitivityType get_button_sensitivity ();
		public int get_column_span_column ();
		public int get_entry_text_column ();
		public bool get_focus_on_click ();
		public bool get_has_entry ();
		public int get_id_column ();
		public unowned Gtk.TreeModel get_model ();
		public unowned Atk.Object get_popup_accessible ();
		public bool get_popup_fixed_width ();
		public unowned Gtk.TreeViewRowSeparatorFunc get_row_separator_func ();
		public int get_row_span_column ();
		public unowned string get_title ();
		public int get_wrap_width ();
		public void popup_for_device (Gdk.Device device);
		public void set_active (int index_);
		public bool set_active_id (string active_id);
		public void set_active_iter (Gtk.TreeIter? iter);
		public void set_add_tearoffs (bool add_tearoffs);
		public void set_button_sensitivity (Gtk.SensitivityType sensitivity);
		public void set_column_span_column (int column_span);
		public void set_entry_text_column (int text_column);
		public void set_focus_on_click (bool focus_on_click);
		public void set_id_column (int id_column);
		public void set_model (Gtk.TreeModel? model);
		public void set_popup_fixed_width (bool fixed);
		public void set_row_separator_func (owned Gtk.TreeViewRowSeparatorFunc func);
		public void set_row_span_column (int row_span);
		public void set_title (string title);
		public void set_wrap_width (int width);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_area (Gtk.CellArea area);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_area_and_entry (Gtk.CellArea area);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_entry ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_model (Gtk.TreeModel model);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_model_and_entry (Gtk.TreeModel model);
		public int active { get; set; }
		public string active_id { get; set; }
		public bool add_tearoffs { get; set; }
		public Gtk.SensitivityType button_sensitivity { get; set; }
		[NoAccessorMethod]
		public Gtk.CellArea cell_area { owned get; construct; }
		public int column_span_column { get; set; }
		public int entry_text_column { get; set; }
		public bool focus_on_click { get; set; }
		public bool has_entry { get; construct; }
		[NoAccessorMethod]
		public bool has_frame { get; set; }
		public int id_column { get; set; }
		public Gtk.TreeModel model { get; set; }
		public bool popup_fixed_width { get; set; }
		[NoAccessorMethod]
		public bool popup_shown { get; }
		public int row_span_column { get; set; }
		[NoAccessorMethod]
		public string tearoff_title { owned get; set; }
		public int wrap_width { get; set; }
		public virtual signal void changed ();
		public virtual signal string format_entry_text (string path);
		public virtual signal void move_active (Gtk.ScrollType p0);
		[HasEmitter]
		public virtual signal bool popdown ();
		[HasEmitter]
		public virtual signal void popup ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_combo_box_accessible_get_type ()")]
	public class ComboBoxAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Action, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected ComboBoxAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_combo_box_text_get_type ()")]
	public class ComboBoxText : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.CellEditable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBoxText ();
		public void append (string id, string text);
		public void append_text (string text);
		public string get_active_text ();
		public void insert (int position, string id, string text);
		public void insert_text (int position, string text);
		public void prepend (string id, string text);
		public void prepend_text (string text);
		public void remove (int position);
		public void remove_all ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBoxText.with_entry ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_container_get_type ()")]
	public abstract class Container : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Container ();
		public void add_with_properties (Gtk.Widget widget, ...);
		public void child_get (Gtk.Widget child, ...);
		public void child_get_property (Gtk.Widget child, string property_name, GLib.Value value);
		public void child_get_valist (Gtk.Widget child, string first_property_name, va_list var_args);
		public void child_notify (Gtk.Widget child, string child_property);
		public void child_set (Gtk.Widget child, ...);
		public void child_set_property (Gtk.Widget child, string property_name, GLib.Value value);
		public void child_set_valist (Gtk.Widget child, string first_property_name, va_list var_args);
		public virtual GLib.Type child_type ();
		public static unowned GLib.ParamSpec class_find_child_property (GLib.ObjectClass cclass, string property_name);
		public static unowned GLib.ParamSpec class_list_child_properties (GLib.ObjectClass cclass, uint n_properties);
		[NoWrapper]
		public virtual unowned string composite_name (Gtk.Widget child);
		public void forall (Gtk.Callback callback);
		[CCode (vfunc_name = "forall")]
		[NoWrapper]
		public virtual void forall_internal (bool include_internal, Gtk.Callback callback);
		public void @foreach (Gtk.Callback callback);
		public uint get_border_width ();
		[NoWrapper]
		public virtual void get_child_property (Gtk.Widget child, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public GLib.List<weak Gtk.Widget> get_children ();
		public bool get_focus_chain (out GLib.List<weak Gtk.Widget> focusable_widgets);
		public unowned Gtk.Widget get_focus_child ();
		public unowned Gtk.Adjustment get_focus_hadjustment ();
		public unowned Gtk.Adjustment get_focus_vadjustment ();
		public virtual Gtk.WidgetPath get_path_for_child (Gtk.Widget child);
		public Gtk.ResizeMode get_resize_mode ();
		[CCode (cname = "gtk_container_class_handle_border_width")]
		public class void handle_border_width ();
		[CCode (cname = "gtk_container_class_install_child_property")]
		public class void install_child_property (uint property_id, GLib.ParamSpec pspec);
		public void propagate_draw (Gtk.Widget child, Cairo.Context cr);
		public void resize_children ();
		public void set_border_width (uint border_width);
		[NoWrapper]
		public virtual void set_child_property (Gtk.Widget child, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public void set_focus_chain (GLib.List<Gtk.Widget> focusable_widgets);
		public void set_focus_hadjustment (Gtk.Adjustment adjustment);
		public void set_focus_vadjustment (Gtk.Adjustment adjustment);
		public void set_reallocate_redraws (bool needs_redraws);
		public void set_resize_mode (Gtk.ResizeMode resize_mode);
		public void unset_focus_chain ();
		public uint border_width { get; set; }
		[NoAccessorMethod]
		public Gtk.Widget child { set; }
		public Gtk.ResizeMode resize_mode { get; set; }
		[HasEmitter]
		public virtual signal void add (Gtk.Widget widget);
		[HasEmitter]
		public virtual signal void check_resize ();
		[HasEmitter]
		public virtual signal void remove (Gtk.Widget widget);
		[HasEmitter]
		public virtual signal void set_focus_child (Gtk.Widget? child);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_container_accessible_get_type ()")]
	public class ContainerAccessible : Gtk.WidgetAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ContainerAccessible ();
		[NoWrapper]
		public virtual int add_gtk (Gtk.Container container, Gtk.Widget widget, void* data);
		[NoWrapper]
		public virtual int remove_gtk (Gtk.Container container, Gtk.Widget widget, void* data);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_container_cell_accessible_get_type ()")]
	public class ContainerCellAccessible : Gtk.CellAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		public ContainerCellAccessible ();
		public void add_child (Gtk.CellAccessible child);
		public unowned GLib.List<Gtk.CellAccessible> get_children ();
		public void remove_child (Gtk.CellAccessible child);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public class CssProvider : GLib.Object, Gtk.StyleProvider {
		[CCode (has_construct_function = false)]
		public CssProvider ();
		public static GLib.Quark error_quark ();
		public static unowned Gtk.CssProvider get_default ();
		public static unowned Gtk.CssProvider get_named (string name, string? variant);
		public bool load_from_data (string data, ssize_t length) throws GLib.Error;
		public bool load_from_file (GLib.File file) throws GLib.Error;
		public bool load_from_path (string path) throws GLib.Error;
		public void load_from_resource (string resource_path);
		public string to_string ();
		public virtual signal void parsing_error (Gtk.CssSection section, GLib.Error error);
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_css_section_ref", type_id = "gtk_css_section_get_type ()", unref_function = "gtk_css_section_unref")]
	[Compact]
	public class CssSection {
		public uint get_end_line ();
		public uint get_end_position ();
		public unowned GLib.File get_file ();
		public unowned Gtk.CssSection get_parent ();
		public Gtk.CssSectionType get_section_type ();
		public uint get_start_line ();
		public uint get_start_position ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_dialog_get_type ()")]
	public class Dialog : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Dialog ();
		public void add_action_widget (Gtk.Widget child, int response_id);
		public unowned Gtk.Widget add_button (string button_text, int response_id);
		public void add_buttons (...);
		public unowned Gtk.Widget get_action_area ();
		[CCode (type = "GtkWidget*")]
		public unowned Gtk.Box get_content_area ();
		public unowned Gtk.Widget get_header_bar ();
		public int get_response_for_widget (Gtk.Widget widget);
		public unowned Gtk.Widget get_widget_for_response (int response_id);
		public int run ();
		[CCode (sentinel = "-1")]
		public void set_alternative_button_order (...);
		public void set_alternative_button_order_from_array ([CCode (array_length_pos = 0.5)] int[] new_order);
		public void set_default_response (int response_id);
		public void set_response_sensitive (int response_id, bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Dialog.with_buttons (string? title, Gtk.Window? parent, Gtk.DialogFlags flags, ...);
		[NoAccessorMethod]
		public int use_header_bar { get; construct; }
		public virtual signal void close ();
		[HasEmitter]
		public virtual signal void response (int response_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_drawing_area_get_type ()")]
	public class DrawingArea : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DrawingArea ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_entry_get_type ()")]
	public class Entry : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Editable, Gtk.CellEditable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Entry ();
		public bool get_activates_default ();
		public float get_alignment ();
		public unowned Pango.AttrList get_attributes ();
		public unowned Gtk.EntryBuffer get_buffer ();
		public unowned Gtk.EntryCompletion get_completion ();
		public int get_current_icon_drag_source ();
		public unowned Gtk.Adjustment get_cursor_hadjustment ();
		[NoWrapper]
		public virtual void get_frame_size (int x, int y, int width, int height);
		public bool get_has_frame ();
		public bool get_icon_activatable (Gtk.EntryIconPosition icon_pos);
		public Gdk.Rectangle get_icon_area (Gtk.EntryIconPosition icon_pos);
		public int get_icon_at_pos (int x, int y);
		public unowned GLib.Icon get_icon_gicon (Gtk.EntryIconPosition icon_pos);
		public unowned string get_icon_name (Gtk.EntryIconPosition icon_pos);
		public unowned Gdk.Pixbuf get_icon_pixbuf (Gtk.EntryIconPosition icon_pos);
		public bool get_icon_sensitive (Gtk.EntryIconPosition icon_pos);
		public unowned string get_icon_stock (Gtk.EntryIconPosition icon_pos);
		public Gtk.ImageType get_icon_storage_type (Gtk.EntryIconPosition icon_pos);
		public string? get_icon_tooltip_markup (Gtk.EntryIconPosition icon_pos);
		public string? get_icon_tooltip_text (Gtk.EntryIconPosition icon_pos);
		public unowned Gtk.Border? get_inner_border ();
		public Gtk.InputHints get_input_hints ();
		public Gtk.InputPurpose get_input_purpose ();
		public unichar get_invisible_char ();
		public unowned Pango.Layout get_layout ();
		public void get_layout_offsets (out int x, out int y);
		public int get_max_length ();
		public int get_max_width_chars ();
		public bool get_overwrite_mode ();
		public unowned string get_placeholder_text ();
		public double get_progress_fraction ();
		public double get_progress_pulse_step ();
		public unowned Pango.TabArray? get_tabs ();
		public unowned string get_text ();
		public void get_text_area (out Gdk.Rectangle text_area);
		[NoWrapper]
		public virtual void get_text_area_size (out int x, out int y, out int width, out int height);
		public uint16 get_text_length ();
		public bool get_visibility ();
		public int get_width_chars ();
		public void grab_focus_without_selecting ();
		public bool im_context_filter_keypress (Gdk.EventKey event);
		public int layout_index_to_text_index (int layout_index);
		public void progress_pulse ();
		public void reset_im_context ();
		public void set_activates_default (bool setting);
		public void set_alignment (float xalign);
		public void set_attributes (Pango.AttrList attrs);
		public void set_buffer (Gtk.EntryBuffer buffer);
		public void set_completion (Gtk.EntryCompletion completion);
		public void set_cursor_hadjustment (Gtk.Adjustment adjustment);
		public void set_has_frame (bool setting);
		public void set_icon_activatable (Gtk.EntryIconPosition icon_pos, bool activatable);
		public void set_icon_drag_source (Gtk.EntryIconPosition icon_pos, Gtk.TargetList target_list, Gdk.DragAction actions);
		public void set_icon_from_gicon (Gtk.EntryIconPosition icon_pos, GLib.Icon? icon);
		public void set_icon_from_icon_name (Gtk.EntryIconPosition icon_pos, string? icon_name);
		public void set_icon_from_pixbuf (Gtk.EntryIconPosition icon_pos, Gdk.Pixbuf? pixbuf);
		public void set_icon_from_stock (Gtk.EntryIconPosition icon_pos, string? stock_id);
		public void set_icon_sensitive (Gtk.EntryIconPosition icon_pos, bool sensitive);
		public void set_icon_tooltip_markup (Gtk.EntryIconPosition icon_pos, string? tooltip);
		public void set_icon_tooltip_text (Gtk.EntryIconPosition icon_pos, string? tooltip);
		[Deprecated (since = "3.4")]
		public void set_inner_border (Gtk.Border border);
		public void set_input_hints (Gtk.InputHints hints);
		public void set_input_purpose (Gtk.InputPurpose purpose);
		public void set_invisible_char (unichar ch);
		public void set_max_length (int max);
		public void set_max_width_chars (int n_chars);
		public void set_overwrite_mode (bool overwrite);
		public void set_placeholder_text (string text);
		public void set_progress_fraction (double fraction);
		public void set_progress_pulse_step (double fraction);
		public void set_tabs (Pango.TabArray tabs);
		public void set_text (string text);
		public void set_visibility (bool visible);
		public void set_width_chars (int n_chars);
		public int text_index_to_layout_index (int text_index);
		public void unset_invisible_char ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Entry.with_buffer (Gtk.EntryBuffer buffer);
		public bool activates_default { get; set; }
		public Pango.AttrList attributes { get; set; }
		public Gtk.EntryBuffer buffer { get; set construct; }
		[NoAccessorMethod]
		public bool caps_lock_warning { get; set; }
		public Gtk.EntryCompletion completion { get; set; }
		[NoAccessorMethod]
		public int cursor_position { get; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		public bool has_frame { get; set; }
		[NoAccessorMethod]
		public string im_module { owned get; set; }
		[Deprecated (since = "3.4")]
		public Gtk.Border inner_border { get; set; }
		public Gtk.InputHints input_hints { get; set; }
		public Gtk.InputPurpose input_purpose { get; set; }
		public uint invisible_char { get; set; }
		[NoAccessorMethod]
		public bool invisible_char_set { get; set; }
		public int max_length { get; set; }
		public int max_width_chars { get; set; }
		public bool overwrite_mode { get; set; }
		public string placeholder_text { get; set; }
		[NoAccessorMethod]
		public bool populate_all { get; set; }
		[NoAccessorMethod]
		public bool primary_icon_activatable { get; set; }
		[NoAccessorMethod]
		public GLib.Icon primary_icon_gicon { owned get; set; }
		[NoAccessorMethod]
		public string primary_icon_name { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf primary_icon_pixbuf { owned get; set; }
		[NoAccessorMethod]
		public bool primary_icon_sensitive { get; set; }
		[NoAccessorMethod]
		public string primary_icon_stock { owned get; set; }
		[NoAccessorMethod]
		public Gtk.ImageType primary_icon_storage_type { get; }
		[NoAccessorMethod]
		public string primary_icon_tooltip_markup { owned get; set; }
		[NoAccessorMethod]
		public string primary_icon_tooltip_text { owned get; set; }
		public double progress_fraction { get; set; }
		public double progress_pulse_step { get; set; }
		[NoAccessorMethod]
		public int scroll_offset { get; }
		[NoAccessorMethod]
		public bool secondary_icon_activatable { get; set; }
		[NoAccessorMethod]
		public GLib.Icon secondary_icon_gicon { owned get; set; }
		[NoAccessorMethod]
		public string secondary_icon_name { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf secondary_icon_pixbuf { owned get; set; }
		[NoAccessorMethod]
		public bool secondary_icon_sensitive { get; set; }
		[NoAccessorMethod]
		public string secondary_icon_stock { owned get; set; }
		[NoAccessorMethod]
		public Gtk.ImageType secondary_icon_storage_type { get; }
		[NoAccessorMethod]
		public string secondary_icon_tooltip_markup { owned get; set; }
		[NoAccessorMethod]
		public string secondary_icon_tooltip_text { owned get; set; }
		[NoAccessorMethod]
		public int selection_bound { get; }
		[NoAccessorMethod]
		public Gtk.ShadowType shadow_type { get; set; }
		public Pango.TabArray tabs { get; set; }
		public string text { get; set; }
		public uint text_length { get; }
		[NoAccessorMethod]
		public bool truncate_multiline { get; set; }
		public bool visibility { get; set; }
		public int width_chars { get; set; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		public virtual signal void activate ();
		public virtual signal void backspace ();
		public virtual signal void copy_clipboard ();
		public virtual signal void cut_clipboard ();
		public virtual signal void delete_from_cursor (Gtk.DeleteType type, int count);
		public virtual signal void icon_press (Gtk.EntryIconPosition p0, Gdk.Event p1);
		public virtual signal void icon_release (Gtk.EntryIconPosition p0, Gdk.Event p1);
		public virtual signal void insert_at_cursor (string str);
		public virtual signal void move_cursor (Gtk.MovementStep step, int count, bool extend_selection);
		public virtual signal void paste_clipboard ();
		public virtual signal void populate_popup (Gtk.Menu popup);
		public virtual signal void preedit_changed (string p0);
		public virtual signal void toggle_overwrite ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_entry_accessible_get_type ()")]
	public class EntryAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.EditableText, Atk.Text, Atk.Action {
		[CCode (has_construct_function = false)]
		protected EntryAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_entry_buffer_get_type ()")]
	public class EntryBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		public EntryBuffer (uint8[] initial_chars);
		public virtual uint delete_text (uint position, int n_chars);
		public void emit_deleted_text (uint position, uint n_chars);
		public void emit_inserted_text (uint position, uint8[] chars);
		public size_t get_bytes ();
		public virtual uint get_length ();
		public int get_max_length ();
		public virtual unowned string get_text ();
		public virtual uint insert_text (uint position, uint8[] chars);
		public void set_max_length (int max_length);
		public void set_text (uint8[] chars);
		public uint length { get; }
		public int max_length { get; set; }
		public string text { get; set; }
		public virtual signal void deleted_text (uint position, uint n_chars);
		public virtual signal void inserted_text (uint position, string chars, uint n_chars);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_entry_completion_get_type ()")]
	public class EntryCompletion : GLib.Object, Gtk.CellLayout, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public EntryCompletion ();
		public void complete ();
		public string compute_prefix (string key);
		public void delete_action (int index_);
		public unowned string get_completion_prefix ();
		public unowned Gtk.Widget get_entry ();
		public bool get_inline_completion ();
		public bool get_inline_selection ();
		public int get_minimum_key_length ();
		public unowned Gtk.TreeModel get_model ();
		public bool get_popup_completion ();
		public bool get_popup_set_width ();
		public bool get_popup_single_match ();
		public int get_text_column ();
		public void insert_action_markup (int index_, string markup);
		public void insert_action_text (int index_, string text);
		public void set_inline_completion (bool inline_completion);
		public void set_inline_selection (bool inline_selection);
		public void set_match_func (owned Gtk.EntryCompletionMatchFunc func);
		public void set_minimum_key_length (int length);
		public void set_model (Gtk.TreeModel? model);
		public void set_popup_completion (bool popup_completion);
		public void set_popup_set_width (bool popup_set_width);
		public void set_popup_single_match (bool popup_single_match);
		public void set_text_column (int column);
		[CCode (has_construct_function = false)]
		public EntryCompletion.with_area (Gtk.CellArea area);
		[NoAccessorMethod]
		public Gtk.CellArea cell_area { owned get; construct; }
		public bool inline_completion { get; set; }
		public bool inline_selection { get; set; }
		public int minimum_key_length { get; set; }
		public Gtk.TreeModel model { get; set; }
		public bool popup_completion { get; set; }
		public bool popup_set_width { get; set; }
		public bool popup_single_match { get; set; }
		public int text_column { get; set; }
		public virtual signal void action_activated (int index_);
		public virtual signal bool cursor_on_match (Gtk.TreeModel model, Gtk.TreeIter iter);
		[HasEmitter]
		public virtual signal bool insert_prefix (string prefix);
		public virtual signal bool match_selected (Gtk.TreeModel model, Gtk.TreeIter iter);
		public virtual signal void no_matches ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_entry_icon_accessible_get_type ()")]
	public class EntryIconAccessible : Atk.Object, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected EntryIconAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_event_box_get_type ()")]
	public class EventBox : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EventBox ();
		public bool get_above_child ();
		public bool get_visible_window ();
		public void set_above_child (bool above_child);
		public void set_visible_window (bool visible_window);
		public bool above_child { get; set; }
		public bool visible_window { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_event_controller_get_type ()")]
	public abstract class EventController : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EventController ();
		public Gtk.PropagationPhase get_propagation_phase ();
		public unowned Gtk.Widget get_widget ();
		public bool handle_event (Gdk.Event event);
		public void reset ();
		public void set_propagation_phase (Gtk.PropagationPhase phase);
		public Gtk.PropagationPhase propagation_phase { get; set; }
		public Gtk.Widget widget { get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_expander_get_type ()")]
	public class Expander : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Expander (string label);
		public bool get_expanded ();
		public unowned string get_label ();
		public bool get_label_fill ();
		public unowned Gtk.Widget get_label_widget ();
		public bool get_resize_toplevel ();
		public int get_spacing ();
		public bool get_use_markup ();
		public bool get_use_underline ();
		public void set_expanded (bool expanded);
		public void set_label (string label);
		public void set_label_fill (bool label_fill);
		public void set_label_widget (Gtk.Widget label_widget);
		public void set_resize_toplevel (bool resize_toplevel);
		public void set_spacing (int spacing);
		public void set_use_markup (bool use_markup);
		public void set_use_underline (bool use_underline);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Expander.with_mnemonic (string label);
		public bool expanded { get; set construct; }
		public string label { get; set construct; }
		public bool label_fill { get; set construct; }
		public Gtk.Widget label_widget { get; set; }
		public bool resize_toplevel { get; set; }
		public int spacing { get; set; }
		public bool use_markup { get; set construct; }
		public bool use_underline { get; set construct; }
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_expander_accessible_get_type ()")]
	public class ExpanderAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Action {
		[CCode (has_construct_function = false)]
		protected ExpanderAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_button_get_type ()")]
	public class FileChooserButton : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.FileChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FileChooserButton (string title, Gtk.FileChooserAction action);
		public bool get_focus_on_click ();
		public unowned string get_title ();
		public int get_width_chars ();
		public void set_focus_on_click (bool focus_on_click);
		public void set_title (string title);
		public void set_width_chars (int n_chars);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FileChooserButton.with_dialog (Gtk.Dialog dialog);
		public Gtk.FileChooser dialog { construct; }
		public bool focus_on_click { get; set; }
		public string title { get; set; }
		public int width_chars { get; set; }
		public virtual signal void file_set ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_dialog_get_type ()")]
	public class FileChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.FileChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FileChooserDialog (string? title, Gtk.Window? parent, Gtk.FileChooserAction action, ...);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_widget_get_type ()")]
	public class FileChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.FileChooser, Gtk.FileChooserEmbed {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FileChooserWidget (Gtk.FileChooserAction action);
		[NoAccessorMethod]
		public bool search_mode { get; set; }
		public virtual signal void desktop_folder ();
		public virtual signal void down_folder ();
		public virtual signal void home_folder ();
		public virtual signal void location_popup (string p0);
		public virtual signal void location_popup_on_paste ();
		public virtual signal void location_toggle_popup ();
		public virtual signal void quick_bookmark (int p0);
		public virtual signal void recent_shortcut ();
		public virtual signal void search_shortcut ();
		public virtual signal void show_hidden ();
		public virtual signal void up_folder ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_filter_get_type ()")]
	public class FileFilter : GLib.InitiallyUnowned, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public FileFilter ();
		public void add_custom (Gtk.FileFilterFlags needed, owned Gtk.FileFilterFunc func);
		public void add_mime_type (string mime_type);
		public void add_pattern (string pattern);
		public void add_pixbuf_formats ();
		public bool filter (Gtk.FileFilterInfo filter_info);
		[CCode (cname = "gtk_file_filter_get_name")]
		public unowned string get_filter_name ();
		public Gtk.FileFilterFlags get_needed ();
		[CCode (cname = "gtk_file_filter_set_name")]
		public void set_filter_name (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class FileFilterInfo {
		public Gtk.FileFilterFlags contains;
		public weak string display_name;
		public weak string filename;
		public weak string mime_type;
		public weak string uri;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_fixed_get_type ()")]
	public class Fixed : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Fixed ();
		public void move (Gtk.Widget widget, int x, int y);
		public void put (Gtk.Widget widget, int x, int y);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class FixedChild {
		public weak Gtk.Widget widget;
		public int x;
		public int y;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_flow_box_get_type ()")]
	public class FlowBox : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FlowBox ();
		public bool get_activate_on_single_click ();
		public unowned Gtk.FlowBoxChild get_child_at_index (int idx);
		public uint get_column_spacing ();
		public bool get_homogeneous ();
		public uint get_max_children_per_line ();
		public uint get_min_children_per_line ();
		public uint get_row_spacing ();
		public GLib.List<weak Gtk.FlowBoxChild> get_selected_children ();
		public Gtk.SelectionMode get_selection_mode ();
		public void insert (Gtk.Widget widget, int position);
		public void invalidate_filter ();
		public void invalidate_sort ();
		public void select_child (Gtk.FlowBoxChild child);
		public void selected_foreach (Gtk.FlowBoxForeachFunc func);
		public void set_activate_on_single_click (bool single);
		public void set_column_spacing (uint spacing);
		public void set_filter_func (owned Gtk.FlowBoxFilterFunc? filter_func);
		public void set_hadjustment (Gtk.Adjustment adjustment);
		public void set_homogeneous (bool homogeneous);
		public void set_max_children_per_line (uint n_children);
		public void set_min_children_per_line (uint n_children);
		public void set_row_spacing (uint spacing);
		public void set_selection_mode (Gtk.SelectionMode mode);
		public void set_sort_func (owned Gtk.FlowBoxSortFunc? sort_func);
		public void set_vadjustment (Gtk.Adjustment adjustment);
		public void unselect_child (Gtk.FlowBoxChild child);
		public bool activate_on_single_click { get; set; }
		public uint column_spacing { get; set; }
		public bool homogeneous { get; set; }
		public uint max_children_per_line { get; set; }
		public uint min_children_per_line { get; set; }
		public uint row_spacing { get; set; }
		public Gtk.SelectionMode selection_mode { get; set; }
		public virtual signal void activate_cursor_child ();
		public virtual signal void child_activated (Gtk.FlowBoxChild child);
		public virtual signal void move_cursor (Gtk.MovementStep step, int count);
		[HasEmitter]
		public virtual signal void select_all ();
		public virtual signal void selected_children_changed ();
		public virtual signal void toggle_cursor_child ();
		[HasEmitter]
		public virtual signal void unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_flow_box_accessible_get_type ()")]
	public class FlowBoxAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected FlowBoxAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_flow_box_child_get_type ()")]
	public class FlowBoxChild : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FlowBoxChild ();
		public void changed ();
		public int get_index ();
		public bool is_selected ();
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_flow_box_child_accessible_get_type ()")]
	public class FlowBoxChildAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected FlowBoxChildAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_button_get_type ()")]
	public class FontButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable, Gtk.FontChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FontButton ();
		public unowned string get_font_name ();
		public bool get_show_size ();
		public bool get_show_style ();
		public unowned string get_title ();
		public bool get_use_font ();
		public bool get_use_size ();
		public bool set_font_name (string fontname);
		public void set_show_size (bool show_size);
		public void set_show_style (bool show_style);
		public void set_title (string title);
		public void set_use_font (bool use_font);
		public void set_use_size (bool use_size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FontButton.with_font (string fontname);
		public string font_name { get; set; }
		public bool show_size { get; set; }
		public bool show_style { get; set; }
		public string title { get; set; }
		public bool use_font { get; set; }
		public bool use_size { get; set; }
		public virtual signal void font_set ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_chooser_dialog_get_type ()")]
	public class FontChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.FontChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FontChooserDialog (string? title, Gtk.Window? parent);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_chooser_widget_get_type ()")]
	public class FontChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.FontChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FontChooserWidget ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_selection_get_type ()")]
	public class FontSelection : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FontSelection ();
		public unowned Pango.FontFace get_face ();
		public unowned Gtk.Widget get_face_list ();
		public unowned Pango.FontFamily get_family ();
		public unowned Gtk.Widget get_family_list ();
		public string get_font_name ();
		public unowned Gtk.Widget get_preview_entry ();
		public unowned string get_preview_text ();
		public int get_size ();
		public unowned Gtk.Widget get_size_entry ();
		public unowned Gtk.Widget get_size_list ();
		public bool set_font_name (string fontname);
		public void set_preview_text (string text);
		public string font_name { owned get; set; }
		public string preview_text { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_selection_dialog_get_type ()")]
	[Deprecated (replacement = "FontChooserDialog", since = "3.2")]
	public class FontSelectionDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FontSelectionDialog (string title);
		public unowned Gtk.Widget get_cancel_button ();
		public string get_font_name ();
		public unowned Gtk.Widget get_font_selection ();
		public unowned Gtk.Widget get_ok_button ();
		public unowned string get_preview_text ();
		public bool set_font_name (string fontname);
		public void set_preview_text (string text);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_frame_get_type ()")]
	public class Frame : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Frame (string? label);
		[NoWrapper]
		public virtual void compute_child_allocation (Gtk.Allocation allocation);
		public unowned string get_label ();
		public void get_label_align (out float xalign, out float yalign);
		public unowned Gtk.Widget? get_label_widget ();
		public Gtk.ShadowType get_shadow_type ();
		public void set_label (string? label);
		public void set_label_align (float xalign, float yalign);
		public void set_label_widget (Gtk.Widget? label_widget);
		public void set_shadow_type (Gtk.ShadowType type);
		public string label { get; set; }
		public Gtk.Widget label_widget { get; set; }
		[NoAccessorMethod]
		public float label_xalign { get; set; }
		[NoAccessorMethod]
		public float label_yalign { get; set; }
		public Gtk.ShadowType shadow_type { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_frame_accessible_get_type ()")]
	public class FrameAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected FrameAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public class GLArea : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public GLArea ();
		public void attach_buffers ();
		public bool get_auto_render ();
		public unowned Gdk.GLContext get_context ();
		public unowned GLib.Error? get_error ();
		public bool get_has_alpha ();
		public bool get_has_depth_buffer ();
		public bool get_has_stencil_buffer ();
		public void get_required_version (out int major, out int minor);
		public void make_current ();
		public void queue_render ();
		public void set_auto_render (bool auto_render);
		public void set_error (GLib.Error? error);
		public void set_has_alpha (bool has_alpha);
		public void set_has_depth_buffer (bool has_depth_buffer);
		public void set_has_stencil_buffer (bool has_stencil_buffer);
		public void set_required_version (int major, int minor);
		public bool auto_render { get; set; }
		public Gdk.GLContext context { get; }
		public bool has_alpha { get; set; }
		public bool has_depth_buffer { get; set; }
		public bool has_stencil_buffer { get; set; }
		public virtual signal Gdk.GLContext create_context ();
		public virtual signal bool render (Gdk.GLContext context);
		public virtual signal void resize (int width, int height);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_get_type ()")]
	public abstract class Gesture : Gtk.EventController {
		[CCode (has_construct_function = false)]
		protected Gesture ();
		public bool get_bounding_box (out Gdk.Rectangle rect);
		public bool get_bounding_box_center (out double x, out double y);
		public unowned Gdk.Device? get_device ();
		public GLib.List<weak Gtk.Gesture> get_group ();
		public unowned Gdk.Event get_last_event (Gdk.EventSequence sequence);
		public unowned Gdk.EventSequence get_last_updated_sequence ();
		public bool get_point (Gdk.EventSequence? sequence, out double? x = null, out double? y = null);
		public Gtk.EventSequenceState get_sequence_state (Gdk.EventSequence sequence);
		public GLib.List<weak Gdk.EventSequence> get_sequences ();
		public unowned Gdk.Window? get_window ();
		public void group (Gtk.Gesture gesture);
		public bool handles_sequence (Gdk.EventSequence sequence);
		public bool is_active ();
		public bool is_grouped_with (Gtk.Gesture other);
		public bool is_recognized ();
		public bool set_sequence_state (Gdk.EventSequence sequence, Gtk.EventSequenceState state);
		public bool set_state (Gtk.EventSequenceState state);
		public void set_window (Gdk.Window? window);
		public void ungroup ();
		[NoAccessorMethod]
		public uint n_points { get; construct; }
		public Gdk.Window window { get; set; }
		public virtual signal void begin (Gdk.EventSequence p0);
		public virtual signal void cancel (Gdk.EventSequence p0);
		public virtual signal void end (Gdk.EventSequence p0);
		public virtual signal void sequence_state_changed (Gdk.EventSequence p0, Gtk.EventSequenceState p1);
		public virtual signal void update (Gdk.EventSequence p0);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_drag_get_type ()")]
	public class GestureDrag : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GestureDrag (Gtk.Widget widget);
		public bool get_offset (out double x, out double y);
		public bool get_start_point (out double x, out double y);
		public virtual signal void drag_begin (double p0, double p1);
		public virtual signal void drag_end (double p0, double p1);
		public virtual signal void drag_update (double p0, double p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_long_press_get_type ()")]
	public class GestureLongPress : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GestureLongPress (Gtk.Widget widget);
		[NoAccessorMethod]
		public double delay_factor { get; set; }
		public virtual signal void cancelled ();
		public virtual signal void pressed (double p0, double p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_multi_press_get_type ()")]
	public class GestureMultiPress : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GestureMultiPress (Gtk.Widget widget);
		public bool get_area (out Gdk.Rectangle rect);
		public void set_area (Gdk.Rectangle rect);
		public virtual signal void pressed (int p0, double p1, double p2);
		public virtual signal void released (int p0, double p1, double p2);
		public virtual signal void stopped ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_pan_get_type ()")]
	public class GesturePan : Gtk.GestureDrag {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GesturePan (Gtk.Widget widget, Gtk.Orientation orientation);
		public Gtk.Orientation get_orientation ();
		public void set_orientation (Gtk.Orientation orientation);
		public Gtk.Orientation orientation { get; set; }
		public virtual signal void pan (Gtk.PanDirection p0, double p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_rotate_get_type ()")]
	public class GestureRotate : Gtk.Gesture {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GestureRotate (Gtk.Widget widget);
		public double get_angle_delta ();
		public virtual signal void angle_changed (double p0, double p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_single_get_type ()")]
	public class GestureSingle : Gtk.Gesture {
		[CCode (has_construct_function = false)]
		protected GestureSingle ();
		public uint get_button ();
		public uint get_current_button ();
		public Gdk.EventSequence get_current_sequence ();
		public bool get_exclusive ();
		public bool get_touch_only ();
		public void set_button (uint button);
		public void set_exclusive (bool exclusive);
		public void set_touch_only (bool touch_only);
		public uint button { get; set; }
		public bool exclusive { get; set; }
		public bool touch_only { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_swipe_get_type ()")]
	public class GestureSwipe : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GestureSwipe (Gtk.Widget widget);
		public bool get_velocity (out double velocity_x, out double velocity_y);
		public virtual signal void swipe (double p0, double p1);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_zoom_get_type ()")]
	public class GestureZoom : Gtk.Gesture {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		public GestureZoom (Gtk.Widget widget);
		public double get_scale_delta ();
		public virtual signal void scale_changed (double p0);
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_gradient_ref", type_id = "gtk_gradient_get_type ()", unref_function = "gtk_gradient_unref")]
	[Compact]
	public class Gradient {
		public void add_color_stop (double offset, Gtk.SymbolicColor color);
		[CCode (has_construct_function = false)]
		public Gradient.linear (double x0, double y0, double x1, double y1);
		[CCode (has_construct_function = false)]
		public Gradient.radial (double x0, double y0, double radius0, double x1, double y1, double radius1);
		public bool resolve (Gtk.StyleProperties props, out Cairo.Pattern resolved_gradient);
		public Cairo.Pattern resolve_for_context (Gtk.StyleContext context);
		public string to_string ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_grid_get_type ()")]
	public class Grid : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Grid ();
		public void attach (Gtk.Widget child, int left, int top, int width = 1, int height = 1);
		public void attach_next_to (Gtk.Widget child, Gtk.Widget? sibling, Gtk.PositionType side, int width = 1, int height = 1);
		public int get_baseline_row ();
		public unowned Gtk.Widget get_child_at (int left, int top);
		public bool get_column_homogeneous ();
		public uint get_column_spacing ();
		public Gtk.BaselinePosition get_row_baseline_position (int row);
		public bool get_row_homogeneous ();
		public uint get_row_spacing ();
		public void insert_column (int position);
		public void insert_next_to (Gtk.Widget sibling, Gtk.PositionType side);
		public void insert_row (int position);
		public void remove_column (int position);
		public void remove_row (int position);
		public void set_baseline_row (int row);
		public void set_column_homogeneous (bool homogeneous);
		public void set_column_spacing (uint spacing);
		public void set_row_baseline_position (int row, Gtk.BaselinePosition pos);
		public void set_row_homogeneous (bool homogeneous);
		public void set_row_spacing (uint spacing);
		public int baseline_row { get; set; }
		public bool column_homogeneous { get; set; }
		public int column_spacing { get; set; }
		public bool row_homogeneous { get; set; }
		public int row_spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hbox_get_type ()")]
	[Deprecated (replacement = "Grid", since = "3.2")]
	public class HBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HBox (bool homogeneous, int spacing);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hbutton_box_get_type ()")]
	public class HButtonBox : Gtk.ButtonBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HButtonBox ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hpaned_get_type ()")]
	[Deprecated (replacement = "Paned", since = "3.2")]
	public class HPaned : Gtk.Paned, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HPaned ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hsv_get_type ()")]
	public class HSV : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HSV ();
		public void get_color (out double h, out double s, out double v);
		public void get_metrics (out int size, out int ring_width);
		public bool is_adjusting ();
		public void set_color (double h, double s, double v);
		public void set_metrics (int size, int ring_width);
		public static void to_rgb (double h, double s, double v, out double r, out double g, out double b);
		public virtual signal void changed ();
		public virtual signal void move (Gtk.DirectionType type);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hscale_get_type ()")]
	[Deprecated (since = "3.2")]
	public class HScale : Gtk.Scale, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HScale (Gtk.Adjustment? adjustment);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HScale.with_range (double min, double max, double step);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hscrollbar_get_type ()")]
	[Deprecated (since = "3.2")]
	public class HScrollbar : Gtk.Scrollbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HScrollbar (Gtk.Adjustment? adjustment);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_hseparator_get_type ()")]
	[Deprecated (replacement = "Separator", since = "3.2")]
	public class HSeparator : Gtk.Separator, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HSeparator ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_handle_box_get_type ()")]
	[Deprecated (since = "3.4")]
	public class HandleBox : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HandleBox ();
		public bool get_child_detached ();
		public Gtk.PositionType get_handle_position ();
		public Gtk.ShadowType get_shadow_type ();
		public Gtk.PositionType get_snap_edge ();
		public void set_handle_position (Gtk.PositionType position);
		public void set_shadow_type (Gtk.ShadowType type);
		public void set_snap_edge (Gtk.PositionType edge);
		public bool child_detached { get; }
		public Gtk.PositionType handle_position { get; set; }
		public Gtk.ShadowType shadow_type { get; set; }
		public Gtk.PositionType snap_edge { get; set; }
		[NoAccessorMethod]
		public bool snap_edge_set { get; set; }
		public virtual signal void child_attached (Gtk.Widget child);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_header_bar_get_type ()")]
	public class HeaderBar : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HeaderBar ();
		public unowned Gtk.Widget get_custom_title ();
		public unowned string get_decoration_layout ();
		public bool get_has_subtitle ();
		public bool get_show_close_button ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void pack_end (Gtk.Widget child);
		public void pack_start (Gtk.Widget child);
		public void set_custom_title (Gtk.Widget title_widget);
		public void set_decoration_layout (string layout);
		public void set_has_subtitle (bool setting);
		public void set_show_close_button (bool setting);
		public void set_subtitle (string? subtitle);
		public void set_title (string title);
		public Gtk.Widget custom_title { get; set construct; }
		public string decoration_layout { get; set; }
		[NoAccessorMethod]
		public bool decoration_layout_set { get; set; }
		public bool has_subtitle { get; set; }
		public bool show_close_button { get; set; }
		[NoAccessorMethod]
		public int spacing { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtkimmodule.h", type_id = "gtk_im_context_get_type ()")]
	public abstract class IMContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected IMContext ();
		public virtual bool filter_keypress (Gdk.EventKey event);
		public virtual void focus_in ();
		public virtual void focus_out ();
		public virtual void get_preedit_string (out string str, out Pango.AttrList attrs, out int cursor_pos);
		public virtual bool get_surrounding (out string text, out int cursor_index);
		public virtual void reset ();
		public virtual void set_client_window (Gdk.Window window);
		public virtual void set_cursor_location (Gdk.Rectangle area);
		public virtual void set_surrounding (string text, int len, int cursor_index);
		public virtual void set_use_preedit (bool use_preedit);
		[NoAccessorMethod]
		public Gtk.InputHints input_hints { get; set; }
		[NoAccessorMethod]
		public Gtk.InputPurpose input_purpose { get; set; }
		public virtual signal void commit (string str);
		[HasEmitter]
		public virtual signal bool delete_surrounding (int offset, int n_chars);
		public virtual signal void preedit_changed ();
		public virtual signal void preedit_end ();
		public virtual signal void preedit_start ();
		public virtual signal bool retrieve_surrounding ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_im_context_simple_get_type ()")]
	public class IMContextSimple : Gtk.IMContext {
		[CCode (has_construct_function = false, type = "GtkIMContext*")]
		public IMContextSimple ();
		public void add_table ([CCode (array_length = false)] uint16[] data, int max_seq_len, int n_seqs);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_im_multicontext_get_type ()")]
	public class IMMulticontext : Gtk.IMContext {
		[CCode (has_construct_function = false, type = "GtkIMContext*")]
		public IMMulticontext ();
		public void append_menuitems (Gtk.MenuShell menushell);
		public unowned string get_context_id ();
		public void set_context_id (string context_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_icon_factory_get_type ()")]
	[Deprecated (replacement = "Gtk.IconTheme", since = "3.10")]
	public class IconFactory : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public IconFactory ();
		public void add (string stock_id, Gtk.IconSet icon_set);
		public void add_default ();
		public unowned Gtk.IconSet lookup (string stock_id);
		public static unowned Gtk.IconSet lookup_default (string stock_id);
		public void remove_default ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "gtk_icon_info_copy", free_function = "gtk_icon_info_free", type_id = "gtk_icon_info_get_type ()")]
	[Compact]
	public class IconInfo {
		[CCode (has_construct_function = false)]
		protected IconInfo ();
		public Gtk.IconInfo copy ();
		[CCode (has_construct_function = false)]
		public IconInfo.for_pixbuf (Gtk.IconTheme icon_theme, Gdk.Pixbuf pixbuf);
		public void free ();
		public bool get_attach_points (out Gdk.Point[] points);
		public int get_base_scale ();
		public int get_base_size ();
		public unowned Gdk.Pixbuf get_builtin_pixbuf ();
		public unowned string get_display_name ();
		public bool get_embedded_rect (out Gdk.Rectangle rectangle);
		public unowned string get_filename ();
		public bool is_symbolic ();
		public Gdk.Pixbuf load_icon () throws GLib.Error;
		public async Gdk.Pixbuf load_icon_async (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Cairo.Surface load_surface (Gdk.Window for_window) throws GLib.Error;
		public Gdk.Pixbuf load_symbolic (Gdk.RGBA fg, Gdk.RGBA? success_color = null, Gdk.RGBA? warning_color = null, Gdk.RGBA? error_color = null, out bool was_symbolic = null) throws GLib.Error;
		public async Gdk.Pixbuf load_symbolic_async (Gdk.RGBA fg, Gdk.RGBA? success_color = null, Gdk.RGBA? warning_color = null, Gdk.RGBA? error_color = null, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Gdk.Pixbuf load_symbolic_for_context (Gtk.StyleContext context, out bool was_symbolic = null) throws GLib.Error;
		public async Gdk.Pixbuf load_symbolic_for_context_async (Gtk.StyleContext context, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Deprecated (replacement = "load_symbolic_for_context", since = "3.0")]
		public Gdk.Pixbuf load_symbolic_for_style (Gtk.Style style, Gtk.StateType state, out bool was_symbolic = null) throws GLib.Error;
		public void set_raw_coordinates (bool raw_coordinates);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class IconInfoClass {
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_icon_set_ref", type_id = "gtk_icon_set_get_type ()", unref_function = "gtk_icon_set_unref")]
	[Compact]
	[Deprecated (replacement = "Gtk.IconTheme", since = "3.10")]
	public class IconSet {
		[CCode (has_construct_function = false)]
		public IconSet ();
		public void add_source (Gtk.IconSource source);
		public Gtk.IconSet copy ();
		[CCode (has_construct_function = false)]
		public IconSet.from_pixbuf (Gdk.Pixbuf pixbuf);
		public void get_sizes (out Gtk.IconSize[] sizes);
		[Deprecated (replacement = "set_render_icon_pixbuf", since = "3.0")]
		public Gdk.Pixbuf render_icon (Gtk.Style style, Gtk.TextDirection direction, Gtk.StateType state, Gtk.IconSize size, Gtk.Widget widget, string detail);
		[Deprecated (since = "3.10")]
		public Gdk.Pixbuf render_icon_pixbuf (Gtk.StyleContext context, Gtk.IconSize size);
		[Deprecated (since = "3.10")]
		public Cairo.Surface render_icon_surface (Gtk.StyleContext context, Gtk.IconSize size, int scale, Gdk.Window for_window);
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "gtk_icon_source_copy", type_id = "gtk_icon_source_get_type ()")]
	[Compact]
	[Deprecated (replacement = "Gtk.IconTheme", since = "3.10")]
	public class IconSource {
		[CCode (has_construct_function = false)]
		public IconSource ();
		public Gtk.IconSource copy ();
		public Gtk.TextDirection get_direction ();
		public bool get_direction_wildcarded ();
		public unowned string get_filename ();
		public unowned string get_icon_name ();
		public unowned Gdk.Pixbuf get_pixbuf ();
		public Gtk.IconSize get_size ();
		public bool get_size_wildcarded ();
		public Gtk.StateType get_state ();
		public bool get_state_wildcarded ();
		public void set_direction (Gtk.TextDirection direction);
		public void set_direction_wildcarded (bool setting);
		public void set_filename (string filename);
		public void set_icon_name (string icon_name);
		public void set_pixbuf (Gdk.Pixbuf pixbuf);
		public void set_size (Gtk.IconSize size);
		public void set_size_wildcarded (bool setting);
		public void set_state (Gtk.StateType state);
		public void set_state_wildcarded (bool setting);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_icon_theme_get_type ()")]
	public class IconTheme : GLib.Object {
		[CCode (has_construct_function = false)]
		public IconTheme ();
		public static void add_builtin_icon (string icon_name, int size, Gdk.Pixbuf pixbuf);
		public void add_resource_path (string path);
		public void append_search_path (string path);
		public Gtk.IconInfo? choose_icon ([CCode (array_length = false, array_null_terminated = true)] string[] icon_names, int size, Gtk.IconLookupFlags flags);
		public Gtk.IconInfo? choose_icon_for_scale (string[] icon_names, int size, int scale, Gtk.IconLookupFlags flags);
		public static GLib.Quark error_quark ();
		public static unowned Gtk.IconTheme get_default ();
		public string? get_example_icon_name ();
		public static unowned Gtk.IconTheme get_for_screen (Gdk.Screen screen);
		[CCode (array_length = false, array_null_terminated = true)]
		public int[] get_icon_sizes (string icon_name);
		public void get_search_path (out string[] path);
		public bool has_icon (string icon_name);
		public GLib.List<string> list_contexts ();
		public GLib.List<string> list_icons (string? context);
		public Gdk.Pixbuf? load_icon (string icon_name, int size, Gtk.IconLookupFlags flags) throws GLib.Error;
		public Gdk.Pixbuf? load_icon_for_scale (string icon_name, int size, int scale, Gtk.IconLookupFlags flags) throws GLib.Error;
		public Cairo.Surface? load_surface (string icon_name, int size, int scale, Gdk.Window for_window, Gtk.IconLookupFlags flags) throws GLib.Error;
		public Gtk.IconInfo? lookup_by_gicon (GLib.Icon icon, int size, Gtk.IconLookupFlags flags);
		public Gtk.IconInfo? lookup_by_gicon_for_scale (GLib.Icon icon, int size, int scale, Gtk.IconLookupFlags flags);
		public Gtk.IconInfo? lookup_icon (string icon_name, int size, Gtk.IconLookupFlags flags);
		public Gtk.IconInfo? lookup_icon_for_scale (string icon_name, int size, int scale, Gtk.IconLookupFlags flags);
		public void prepend_search_path (string path);
		public bool rescan_if_needed ();
		public void set_custom_theme (string theme_name);
		public void set_screen (Gdk.Screen screen);
		public void set_search_path (string[] path);
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_icon_view_get_type ()")]
	public class IconView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public IconView ();
		public void convert_widget_to_bin_window_coords (int wx, int wy, out int bx, out int by);
		public Cairo.Surface create_drag_icon (Gtk.TreePath path);
		public void enable_model_drag_dest (Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		public void enable_model_drag_source (Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		public bool get_activate_on_single_click ();
		public bool get_cell_rect (Gtk.TreePath path, Gtk.CellRenderer? cell, out Gdk.Rectangle rect);
		public int get_column_spacing ();
		public int get_columns ();
		public bool get_cursor (out Gtk.TreePath path, out unowned Gtk.CellRenderer cell);
		public bool get_dest_item_at_pos (int drag_x, int drag_y, out unowned Gtk.TreePath path, Gtk.IconViewDropPosition pos);
		public void get_drag_dest_item (out unowned Gtk.TreePath path, Gtk.IconViewDropPosition pos);
		public bool get_item_at_pos (int x, int y, out unowned Gtk.TreePath path, out unowned Gtk.CellRenderer cell);
		public int get_item_column (Gtk.TreePath path);
		public Gtk.Orientation get_item_orientation ();
		public int get_item_padding ();
		public int get_item_row (Gtk.TreePath path);
		public int get_item_width ();
		public int get_margin ();
		public int get_markup_column ();
		public unowned Gtk.TreeModel get_model ();
		public Gtk.TreePath get_path_at_pos (int x, int y);
		public int get_pixbuf_column ();
		public bool get_reorderable ();
		public int get_row_spacing ();
		public GLib.List<Gtk.TreePath> get_selected_items ();
		public Gtk.SelectionMode get_selection_mode ();
		public int get_spacing ();
		public int get_text_column ();
		public int get_tooltip_column ();
		public bool get_tooltip_context (out int x, out int y, bool keyboard_tip, out unowned Gtk.TreeModel model, out unowned Gtk.TreePath path, out Gtk.TreeIter iter);
		public bool get_visible_range (out Gtk.TreePath start_path, out Gtk.TreePath end_path);
		public bool path_is_selected (Gtk.TreePath path);
		public void scroll_to_path (Gtk.TreePath path, bool use_align, float row_align, float col_align);
		public void select_path (Gtk.TreePath path);
		public void selected_foreach (Gtk.IconViewForeachFunc func);
		public void set_activate_on_single_click (bool single);
		public void set_column_spacing (int column_spacing);
		public void set_columns (int columns);
		public void set_cursor (Gtk.TreePath path, Gtk.CellRenderer? cell, bool start_editing);
		public void set_drag_dest_item (Gtk.TreePath path, Gtk.IconViewDropPosition pos);
		public void set_item_orientation (Gtk.Orientation orientation);
		public void set_item_padding (int item_padding);
		public void set_item_width (int item_width);
		public void set_margin (int margin);
		public void set_markup_column (int column);
		public void set_model (Gtk.TreeModel? model);
		public void set_pixbuf_column (int column);
		public void set_reorderable (bool reorderable);
		public void set_row_spacing (int row_spacing);
		public void set_selection_mode (Gtk.SelectionMode mode);
		public void set_spacing (int spacing);
		public void set_text_column (int column);
		public void set_tooltip_cell (Gtk.Tooltip tooltip, Gtk.TreePath path, Gtk.CellRenderer cell);
		public void set_tooltip_column (int column);
		public void set_tooltip_item (Gtk.Tooltip tooltip, Gtk.TreePath path);
		public void unselect_path (Gtk.TreePath path);
		public void unset_model_drag_dest ();
		public void unset_model_drag_source ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public IconView.with_area (Gtk.CellArea area);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public IconView.with_model (Gtk.TreeModel model);
		public bool activate_on_single_click { get; set; }
		[NoAccessorMethod]
		public Gtk.CellArea cell_area { owned get; construct; }
		public int column_spacing { get; set; }
		public int columns { get; set; }
		public Gtk.Orientation item_orientation { get; set; }
		public int item_padding { get; set; }
		public int item_width { get; set; }
		public int margin { get; set; }
		public int markup_column { get; set; }
		public Gtk.TreeModel model { get; set; }
		public int pixbuf_column { get; set; }
		public bool reorderable { get; set; }
		public int row_spacing { get; set; }
		public Gtk.SelectionMode selection_mode { get; set; }
		public int spacing { get; set; }
		public int text_column { get; set; }
		public int tooltip_column { get; set; }
		public virtual signal bool activate_cursor_item ();
		[HasEmitter]
		public virtual signal void item_activated (Gtk.TreePath path);
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		public virtual signal void select_all ();
		public virtual signal void select_cursor_item ();
		public virtual signal void selection_changed ();
		public virtual signal void toggle_cursor_item ();
		public virtual signal void unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_icon_view_accessible_get_type ()")]
	public class IconViewAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected IconViewAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_image_get_type ()")]
	public class Image : Gtk.Misc, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image ();
		public void clear ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_animation (Gdk.PixbufAnimation animation);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_file (string filename);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_gicon (GLib.Icon icon, Gtk.IconSize size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_icon_name (string icon_name, Gtk.IconSize size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_icon_set (Gtk.IconSet icon_set, Gtk.IconSize size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_pixbuf (Gdk.Pixbuf pixbuf);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_resource (string resource_path);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_stock (string stock_id, Gtk.IconSize size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_surface (Cairo.Surface surface);
		public unowned Gdk.PixbufAnimation get_animation ();
		public void get_gicon (out unowned GLib.Icon gicon, Gtk.IconSize size);
		public void get_icon_name (out unowned string icon_name, out Gtk.IconSize size);
		public void get_icon_set (out unowned Gtk.IconSet icon_set, out Gtk.IconSize size);
		public unowned Gdk.Pixbuf get_pixbuf ();
		public int get_pixel_size ();
		public void get_stock (out string stock_id, out Gtk.IconSize size);
		public Gtk.ImageType get_storage_type ();
		public void set_from_animation (Gdk.PixbufAnimation animation);
		public void set_from_file (string filename);
		public void set_from_gicon (GLib.Icon icon, Gtk.IconSize size);
		public void set_from_icon_name (string icon_name, Gtk.IconSize size);
		public void set_from_icon_set (Gtk.IconSet icon_set, Gtk.IconSize size);
		public void set_from_pixbuf (Gdk.Pixbuf pixbuf);
		public void set_from_resource (string resource_path);
		public void set_from_stock (string stock_id, Gtk.IconSize size);
		public void set_from_surface (Cairo.Surface surface);
		public void set_pixel_size (int pixel_size);
		[NoAccessorMethod]
		public string file { owned get; set; }
		[NoAccessorMethod]
		public GLib.Icon gicon { owned get; set; }
		[NoAccessorMethod]
		public string icon_name { owned get; set; }
		[NoAccessorMethod]
		public Gtk.IconSet icon_set { owned get; set; }
		[NoAccessorMethod]
		public int icon_size { get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf { owned get; set; }
		[NoAccessorMethod]
		public Gdk.PixbufAnimation pixbuf_animation { owned get; set; }
		public int pixel_size { get; set; }
		[NoAccessorMethod]
		public string resource { owned get; set; }
		[NoAccessorMethod]
		public string stock { owned get; set; }
		public Gtk.ImageType storage_type { get; }
		[NoAccessorMethod]
		public Cairo.Surface surface { owned get; set; }
		[NoAccessorMethod]
		public bool use_fallback { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_image_accessible_get_type ()")]
	public class ImageAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ImageAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_image_cell_accessible_get_type ()")]
	public class ImageCellAccessible : Gtk.RendererCellAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ImageCellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_image_menu_item_get_type ()")]
	public class ImageMenuItem : Gtk.MenuItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ImageMenuItem ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ImageMenuItem.from_stock (string stock_id, Gtk.AccelGroup? accel_group);
		public bool get_always_show_image ();
		public unowned Gtk.Widget get_image ();
		public bool get_use_stock ();
		public void set_accel_group (Gtk.AccelGroup accel_group);
		public void set_always_show_image (bool always_show);
		public void set_image (Gtk.Widget image);
		public void set_use_stock (bool use_stock);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ImageMenuItem.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ImageMenuItem.with_mnemonic (string label);
		public Gtk.AccelGroup accel_group { set; }
		public bool always_show_image { get; set construct; }
		public Gtk.Widget image { get; set; }
		public bool use_stock { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_info_bar_get_type ()")]
	public class InfoBar : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public InfoBar ();
		public void add_action_widget (Gtk.Widget child, int response_id);
		public unowned Gtk.Button add_button (string button_text, int response_id);
		public void add_buttons (...);
		public unowned Gtk.Widget get_action_area ();
		public unowned Gtk.Container get_content_area ();
		public Gtk.MessageType get_message_type ();
		public bool get_show_close_button ();
		public void set_default_response (int response_id);
		public void set_message_type (Gtk.MessageType message_type);
		public void set_response_sensitive (int response_id, bool setting);
		public void set_show_close_button (bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public InfoBar.with_buttons (...);
		public Gtk.MessageType message_type { get; set construct; }
		public bool show_close_button { get; set construct; }
		public virtual signal void close ();
		[HasEmitter]
		public virtual signal void response (int response_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_invisible_get_type ()")]
	public class Invisible : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Invisible ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Invisible.for_screen (Gdk.Screen screen);
		public unowned Gdk.Screen get_screen ();
		public void set_screen (Gdk.Screen screen);
		public Gdk.Screen screen { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_label_get_type ()")]
	public class Label : Gtk.Misc, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Label (string? str);
		public double get_angle ();
		public unowned Pango.AttrList get_attributes ();
		public unowned string get_current_uri ();
		public Pango.EllipsizeMode get_ellipsize ();
		public Gtk.Justification get_justify ();
		public unowned string get_label ();
		public unowned Pango.Layout get_layout ();
		public void get_layout_offsets (out int x, out int y);
		public bool get_line_wrap ();
		public Pango.WrapMode get_line_wrap_mode ();
		public int get_lines ();
		public int get_max_width_chars ();
		public uint get_mnemonic_keyval ();
		public unowned Gtk.Widget get_mnemonic_widget ();
		public bool get_selectable ();
		public bool get_selection_bounds (out int start, out int end);
		public bool get_single_line_mode ();
		public unowned string get_text ();
		public bool get_track_visited_links ();
		public bool get_use_markup ();
		public bool get_use_underline ();
		public int get_width_chars ();
		public float get_xalign ();
		public float get_yalign ();
		public void select_region (int start_offset, int end_offset);
		public void set_angle (double angle);
		public void set_attributes (Pango.AttrList attrs);
		public void set_ellipsize (Pango.EllipsizeMode mode);
		public void set_justify (Gtk.Justification jtype);
		public void set_label (string str);
		public void set_line_wrap (bool wrap);
		public void set_line_wrap_mode (Pango.WrapMode wrap_mode);
		public void set_lines (int lines);
		public void set_markup (string str);
		public void set_markup_with_mnemonic (string str);
		public void set_max_width_chars (int n_chars);
		public void set_mnemonic_widget (Gtk.Widget widget);
		public void set_pattern (string pattern);
		public void set_selectable (bool setting);
		public void set_single_line_mode (bool single_line_mode);
		public void set_text (string str);
		public void set_text_with_mnemonic (string str);
		public void set_track_visited_links (bool track_links);
		public void set_use_markup (bool setting);
		public void set_use_underline (bool setting);
		public void set_width_chars (int n_chars);
		public void set_xalign (float xalign);
		public void set_yalign (float yalign);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Label.with_mnemonic (string str);
		public double angle { get; set; }
		public Pango.AttrList attributes { get; set; }
		[NoAccessorMethod]
		public int cursor_position { get; }
		public Pango.EllipsizeMode ellipsize { get; set; }
		public Gtk.Justification justify { get; set; }
		public string label { get; set; }
		public int lines { get; set; }
		public int max_width_chars { get; set; }
		public uint mnemonic_keyval { get; }
		public Gtk.Widget mnemonic_widget { get; set; }
		public string pattern { set; }
		public bool selectable { get; set; }
		[NoAccessorMethod]
		public int selection_bound { get; }
		public bool single_line_mode { get; set; }
		public bool track_visited_links { get; set; }
		public bool use_markup { get; set; }
		public bool use_underline { get; set; }
		public int width_chars { get; set; }
		[NoAccessorMethod]
		public bool wrap { get; set; }
		[NoAccessorMethod]
		public Pango.WrapMode wrap_mode { get; set; }
		public float xalign { get; set; }
		public float yalign { get; set; }
		public virtual signal void activate_current_link ();
		public virtual signal bool activate_link (string uri);
		public virtual signal void copy_clipboard ();
		public virtual signal void move_cursor (Gtk.MovementStep step, int count, bool extend_selection);
		public virtual signal void populate_popup (Gtk.Menu menu);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_label_accessible_get_type ()")]
	public class LabelAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Text, Atk.Hypertext {
		[CCode (has_construct_function = false)]
		protected LabelAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class LabelSelectionInfo {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_layout_get_type ()")]
	public class Layout : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Layout (Gtk.Adjustment? hadjustment = null, Gtk.Adjustment? vadjustment = null);
		public unowned Gdk.Window get_bin_window ();
		public unowned Gtk.Adjustment get_hadjustment ();
		public void get_size (out uint width, out uint height);
		public unowned Gtk.Adjustment get_vadjustment ();
		public void move (Gtk.Widget child_widget, int x, int y);
		public void put (Gtk.Widget child_widget, int x, int y);
		public void set_hadjustment (Gtk.Adjustment adjustment);
		public void set_size (uint width, uint height);
		public void set_vadjustment (Gtk.Adjustment adjustment);
		[NoAccessorMethod]
		public uint height { get; set; }
		[NoAccessorMethod]
		public uint width { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_level_bar_get_type ()")]
	public class LevelBar : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LevelBar ();
		public void add_offset_value (string name, double value);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LevelBar.for_interval (double min_value, double max_value);
		public bool get_inverted ();
		public double get_max_value ();
		public double get_min_value ();
		public Gtk.LevelBarMode get_mode ();
		public bool get_offset_value (string name, double value);
		public double get_value ();
		public void remove_offset_value (string name);
		public void set_inverted (bool inverted);
		public void set_max_value (double value);
		public void set_min_value (double value);
		public void set_mode (Gtk.LevelBarMode mode);
		public void set_value (double value);
		public bool inverted { get; set; }
		public double max_value { get; set; }
		public double min_value { get; set; }
		public Gtk.LevelBarMode mode { get; set; }
		public double value { get; set; }
		public virtual signal void offset_changed (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_level_bar_accessible_get_type ()")]
	public class LevelBarAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected LevelBarAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_link_button_get_type ()")]
	public class LinkButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LinkButton (string uri);
		public unowned string get_uri ();
		public bool get_visited ();
		public void set_uri (string uri);
		public void set_visited (bool visited);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LinkButton.with_label (string uri, string label);
		public string uri { get; set; }
		public bool visited { get; set; }
		public virtual signal bool activate_link ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_link_button_accessible_get_type ()")]
	public class LinkButtonAccessible : Gtk.ButtonAccessible, Atk.Component, Atk.Action, Atk.Image, Atk.HyperlinkImpl {
		[CCode (has_construct_function = false)]
		protected LinkButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_list_box_get_type ()")]
	public class ListBox : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ListBox ();
		public void bind_model (GLib.ListModel? model, owned Gtk.ListBoxCreateWidgetFunc create_widget_func);
		public void drag_highlight_row (Gtk.ListBoxRow row);
		public void drag_unhighlight_row ();
		public bool get_activate_on_single_click ();
		public unowned Gtk.Adjustment get_adjustment ();
		public unowned Gtk.ListBoxRow get_row_at_index (int index_);
		public unowned Gtk.ListBoxRow get_row_at_y (int y);
		public unowned Gtk.ListBoxRow get_selected_row ();
		public GLib.List<weak Gtk.ListBoxRow> get_selected_rows ();
		public Gtk.SelectionMode get_selection_mode ();
		public void insert (Gtk.Widget child, int position);
		public void invalidate_filter ();
		public void invalidate_headers ();
		public void invalidate_sort ();
		public void prepend (Gtk.Widget child);
		public void select_row (Gtk.ListBoxRow? row);
		public void selected_foreach (Gtk.ListBoxForeachFunc func);
		public void set_activate_on_single_click (bool single);
		public void set_adjustment (Gtk.Adjustment? adjustment);
		public void set_filter_func (owned Gtk.ListBoxFilterFunc? filter_func);
		public void set_header_func (owned Gtk.ListBoxUpdateHeaderFunc? update_header);
		public void set_placeholder (Gtk.Widget? placeholder);
		public void set_selection_mode (Gtk.SelectionMode mode);
		public void set_sort_func (owned Gtk.ListBoxSortFunc? sort_func);
		public void unselect_row (Gtk.ListBoxRow row);
		public bool activate_on_single_click { get; set; }
		public Gtk.SelectionMode selection_mode { get; set; }
		public virtual signal void activate_cursor_row ();
		public virtual signal void move_cursor (Gtk.MovementStep step, int count);
		public virtual signal void row_activated (Gtk.ListBoxRow row);
		public virtual signal void row_selected (Gtk.ListBoxRow? row);
		[HasEmitter]
		public virtual signal void select_all ();
		public virtual signal void selected_rows_changed ();
		public virtual signal void toggle_cursor_row ();
		[HasEmitter]
		public virtual signal void unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_list_box_accessible_get_type ()")]
	public class ListBoxAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected ListBoxAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_list_box_row_get_type ()")]
	public class ListBoxRow : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ListBoxRow ();
		public void changed ();
		public bool get_activatable ();
		public unowned Gtk.Widget get_header ();
		public int get_index ();
		public bool get_selectable ();
		public bool is_selected ();
		public void set_activatable (bool activatable);
		public void set_header (Gtk.Widget? header);
		public void set_selectable (bool selectable);
		public bool activatable { get; set; }
		public bool selectable { get; set; }
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_list_box_row_accessible_get_type ()")]
	public class ListBoxRowAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ListBoxRowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_list_store_get_type ()")]
	public class ListStore : GLib.Object, Gtk.TreeModel, Gtk.TreeDragSource, Gtk.TreeDragDest, Gtk.TreeSortable, Gtk.Buildable {
		[CCode (has_construct_function = false, sentinel = "-1")]
		public ListStore (int n_columns, ...);
		public void append (out Gtk.TreeIter iter);
		public void clear ();
		public void insert (out Gtk.TreeIter iter, int position);
		public void insert_after (out Gtk.TreeIter iter, Gtk.TreeIter? sibling);
		public void insert_before (out Gtk.TreeIter iter, Gtk.TreeIter? sibling);
		[CCode (sentinel = "-1")]
		public void insert_with_values (out Gtk.TreeIter iter, int position, ...);
		public void insert_with_valuesv (out Gtk.TreeIter iter, int position, [CCode (array_length_pos = 4.1)] int[] columns, [CCode (array_length_pos = 4.1)] GLib.Value[] values);
		public bool iter_is_valid (Gtk.TreeIter iter);
		public void move_after (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		public void move_before (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		[CCode (cname = "gtk_list_store_newv", has_construct_function = false)]
		public ListStore.newv ([CCode (array_length_pos = 0.9)] GLib.Type[] types);
		public void prepend (out Gtk.TreeIter iter);
		public bool remove (Gtk.TreeIter iter);
		public void reorder ([CCode (array_length = false, array_null_terminated = true)] int[] new_order);
		[CCode (sentinel = "-1")]
		public void @set (Gtk.TreeIter iter, ...);
		public void set_column_types ([CCode (array_length_pos = 0.9)] GLib.Type[] types);
		public void set_valist (Gtk.TreeIter iter, va_list var_args);
		public void set_value (Gtk.TreeIter iter, int column, GLib.Value value);
		public void set_valuesv (Gtk.TreeIter iter, [CCode (array_length_pos = 3.1)] int[] columns, [CCode (array_length_pos = 3.1)] GLib.Value[] values);
		public void swap (Gtk.TreeIter a, Gtk.TreeIter b);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_lock_button_get_type ()")]
	public class LockButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LockButton (GLib.Permission permission);
		public unowned GLib.Permission get_permission ();
		public void set_permission (GLib.Permission permission);
		public GLib.Permission permission { get; set; }
		[NoAccessorMethod]
		public string text_lock { owned get; set construct; }
		[NoAccessorMethod]
		public string text_unlock { owned get; set construct; }
		[NoAccessorMethod]
		public string tooltip_lock { owned get; set construct; }
		[NoAccessorMethod]
		public string tooltip_not_authorized { owned get; set construct; }
		[NoAccessorMethod]
		public string tooltip_unlock { owned get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_lock_button_accessible_get_type ()")]
	public class LockButtonAccessible : Gtk.ButtonAccessible, Atk.Component, Atk.Action, Atk.Image {
		[CCode (has_construct_function = false)]
		protected LockButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_get_type ()")]
	public class Menu : Gtk.MenuShell, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Menu ();
		public void attach (Gtk.Widget child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach);
		public void attach_to_widget (Gtk.Widget attach_widget, Gtk.MenuDetachFunc? detacher);
		public void detach ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Menu.from_model (GLib.MenuModel model);
		public unowned Gtk.AccelGroup get_accel_group ();
		public unowned string get_accel_path ();
		public unowned Gtk.Widget get_active ();
		public unowned Gtk.Widget get_attach_widget ();
		public static unowned GLib.List<Gtk.Menu> get_for_attach_widget (Gtk.Widget widget);
		public int get_monitor ();
		public bool get_reserve_toggle_size ();
		public bool get_tearoff_state ();
		public unowned string get_title ();
		public void popdown ();
		public void popup (Gtk.Widget? parent_menu_shell, Gtk.Widget? parent_menu_item, Gtk.MenuPositionFunc? func, uint button, uint32 activate_time);
		public void popup_for_device (Gdk.Device device, Gtk.Widget parent_menu_shell, Gtk.Widget parent_menu_item, Gtk.MenuPositionFunc func, void* data, GLib.DestroyNotify destroy, uint button, uint32 activate_time);
		public void reorder_child (Gtk.Widget child, int position);
		public void reposition ();
		public void set_accel_group (Gtk.AccelGroup accel_group);
		public void set_accel_path (string accel_path);
		public void set_active (uint index);
		public void set_monitor (int monitor_num);
		public void set_reserve_toggle_size (bool reserve_toggle_size);
		public void set_screen (Gdk.Screen? screen);
		public void set_tearoff_state (bool torn_off);
		public void set_title (string title);
		public Gtk.AccelGroup accel_group { get; set; }
		public string accel_path { get; set; }
		public int active { get; set; }
		[NoAccessorMethod]
		public Gtk.Widget attach_widget { owned get; set; }
		public int monitor { get; set; }
		public bool reserve_toggle_size { get; set; }
		public bool tearoff_state { get; set; }
		[NoAccessorMethod]
		public string tearoff_title { owned get; set; }
		public virtual signal void move_scroll (Gtk.ScrollType p0);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_accessible_get_type ()")]
	public class MenuAccessible : Gtk.MenuShellAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected MenuAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_bar_get_type ()")]
	public class MenuBar : Gtk.MenuShell, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuBar ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuBar.from_model (GLib.MenuModel model);
		public Gtk.PackDirection get_child_pack_direction ();
		public Gtk.PackDirection get_pack_direction ();
		public void set_child_pack_direction (Gtk.PackDirection child_pack_dir);
		public void set_pack_direction (Gtk.PackDirection pack_dir);
		public Gtk.PackDirection child_pack_direction { get; set; }
		public Gtk.PackDirection pack_direction { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_button_get_type ()")]
	public class MenuButton : Gtk.ToggleButton, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuButton ();
		public unowned Gtk.Widget get_align_widget ();
		public Gtk.ArrowType get_direction ();
		public unowned GLib.MenuModel get_menu_model ();
		public unowned Gtk.Popover get_popover ();
		public unowned Gtk.Menu get_popup ();
		public bool get_use_popover ();
		public void set_align_widget (Gtk.Widget align_widget);
		public void set_direction (Gtk.ArrowType direction);
		public void set_menu_model (GLib.MenuModel menu_model);
		public void set_popover (Gtk.Widget popover);
		public void set_popup (Gtk.Widget menu);
		public void set_use_popover (bool use_popover);
		public Gtk.Container align_widget { get; set; }
		public Gtk.ArrowType direction { get; set; }
		public GLib.MenuModel menu_model { get; set; }
		public Gtk.Popover popover { get; set; }
		public Gtk.Menu popup { get; set; }
		public bool use_popover { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_button_accessible_get_type ()")]
	public class MenuButtonAccessible : Gtk.ToggleButtonAccessible, Atk.Component, Atk.Action, Atk.Image {
		[CCode (has_construct_function = false)]
		protected MenuButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_item_get_type ()")]
	public class MenuItem : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuItem ();
		public unowned string get_accel_path ();
		public virtual unowned string get_label ();
		public bool get_reserve_indicator ();
		[Deprecated (replacement = "Widget.get_hexpand and Widget.get_halign", since = "3.2")]
		public bool get_right_justified ();
		public unowned Gtk.Widget get_submenu ();
		public bool get_use_underline ();
		public void set_accel_path (string accel_path);
		public virtual void set_label (string label);
		public void set_reserve_indicator (bool reserve);
		[Deprecated (replacement = "Widget.set_hexpand and Widget.set_halign", since = "3.2")]
		public void set_right_justified (bool right_justified);
		public void set_submenu (Gtk.Widget submenu);
		public void set_use_underline (bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuItem.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuItem.with_mnemonic (string label);
		public string accel_path { get; set; }
		public string label { get; set; }
		public bool right_justified { get; set; }
		public Gtk.Menu submenu { get; set; }
		public bool use_underline { get; set; }
		[HasEmitter]
		public virtual signal void activate ();
		public virtual signal void activate_item ();
		public virtual signal void deselect ();
		public virtual signal void select ();
		[HasEmitter]
		public virtual signal void toggle_size_allocate (int allocation);
		[HasEmitter]
		public virtual signal void toggle_size_request (void* requisition);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_item_accessible_get_type ()")]
	public class MenuItemAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Action, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected MenuItemAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_shell_get_type ()")]
	public abstract class MenuShell : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected MenuShell ();
		public void activate_item (Gtk.Widget menu_item, bool force_deactivate);
		public void append ([CCode (type = "GtkWidget*")] Gtk.MenuItem child);
		public void bind_model (GLib.MenuModel model, string action_namespace, bool with_separators);
		public void deselect ();
		public unowned Gtk.Widget get_parent_shell ();
		[NoWrapper]
		public virtual int get_popup_delay ();
		public unowned Gtk.Widget get_selected_item ();
		public bool get_take_focus ();
		public void prepend (Gtk.Widget child);
		public void select_first (bool search_sensitive);
		public virtual void select_item (Gtk.Widget menu_item);
		public void set_take_focus (bool take_focus);
		public bool take_focus { get; set; }
		public virtual signal void activate_current (bool force_hide);
		[HasEmitter]
		public virtual signal void cancel ();
		public virtual signal void cycle_focus (Gtk.DirectionType p0);
		[HasEmitter]
		public virtual signal void deactivate ();
		[HasEmitter]
		public virtual signal void insert (Gtk.Widget child, int position);
		public virtual signal void move_current (Gtk.MenuDirectionType direction);
		public virtual signal bool move_selected (int distance);
		public virtual signal void selection_done ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_shell_accessible_get_type ()")]
	public class MenuShellAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected MenuShellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_tool_button_get_type ()")]
	public class MenuToolButton : Gtk.ToolButton, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public MenuToolButton (Gtk.Widget? icon_widget, string? label);
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public MenuToolButton.from_stock (string stock_id);
		public unowned Gtk.Widget get_menu ();
		public void set_arrow_tooltip_markup (string markup);
		public void set_arrow_tooltip_text (string text);
		public void set_menu (Gtk.Widget menu);
		public Gtk.Menu menu { get; set; }
		public virtual signal void show_menu ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_message_dialog_get_type ()")]
	public class MessageDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[PrintfFormat]
		public MessageDialog (Gtk.Window? parent, Gtk.DialogFlags flags, Gtk.MessageType type, Gtk.ButtonsType buttons, string message_format, ...);
		[PrintfFormat]
		public void format_secondary_markup (string message_format, ...);
		[PrintfFormat]
		public void format_secondary_text (string message_format, ...);
		public unowned Gtk.Widget get_image ();
		public unowned Gtk.Widget get_message_area ();
		public void set_image (Gtk.Widget image);
		public void set_markup (string str);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[PrintfFormat]
		public MessageDialog.with_markup (Gtk.Window? parent, Gtk.DialogFlags flags, Gtk.MessageType type, Gtk.ButtonsType buttons, string message_format, ...);
		[NoAccessorMethod]
		public Gtk.ButtonsType buttons { construct; }
		public Gtk.Widget image { get; set; }
		public Gtk.Widget message_area { get; }
		[NoAccessorMethod]
		public Gtk.MessageType message_type { get; set construct; }
		[NoAccessorMethod]
		public string secondary_text { owned get; set; }
		[NoAccessorMethod]
		public bool secondary_use_markup { get; set; }
		[NoAccessorMethod]
		public string text { owned get; set; }
		[NoAccessorMethod]
		public bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_misc_get_type ()")]
	public abstract class Misc : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Misc ();
		public void get_alignment (out float xalign, out float yalign);
		public void get_padding (out int xpad, out int ypad);
		public void set_alignment (float xalign, float yalign);
		public void set_padding (int xpad, int ypad);
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public int xpad { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
		[NoAccessorMethod]
		public int ypad { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public class ModelButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ModelButton ();
		[NoAccessorMethod]
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool centered { get; set; }
		[NoAccessorMethod]
		public GLib.Icon icon { owned get; set; }
		[NoAccessorMethod]
		public bool iconic { get; set; }
		[NoAccessorMethod]
		public bool inverted { get; set; }
		[NoAccessorMethod]
		public string menu_name { owned get; set; }
		[NoAccessorMethod]
		public Gtk.ButtonRole role { get; set; }
		[NoAccessorMethod]
		public string text { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_mount_operation_get_type ()")]
	public class MountOperation : GLib.MountOperation {
		[CCode (has_construct_function = false, type = "GMountOperation*")]
		public MountOperation (Gtk.Window? parent);
		public unowned Gtk.Window get_parent ();
		public unowned Gdk.Screen get_screen ();
		public void set_parent (Gtk.Window parent);
		public void set_screen (Gdk.Screen screen);
		[NoAccessorMethod]
		public bool is_showing { get; }
		public Gtk.Window parent { get; set; }
		public Gdk.Screen screen { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_notebook_get_type ()")]
	public class Notebook : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Notebook ();
		public int append_page (Gtk.Widget child, Gtk.Widget? tab_label = null);
		public int append_page_menu (Gtk.Widget child, Gtk.Widget? tab_label, Gtk.Widget? menu_label);
		public void detach_tab (Gtk.Widget child);
		public unowned Gtk.Widget get_action_widget (Gtk.PackType pack_type);
		public int get_current_page ();
		public unowned string get_group_name ();
		public unowned Gtk.Widget get_menu_label (Gtk.Widget child);
		public unowned string get_menu_label_text (Gtk.Widget child);
		public int get_n_pages ();
		public unowned Gtk.Widget get_nth_page (int page_num);
		public bool get_scrollable ();
		public bool get_show_border ();
		public bool get_show_tabs ();
		public bool get_tab_detachable (Gtk.Widget child);
		[Deprecated (since = "3.4")]
		public uint16 get_tab_hborder ();
		public unowned Gtk.Widget get_tab_label (Gtk.Widget child);
		public unowned string get_tab_label_text (Gtk.Widget child);
		public Gtk.PositionType get_tab_pos ();
		public bool get_tab_reorderable (Gtk.Widget child);
		[Deprecated (since = "3.4")]
		public uint16 get_tab_vborder ();
		public int insert_page (Gtk.Widget child, Gtk.Widget? tab_label, int position);
		[CCode (vfunc_name = "insert_page")]
		public virtual int insert_page_menu (Gtk.Widget child, Gtk.Widget? tab_label, Gtk.Widget? menu_label, int position);
		public void next_page ();
		public int page_num (Gtk.Widget child);
		public void popup_disable ();
		public void popup_enable ();
		public int prepend_page (Gtk.Widget child, Gtk.Widget? tab_label = null);
		public int prepend_page_menu (Gtk.Widget child, Gtk.Widget? tab_label, Gtk.Widget? menu_label);
		public void prev_page ();
		public void remove_page (int page_num);
		public void reorder_child (Gtk.Widget child, int position);
		public void set_action_widget (Gtk.Widget widget, Gtk.PackType pack_type);
		public void set_current_page (int page_num);
		public void set_group_name (string group_name);
		public void set_menu_label (Gtk.Widget child, Gtk.Widget? menu_label);
		public void set_menu_label_text (Gtk.Widget child, string menu_text);
		public void set_scrollable (bool scrollable);
		public void set_show_border (bool show_border);
		public void set_show_tabs (bool show_tabs);
		public void set_tab_detachable (Gtk.Widget child, bool detachable);
		public void set_tab_label (Gtk.Widget child, Gtk.Widget? tab_label);
		public void set_tab_label_text (Gtk.Widget child, string tab_text);
		public void set_tab_pos (Gtk.PositionType pos);
		public void set_tab_reorderable (Gtk.Widget child, bool reorderable);
		[NoAccessorMethod]
		public bool enable_popup { get; set; }
		public string group_name { get; set; }
		[NoAccessorMethod]
		public int page { get; set; }
		public bool scrollable { get; set; }
		public bool show_border { get; set; }
		public bool show_tabs { get; set; }
		public Gtk.PositionType tab_pos { get; set; }
		public virtual signal bool change_current_page (int offset);
		public virtual signal unowned Gtk.Notebook create_window (Gtk.Widget page, int x, int y);
		public virtual signal bool focus_tab (Gtk.NotebookTab type);
		public virtual signal void move_focus_out (Gtk.DirectionType direction);
		public virtual signal void page_added (Gtk.Widget child, uint page_num);
		public virtual signal void page_removed (Gtk.Widget child, uint page_num);
		public virtual signal void page_reordered (Gtk.Widget child, uint page_num);
		public virtual signal bool reorder_tab (Gtk.DirectionType direction, bool move_to_last);
		public virtual signal bool select_page (bool move_focus);
		public virtual signal void switch_page (Gtk.Widget page, uint page_num);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_notebook_accessible_get_type ()")]
	public class NotebookAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected NotebookAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_notebook_page_accessible_get_type ()")]
	public class NotebookPageAccessible : Atk.Object, Atk.Component {
		[CCode (has_construct_function = false, type = "AtkObject*")]
		public NotebookPageAccessible (Gtk.NotebookAccessible notebook, Gtk.Widget child);
		public void invalidate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_numerable_icon_get_type ()")]
	public class NumerableIcon : GLib.EmblemedIcon, GLib.Icon {
		[CCode (has_construct_function = false, type = "GIcon*")]
		public NumerableIcon (GLib.Icon base_icon);
		public unowned GLib.Icon get_background_gicon ();
		public unowned string get_background_icon_name ();
		public int get_count ();
		public unowned string get_label ();
		public unowned Gtk.StyleContext get_style_context ();
		public void set_background_gicon (GLib.Icon icon);
		public void set_background_icon_name (string icon_name);
		public void set_count (int count);
		public void set_label (string label);
		public void set_style_context (Gtk.StyleContext style);
		[CCode (has_construct_function = false, type = "GIcon*")]
		public NumerableIcon.with_style_context (GLib.Icon base_icon, Gtk.StyleContext context);
		[NoAccessorMethod]
		public GLib.Icon background_icon { owned get; set; }
		public string background_icon_name { get; set; }
		public int count { get; set; }
		public string label { get; set; }
		public Gtk.StyleContext style_context { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_offscreen_window_get_type ()")]
	public class OffscreenWindow : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public OffscreenWindow ();
		public Gdk.Pixbuf get_pixbuf ();
		public unowned Cairo.Surface get_surface ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_overlay_get_type ()")]
	public class Overlay : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Overlay ();
		public void add_overlay (Gtk.Widget widget);
		public virtual signal bool get_child_position (Gtk.Widget widget, out Gdk.Rectangle allocation);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_page_setup_get_type ()")]
	public class PageSetup : GLib.Object {
		[CCode (has_construct_function = false)]
		public PageSetup ();
		public Gtk.PageSetup copy ();
		[CCode (has_construct_function = false)]
		public PageSetup.from_file (string file_name) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public PageSetup.from_key_file (GLib.KeyFile key_file, string group_name) throws GLib.Error;
		public double get_bottom_margin (Gtk.Unit unit);
		public double get_left_margin (Gtk.Unit unit);
		public Gtk.PageOrientation get_orientation ();
		public double get_page_height (Gtk.Unit unit);
		public double get_page_width (Gtk.Unit unit);
		public double get_paper_height (Gtk.Unit unit);
		public unowned Gtk.PaperSize get_paper_size ();
		public double get_paper_width (Gtk.Unit unit);
		public double get_right_margin (Gtk.Unit unit);
		public double get_top_margin (Gtk.Unit unit);
		public bool load_file (string file_name) throws GLib.Error;
		public bool load_key_file (GLib.KeyFile key_file, string group_name) throws GLib.Error;
		public void set_bottom_margin (double margin, Gtk.Unit unit);
		public void set_left_margin (double margin, Gtk.Unit unit);
		public void set_orientation (Gtk.PageOrientation orientation);
		public void set_paper_size (Gtk.PaperSize size);
		public void set_paper_size_and_default_margins (Gtk.PaperSize size);
		public void set_right_margin (double margin, Gtk.Unit unit);
		public void set_top_margin (double margin, Gtk.Unit unit);
		public bool to_file (string file_name) throws GLib.Error;
		public void to_key_file (GLib.KeyFile key_file, string group_name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_paned_get_type ()")]
	public class Paned : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Paned (Gtk.Orientation orientation);
		public void add1 (Gtk.Widget child);
		public void add2 (Gtk.Widget child);
		public unowned Gtk.Widget get_child1 ();
		public unowned Gtk.Widget get_child2 ();
		public unowned Gdk.Window get_handle_window ();
		public int get_position ();
		public bool get_wide_handle ();
		public void pack1 (Gtk.Widget child, bool resize, bool shrink);
		public void pack2 (Gtk.Widget child, bool resize, bool shrink);
		public void set_position (int position);
		public void set_wide_handle (bool wide);
		[NoAccessorMethod]
		public int max_position { get; }
		[NoAccessorMethod]
		public int min_position { get; }
		public int position { get; set; }
		[NoAccessorMethod]
		public bool position_set { get; set; }
		public bool wide_handle { get; set; }
		public virtual signal bool accept_position ();
		public virtual signal bool cancel_position ();
		public virtual signal bool cycle_child_focus (bool reverse);
		public virtual signal bool cycle_handle_focus (bool reverse);
		public virtual signal bool move_handle (Gtk.ScrollType scroll);
		public virtual signal bool toggle_handle_focus ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_paned_accessible_get_type ()")]
	public class PanedAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected PanedAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "gtk_paper_size_copy", type_id = "gtk_paper_size_get_type ()")]
	[Compact]
	public class PaperSize {
		[CCode (has_construct_function = false)]
		public PaperSize (string name);
		public Gtk.PaperSize copy ();
		[CCode (has_construct_function = false)]
		public PaperSize.custom (string name, string display_name, double width, double height, Gtk.Unit unit);
		[CCode (has_construct_function = false)]
		public PaperSize.from_ipp (string ipp_name, double width, double height);
		[CCode (has_construct_function = false)]
		public PaperSize.from_key_file (GLib.KeyFile key_file, string group_name) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public PaperSize.from_ppd (string ppd_name, string ppd_display_name, double width, double height);
		public static unowned string get_default ();
		public double get_default_bottom_margin (Gtk.Unit unit);
		public double get_default_left_margin (Gtk.Unit unit);
		public double get_default_right_margin (Gtk.Unit unit);
		public double get_default_top_margin (Gtk.Unit unit);
		public unowned string get_display_name ();
		public double get_height (Gtk.Unit unit);
		public unowned string get_name ();
		public static GLib.List<Gtk.PaperSize> get_paper_sizes (bool include_custom);
		public unowned string get_ppd_name ();
		public double get_width (Gtk.Unit unit);
		public bool is_custom ();
		public bool is_equal (Gtk.PaperSize size2);
		public bool is_ipp ();
		public void set_size (double width, double height, Gtk.Unit unit);
		public void to_key_file (GLib.KeyFile key_file, string group_name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_places_sidebar_get_type ()")]
	public class PlacesSidebar : Gtk.ScrolledWindow, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PlacesSidebar ();
		public void add_shortcut (GLib.File location);
		public bool get_local_only ();
		public GLib.File get_location ();
		public GLib.File get_nth_bookmark (int n);
		public Gtk.PlacesOpenFlags get_open_flags ();
		public bool get_show_connect_to_server ();
		public bool get_show_desktop ();
		public bool get_show_enter_location ();
		public GLib.SList<GLib.File> list_shortcuts ();
		public void remove_shortcut (GLib.File location);
		public void set_local_only (bool local_only);
		public void set_location (GLib.File location);
		public void set_open_flags (Gtk.PlacesOpenFlags flags);
		public void set_show_connect_to_server (bool show_connect_to_server);
		public void set_show_desktop (bool show_desktop);
		public void set_show_enter_location (bool show_enter_location);
		public bool local_only { get; set; }
		public GLib.File location { owned get; set; }
		public Gtk.PlacesOpenFlags open_flags { get; set; }
		public bool show_connect_to_server { get; set; }
		public bool show_desktop { get; set; }
		public bool show_enter_location { get; set; }
		public virtual signal int drag_action_ask (int p0);
		public virtual signal int drag_action_requested (Gdk.DragContext p0, GLib.File p1, GLib.List<GLib.File> p2);
		public virtual signal void drag_perform_drop (GLib.File p0, GLib.List<GLib.File> p1, int p2);
		public virtual signal void open_location (GLib.File p0, Gtk.PlacesOpenFlags p1);
		public virtual signal void populate_popup (Gtk.Menu p0, GLib.File? p1, GLib.Volume? p2);
		public virtual signal void show_error_message (string p0, string p1);
	}
	[CCode (cheader_filename = "gtk/gtkx.h", type_id = "gtk_plug_get_type ()")]
	public class Plug : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Plug (X.Window socket_id);
		public void @construct (X.Window socket_id);
		public void construct_for_display (Gdk.Display display, X.Window socket_id);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Plug.for_display (Gdk.Display display, X.Window socket_id);
		public bool get_embedded ();
		public X.Window get_id ();
		public unowned Gdk.Window get_socket_window ();
		public bool embedded { get; }
		public Gdk.Window socket_window { get; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_popover_get_type ()")]
	public class Popover : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Popover (Gtk.Widget relative_to);
		public void bind_model (GLib.MenuModel? model, string? action_namespace);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Popover.from_model (Gtk.Widget relative_to, GLib.MenuModel model);
		public bool get_modal ();
		public bool get_pointing_to (out Gdk.Rectangle rect);
		public Gtk.PositionType get_position ();
		public unowned Gtk.Widget get_relative_to ();
		public bool get_transitions_enabled ();
		public void set_modal (bool modal);
		public void set_pointing_to (Gdk.Rectangle rect);
		public void set_position (Gtk.PositionType position);
		public void set_relative_to (Gtk.Widget relative_to);
		public void set_transitions_enabled (bool transitions_enabled);
		public bool modal { get; set; }
		public Cairo.RectangleInt pointing_to { get; set; }
		public Gtk.PositionType position { get; set construct; }
		public Gtk.Widget relative_to { get; set; }
		public bool transitions_enabled { get; set; }
		public virtual signal void closed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_popover_accessible_get_type ()")]
	public class PopoverAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected PopoverAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public class PopoverMenu : Gtk.Popover, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PopoverMenu ();
		public void open_submenu (string name);
		[NoAccessorMethod]
		public string visible_submenu { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_context_get_type ()")]
	public class PrintContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected PrintContext ();
		public Pango.Context create_pango_context ();
		public Pango.Layout create_pango_layout ();
		public unowned Cairo.Context get_cairo_context ();
		public double get_dpi_x ();
		public double get_dpi_y ();
		public bool get_hard_margins (out double top, out double bottom, out double left, out double right);
		public double get_height ();
		public unowned Gtk.PageSetup get_page_setup ();
		public unowned Pango.FontMap get_pango_fontmap ();
		public double get_width ();
		public void set_cairo_context (Cairo.Context cr, double dpi_x, double dpi_y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_operation_get_type ()")]
	public class PrintOperation : GLib.Object, Gtk.PrintOperationPreview {
		[CCode (has_construct_function = false)]
		public PrintOperation ();
		public void cancel ();
		public void draw_page_finish ();
		public unowned Gtk.PageSetup get_default_page_setup ();
		public bool get_embed_page_setup ();
		public void get_error () throws GLib.Error;
		public bool get_has_selection ();
		public int get_n_pages_to_print ();
		public unowned Gtk.PrintSettings get_print_settings ();
		public Gtk.PrintStatus get_status ();
		public unowned string get_status_string ();
		public bool get_support_selection ();
		public bool is_finished ();
		public Gtk.PrintOperationResult run (Gtk.PrintOperationAction action, Gtk.Window parent) throws GLib.Error;
		public void set_allow_async (bool allow_async);
		public void set_current_page (int current_page);
		public void set_custom_tab_label (string label);
		public void set_default_page_setup (Gtk.PageSetup default_page_setup);
		public void set_defer_drawing ();
		public void set_embed_page_setup (bool embed);
		public void set_export_filename (string filename);
		public void set_has_selection (bool has_selection);
		public void set_job_name (string job_name);
		public void set_n_pages (int n_pages);
		public void set_print_settings (Gtk.PrintSettings print_settings);
		public void set_show_progress (bool show_progress);
		public void set_support_selection (bool support_selection);
		public void set_track_print_status (bool track_status);
		public void set_unit (Gtk.Unit unit);
		public void set_use_full_page (bool full_page);
		[NoAccessorMethod]
		public bool allow_async { get; set; }
		[NoAccessorMethod]
		public int current_page { get; set; }
		[NoAccessorMethod]
		public string custom_tab_label { owned get; set; }
		public Gtk.PageSetup default_page_setup { get; set; }
		public bool embed_page_setup { get; set; }
		[NoAccessorMethod]
		public string export_filename { owned get; set; }
		public bool has_selection { get; set; }
		[NoAccessorMethod]
		public string job_name { owned get; set; }
		[NoAccessorMethod]
		public int n_pages { get; set; }
		public int n_pages_to_print { get; }
		public Gtk.PrintSettings print_settings { get; set; }
		[NoAccessorMethod]
		public bool show_progress { get; set; }
		public Gtk.PrintStatus status { get; }
		public string status_string { get; }
		public bool support_selection { get; set; }
		[NoAccessorMethod]
		public bool track_print_status { get; set; }
		[NoAccessorMethod]
		public Gtk.Unit unit { get; set; }
		[NoAccessorMethod]
		public bool use_full_page { get; set; }
		public virtual signal void begin_print (Gtk.PrintContext context);
		public virtual signal unowned GLib.Object create_custom_widget ();
		public virtual signal void custom_widget_apply (Gtk.Widget widget);
		public virtual signal void done (Gtk.PrintOperationResult result);
		public virtual signal void draw_page (Gtk.PrintContext context, int page_nr);
		public virtual signal void end_print (Gtk.PrintContext context);
		public virtual signal bool paginate (Gtk.PrintContext context);
		public virtual signal bool preview (Gtk.PrintOperationPreview preview, Gtk.PrintContext context, Gtk.Window parent);
		public virtual signal void request_page_setup (Gtk.PrintContext context, int page_nr, Gtk.PageSetup setup);
		public virtual signal void status_changed ();
		public virtual signal void update_custom_widget (Gtk.Widget widget, Gtk.PageSetup setup, Gtk.PrintSettings settings);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_settings_get_type ()")]
	public class PrintSettings : GLib.Object {
		[CCode (has_construct_function = false)]
		public PrintSettings ();
		public Gtk.PrintSettings copy ();
		public void @foreach (Gtk.PrintSettingsFunc func);
		[CCode (has_construct_function = false)]
		public PrintSettings.from_file (string file_name) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public PrintSettings.from_key_file (GLib.KeyFile key_file, string group_name) throws GLib.Error;
		public unowned string @get (string key);
		public bool get_bool (string key);
		public bool get_collate ();
		public unowned string get_default_source ();
		public unowned string get_dither ();
		public double get_double (string key);
		public double get_double_with_default (string key, double def);
		public Gtk.PrintDuplex get_duplex ();
		public unowned string get_finishings ();
		public int get_int (string key);
		public int get_int_with_default (string key, int def);
		public double get_length (string key, Gtk.Unit unit);
		public unowned string get_media_type ();
		public int get_n_copies ();
		public int get_number_up ();
		public Gtk.NumberUpLayout get_number_up_layout ();
		public Gtk.PageOrientation get_orientation ();
		public unowned string get_output_bin ();
		public Gtk.PageRange[] get_page_ranges ();
		public Gtk.PageSet get_page_set ();
		public double get_paper_height (Gtk.Unit unit);
		public Gtk.PaperSize get_paper_size ();
		public double get_paper_width (Gtk.Unit unit);
		public Gtk.PrintPages get_print_pages ();
		public unowned string get_printer ();
		public double get_printer_lpi ();
		public Gtk.PrintQuality get_quality ();
		public int get_resolution ();
		public int get_resolution_x ();
		public int get_resolution_y ();
		public bool get_reverse ();
		public double get_scale ();
		public bool get_use_color ();
		public bool has_key (string key);
		public bool load_file (string file_name) throws GLib.Error;
		public bool load_key_file (GLib.KeyFile key_file, string group_name) throws GLib.Error;
		public void @set (string key, string value);
		public void set_bool (string key, bool value);
		public void set_collate (bool collate);
		public void set_default_source (string default_source);
		public void set_dither (string dither);
		public void set_double (string key, double value);
		public void set_duplex (Gtk.PrintDuplex duplex);
		public void set_finishings (string finishings);
		public void set_int (string key, int value);
		public void set_length (string key, double value, Gtk.Unit unit);
		public void set_media_type (string media_type);
		public void set_n_copies (int num_copies);
		public void set_number_up (int number_up);
		public void set_number_up_layout (Gtk.NumberUpLayout number_up_layout);
		public void set_orientation (Gtk.PageOrientation orientation);
		public void set_output_bin (string output_bin);
		public void set_page_ranges ([CCode (array_length_pos = 1.1)] Gtk.PageRange[] page_ranges);
		public void set_page_set (Gtk.PageSet page_set);
		public void set_paper_height (double height, Gtk.Unit unit);
		public void set_paper_size (Gtk.PaperSize paper_size);
		public void set_paper_width (double width, Gtk.Unit unit);
		public void set_print_pages (Gtk.PrintPages pages);
		public void set_printer (string printer);
		public void set_printer_lpi (double lpi);
		public void set_quality (Gtk.PrintQuality quality);
		public void set_resolution (int resolution);
		public void set_resolution_xy (int resolution_x, int resolution_y);
		public void set_reverse (bool reverse);
		public void set_scale (double scale);
		public void set_use_color (bool use_color);
		public bool to_file (string file_name) throws GLib.Error;
		public void to_key_file (GLib.KeyFile key_file, string group_name);
		public void unset (string key);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_progress_bar_get_type ()")]
	public class ProgressBar : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ProgressBar ();
		public Pango.EllipsizeMode get_ellipsize ();
		public double get_fraction ();
		public bool get_inverted ();
		public double get_pulse_step ();
		public bool get_show_text ();
		public unowned string get_text ();
		public void pulse ();
		public void set_ellipsize (Pango.EllipsizeMode mode);
		public void set_fraction (double fraction);
		public void set_inverted (bool inverted);
		public void set_pulse_step (double fraction);
		public void set_show_text (bool show_text);
		public void set_text (string text);
		public Pango.EllipsizeMode ellipsize { get; set; }
		public double fraction { get; set; }
		public bool inverted { get; set; }
		public double pulse_step { get; set; }
		public bool show_text { get; set; }
		public string text { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_progress_bar_accessible_get_type ()")]
	public class ProgressBarAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected ProgressBarAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_action_get_type ()")]
	public class RadioAction : Gtk.ToggleAction, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public RadioAction (string name, string? label, string? tooltip, string? stock_id, int value);
		public int get_current_value ();
		public unowned GLib.SList<Gtk.RadioAction> get_group ();
		public void join_group (Gtk.RadioAction group_source);
		public void set_current_value (int current_value);
		public void set_group (GLib.SList<Gtk.RadioAction> group);
		public int current_value { get; set; }
		[NoAccessorMethod]
		public Gtk.RadioAction group { set; }
		[NoAccessorMethod]
		public int value { get; set; }
		public virtual signal void changed (Gtk.RadioAction current);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_button_get_type ()")]
	public class RadioButton : Gtk.CheckButton, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton (GLib.SList<Gtk.RadioButton>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.from_widget (Gtk.RadioButton? radio_group_member);
		public unowned GLib.SList<Gtk.RadioButton> get_group ();
		public void join_group (Gtk.RadioButton group_source);
		public void set_group (GLib.SList<Gtk.RadioButton> group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_label (GLib.SList<Gtk.RadioButton>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_label_from_widget (Gtk.RadioButton? radio_group_member, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_mnemonic (GLib.SList<Gtk.RadioButton>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_mnemonic_from_widget (Gtk.RadioButton? radio_group_member, string label);
		[NoAccessorMethod]
		public Gtk.RadioButton group { set; }
		public virtual signal void group_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_radio_button_accessible_get_type ()")]
	public class RadioButtonAccessible : Gtk.ToggleButtonAccessible, Atk.Component, Atk.Action, Atk.Image {
		[CCode (has_construct_function = false)]
		protected RadioButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_menu_item_get_type ()")]
	public class RadioMenuItem : Gtk.CheckMenuItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem (GLib.SList<Gtk.RadioMenuItem>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.from_widget (Gtk.RadioMenuItem group);
		public unowned GLib.SList<Gtk.RadioMenuItem> get_group ();
		public void set_group (GLib.SList<Gtk.RadioMenuItem>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.with_label (GLib.SList<Gtk.RadioMenuItem>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.with_label_from_widget (Gtk.RadioMenuItem group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.with_mnemonic (GLib.SList<Gtk.RadioMenuItem>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.with_mnemonic_from_widget (Gtk.RadioMenuItem group, string label);
		public Gtk.RadioMenuItem group { set; }
		public virtual signal void group_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_radio_menu_item_accessible_get_type ()")]
	public class RadioMenuItemAccessible : Gtk.CheckMenuItemAccessible, Atk.Component, Atk.Action, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected RadioMenuItemAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_tool_button_get_type ()")]
	public class RadioToolButton : Gtk.ToggleToolButton, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public RadioToolButton (GLib.SList<Gtk.RadioToolButton>? group);
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public RadioToolButton.from_stock (GLib.SList<Gtk.RadioToolButton>? group, string stock_id);
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public RadioToolButton.from_widget (Gtk.RadioToolButton group);
		public unowned GLib.SList<Gtk.RadioToolButton> get_group ();
		public void set_group (GLib.SList<Gtk.RadioToolButton> group);
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public RadioToolButton.with_stock_from_widget (Gtk.RadioToolButton group, string stock_id);
		public Gtk.RadioToolButton group { set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_range_get_type ()")]
	public abstract class Range : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected Range ();
		public unowned Gtk.Adjustment get_adjustment ();
		public double get_fill_level ();
		public bool get_flippable ();
		public bool get_inverted ();
		public Gtk.SensitivityType get_lower_stepper_sensitivity ();
		public int get_min_slider_size ();
		[NoWrapper]
		public virtual void get_range_border (Gtk.Border border_);
		public Gdk.Rectangle get_range_rect ();
		public bool get_restrict_to_fill_level ();
		public int get_round_digits ();
		public bool get_show_fill_level ();
		public void get_slider_range (out int slider_start, out int slider_end);
		public bool get_slider_size_fixed ();
		public Gtk.SensitivityType get_upper_stepper_sensitivity ();
		public double get_value ();
		public void set_adjustment (Gtk.Adjustment adjustment);
		public void set_fill_level (double fill_level);
		public void set_flippable (bool flippable);
		public void set_increments (double step, double page);
		public void set_inverted (bool setting);
		public void set_lower_stepper_sensitivity (Gtk.SensitivityType sensitivity);
		public void set_min_slider_size (int min_size);
		public void set_range (double min, double max);
		public void set_restrict_to_fill_level (bool restrict_to_fill_level);
		public void set_round_digits (int round_digits);
		public void set_show_fill_level (bool show_fill_level);
		public void set_slider_size_fixed (bool size_fixed);
		public void set_upper_stepper_sensitivity (Gtk.SensitivityType sensitivity);
		public void set_value (double value);
		public Gtk.Adjustment adjustment { get; set construct; }
		public double fill_level { get; set; }
		public bool inverted { get; set; }
		public Gtk.SensitivityType lower_stepper_sensitivity { get; set; }
		public bool restrict_to_fill_level { get; set; }
		public int round_digits { get; set; }
		public bool show_fill_level { get; set; }
		public Gtk.SensitivityType upper_stepper_sensitivity { get; set; }
		public virtual signal void adjust_bounds (double new_value);
		public virtual signal bool change_value (Gtk.ScrollType scroll, double new_value);
		public virtual signal void move_slider (Gtk.ScrollType scroll);
		public virtual signal void value_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_range_accessible_get_type ()")]
	public class RangeAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected RangeAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class RcContext {
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class RcProperty {
		public weak string origin;
		public GLib.Quark property_name;
		public GLib.Quark type_name;
		public GLib.Value value;
		public static bool parse_border (GLib.ParamSpec pspec, GLib.StringBuilder gstring, GLib.Value property_value);
		public static bool parse_color (GLib.ParamSpec pspec, GLib.StringBuilder gstring, GLib.Value property_value);
		public static bool parse_enum (GLib.ParamSpec pspec, GLib.StringBuilder gstring, GLib.Value property_value);
		public static bool parse_flags (GLib.ParamSpec pspec, GLib.StringBuilder gstring, GLib.Value property_value);
		public static bool parse_requisition (GLib.ParamSpec pspec, GLib.StringBuilder gstring, GLib.Value property_value);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_rc_style_get_type ()")]
	[Deprecated (replacement = "CssProvider", since = "3.0")]
	public class RcStyle : GLib.Object {
		[CCode (array_length = false)]
		public weak Gdk.Color[] @base;
		[CCode (array_length = false)]
		public weak Gdk.Color[] bg;
		[CCode (array_length = false)]
		public weak string[] bg_pixmap_name;
		[CCode (array_length = false)]
		public weak Gtk.RcFlags[] color_flags;
		public uint engine_specified;
		[CCode (array_length = false)]
		public weak Gdk.Color[] fg;
		public weak Pango.FontDescription font_desc;
		public weak GLib.SList icon_factories;
		public weak string name;
		public weak GLib.Array rc_properties;
		public weak GLib.SList rc_style_lists;
		[CCode (array_length = false)]
		public weak Gdk.Color[] text;
		public int xthickness;
		public int ythickness;
		[CCode (has_construct_function = false)]
		public RcStyle ();
		public Gtk.RcStyle copy ();
		[NoWrapper]
		public virtual Gtk.RcStyle create_rc_style ();
		[NoWrapper]
		public virtual Gtk.Style create_style ();
		[NoWrapper]
		public virtual void merge (Gtk.RcStyle src);
		[NoWrapper]
		public virtual uint parse (Gtk.Settings settings, GLib.Scanner scanner);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_action_get_type ()")]
	public class RecentAction : Gtk.Action, Gtk.Buildable, Gtk.RecentChooser {
		[CCode (has_construct_function = false, type = "GtkAction*")]
		public RecentAction (string name, string label, string tooltip, string stock_id);
		[CCode (has_construct_function = false, type = "GtkAction*")]
		public RecentAction.for_manager (string name, string label, string tooltip, string stock_id, Gtk.RecentManager manager);
		public bool get_show_numbers ();
		public void set_show_numbers (bool show_numbers);
		public bool show_numbers { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_dialog_get_type ()")]
	public class RecentChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.RecentChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RecentChooserDialog (string title, Gtk.Window parent, ...);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RecentChooserDialog.for_manager (string title, Gtk.Window parent, Gtk.RecentManager manager, ...);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_menu_get_type ()")]
	public class RecentChooserMenu : Gtk.Menu, Atk.Implementor, Gtk.Buildable, Gtk.RecentChooser, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RecentChooserMenu ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RecentChooserMenu.for_manager (Gtk.RecentManager manager);
		public bool get_show_numbers ();
		public void set_show_numbers (bool show_numbers);
		public bool show_numbers { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_widget_get_type ()")]
	public class RecentChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.RecentChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RecentChooserWidget ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RecentChooserWidget.for_manager (Gtk.RecentManager manager);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_filter_get_type ()")]
	public class RecentFilter : GLib.InitiallyUnowned, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public RecentFilter ();
		public void add_age (int days);
		public void add_application (string application);
		public void add_custom (Gtk.RecentFilterFlags needed, owned Gtk.RecentFilterFunc func);
		public void add_group (string group);
		public void add_mime_type (string mime_type);
		public void add_pattern (string pattern);
		public void add_pixbuf_formats ();
		public bool filter (Gtk.RecentFilterInfo filter_info);
		public Gtk.RecentFilterFlags get_needed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_recent_info_ref", type_id = "gtk_recent_info_get_type ()", unref_function = "gtk_recent_info_unref")]
	[Compact]
	public class RecentInfo {
		public GLib.AppInfo create_app_info (string app_name) throws GLib.Error;
		public bool exists ();
		public ulong get_added ();
		public int get_age ();
		public bool get_application_info (string app_name, out unowned string app_exec, out uint count, out ulong time_);
		[CCode (array_length_type = "gsize")]
		public string[] get_applications ();
		public unowned string get_description ();
		public unowned string get_display_name ();
		public unowned GLib.Icon get_gicon ();
		[CCode (array_length_type = "gsize")]
		public string[] get_groups ();
		public Gdk.Pixbuf? get_icon (int size);
		public unowned string get_mime_type ();
		public ulong get_modified ();
		public bool get_private_hint ();
		public string get_short_name ();
		public unowned string get_uri ();
		public string? get_uri_display ();
		public ulong get_visited ();
		public bool has_application (string app_name);
		public bool has_group (string group_name);
		public bool is_local ();
		public string last_application ();
		public bool match (Gtk.RecentInfo info_b);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_manager_get_type ()")]
	public class RecentManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public RecentManager ();
		public bool add_full (string uri, Gtk.RecentData recent_data);
		public bool add_item (string uri);
		public static GLib.Quark error_quark ();
		public static unowned Gtk.RecentManager get_default ();
		public GLib.List<Gtk.RecentInfo> get_items ();
		public bool has_item (string uri);
		public Gtk.RecentInfo lookup_item (string uri) throws GLib.Error;
		public bool move_item (string uri, string new_uri) throws GLib.Error;
		public int purge_items () throws GLib.Error;
		public bool remove_item (string uri) throws GLib.Error;
		[NoAccessorMethod]
		public string filename { owned get; construct; }
		[NoAccessorMethod]
		public int size { get; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_renderer_cell_accessible_get_type ()")]
	public class RendererCellAccessible : Gtk.CellAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false, type = "AtkObject*")]
		public RendererCellAccessible (Gtk.CellRenderer renderer);
		[NoAccessorMethod]
		public Gtk.CellRenderer renderer { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_revealer_get_type ()")]
	public class Revealer : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Revealer ();
		public bool get_child_revealed ();
		public bool get_reveal_child ();
		public uint get_transition_duration ();
		public Gtk.RevealerTransitionType get_transition_type ();
		public void set_reveal_child (bool reveal_child);
		public void set_transition_duration (uint duration);
		public void set_transition_type (Gtk.RevealerTransitionType transition);
		public bool child_revealed { get; }
		public bool reveal_child { get; set construct; }
		public uint transition_duration { get; set construct; }
		public Gtk.RevealerTransitionType transition_type { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scale_get_type ()")]
	public class Scale : Gtk.Range, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Scale (Gtk.Orientation orientation, Gtk.Adjustment? adjustment);
		public void add_mark (double value, Gtk.PositionType position, string? markup);
		public void clear_marks ();
		public int get_digits ();
		public bool get_draw_value ();
		public bool get_has_origin ();
		public unowned Pango.Layout get_layout ();
		public virtual void get_layout_offsets (out int x, out int y);
		public Gtk.PositionType get_value_pos ();
		public void set_digits (int digits);
		public void set_draw_value (bool draw_value);
		public void set_has_origin (bool has_origin);
		public void set_value_pos (Gtk.PositionType pos);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Scale.with_range (Gtk.Orientation orientation, double min, double max, double step);
		public int digits { get; set; }
		public bool draw_value { get; set; }
		public bool has_origin { get; set; }
		public Gtk.PositionType value_pos { get; set; }
		public virtual signal string format_value (double value);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_scale_accessible_get_type ()")]
	public class ScaleAccessible : Gtk.RangeAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected ScaleAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scale_button_get_type ()")]
	public class ScaleButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ScaleButton (Gtk.IconSize size, double min = 0.0, double max = 100.0, double step = 2.0, [CCode (array_length = false, array_null_terminated = true)] string[]? icons = null);
		public unowned Gtk.Adjustment get_adjustment ();
		public unowned Gtk.Widget get_minus_button ();
		public unowned Gtk.Widget get_plus_button ();
		public unowned Gtk.Widget get_popup ();
		public double get_value ();
		public void set_adjustment (Gtk.Adjustment adjustment);
		public void set_icons ([CCode (array_length = false, array_null_terminated = true)] string[] icons);
		public void set_value (double value);
		public Gtk.Adjustment adjustment { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] icons { owned get; set; }
		[NoAccessorMethod]
		public Gtk.IconSize size { get; set; }
		public double value { get; set; }
		public virtual signal void popdown ();
		public virtual signal void popup ();
		public virtual signal void value_changed (double value);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_scale_button_accessible_get_type ()")]
	public class ScaleButtonAccessible : Gtk.ButtonAccessible, Atk.Component, Atk.Action, Atk.Image, Atk.Value {
		[CCode (has_construct_function = false)]
		protected ScaleButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scrollbar_get_type ()")]
	public class Scrollbar : Gtk.Range, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Scrollbar (Gtk.Orientation orientation, Gtk.Adjustment? adjustment);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scrolled_window_get_type ()")]
	public class ScrolledWindow : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ScrolledWindow (Gtk.Adjustment? hadjustment, Gtk.Adjustment? vadjustment);
		public void add_with_viewport (Gtk.Widget child);
		public bool get_capture_button_press ();
		public unowned Gtk.Adjustment get_hadjustment ();
		public unowned Gtk.Widget get_hscrollbar ();
		public bool get_kinetic_scrolling ();
		public int get_min_content_height ();
		public int get_min_content_width ();
		public bool get_overlay_scrolling ();
		public Gtk.CornerType get_placement ();
		public void get_policy (out Gtk.PolicyType hscrollbar_policy, out Gtk.PolicyType vscrollbar_policy);
		public Gtk.ShadowType get_shadow_type ();
		public unowned Gtk.Adjustment get_vadjustment ();
		public unowned Gtk.Widget get_vscrollbar ();
		public void set_capture_button_press (bool capture_button_press);
		public void set_hadjustment (Gtk.Adjustment hadjustment);
		public void set_kinetic_scrolling (bool kinetic_scrolling);
		public void set_min_content_height (int height);
		public void set_min_content_width (int width);
		public void set_overlay_scrolling (bool overlay_scrolling);
		public void set_placement (Gtk.CornerType window_placement);
		public void set_policy (Gtk.PolicyType hscrollbar_policy, Gtk.PolicyType vscrollbar_policy);
		public void set_shadow_type (Gtk.ShadowType type);
		public void set_vadjustment (Gtk.Adjustment vadjustment);
		public void unset_placement ();
		public Gtk.Adjustment hadjustment { get; set construct; }
		[NoAccessorMethod]
		public Gtk.PolicyType hscrollbar_policy { get; set; }
		public bool kinetic_scrolling { get; set; }
		public int min_content_height { get; set; }
		public int min_content_width { get; set; }
		public bool overlay_scrolling { get; set; }
		public Gtk.ShadowType shadow_type { get; set; }
		public Gtk.Adjustment vadjustment { get; set construct; }
		[NoAccessorMethod]
		public Gtk.PolicyType vscrollbar_policy { get; set; }
		[NoAccessorMethod]
		public Gtk.CornerType window_placement { get; set; }
		[NoAccessorMethod]
		public bool window_placement_set { get; set; }
		public virtual signal void edge_overshot (Gtk.PositionType p0);
		public virtual signal void edge_reached (Gtk.PositionType p0);
		public virtual signal void move_focus_out (Gtk.DirectionType direction);
		public virtual signal bool scroll_child (Gtk.ScrollType scroll, bool horizontal);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_scrolled_window_accessible_get_type ()")]
	public class ScrolledWindowAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ScrolledWindowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_search_bar_get_type ()")]
	public class SearchBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SearchBar ();
		public void connect_entry (Gtk.Entry entry);
		public bool get_search_mode ();
		public bool get_show_close_button ();
		public bool handle_event (Gdk.Event event);
		public void set_search_mode (bool search_mode);
		public void set_show_close_button (bool visible);
		[NoAccessorMethod]
		public bool search_mode_enabled { get; set; }
		public bool show_close_button { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_search_entry_get_type ()")]
	public class SearchEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.Editable, Gtk.CellEditable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SearchEntry ();
		public bool handle_event (Gdk.Event event);
		public virtual signal void next_match ();
		public virtual signal void previous_match ();
		public virtual signal void search_changed ();
		public virtual signal void stop_search ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "gtk_selection_data_copy", type_id = "gtk_selection_data_get_type ()")]
	[Compact]
	public class SelectionData {
		public Gtk.SelectionData copy ();
		[CCode (array_length = false)]
		public unowned uchar[] get_data ();
		public Gdk.Atom get_data_type ();
		public unowned uchar[] get_data_with_length ();
		public unowned Gdk.Display get_display ();
		public int get_format ();
		public int get_length ();
		public Gdk.Pixbuf? get_pixbuf ();
		public Gdk.Atom get_selection ();
		public Gdk.Atom get_target ();
		public bool get_targets (out Gdk.Atom[] targets);
		public string? get_text ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_uris ();
		public void @set (Gdk.Atom type, int format, uchar[] data);
		public bool set_pixbuf (Gdk.Pixbuf pixbuf);
		public bool set_text (string str, int len);
		public bool set_uris ([CCode (array_length = false, array_null_terminated = true)] string[] uris);
		public bool targets_include_image (bool writable);
		public bool targets_include_rich_text (Gtk.TextBuffer buffer);
		public bool targets_include_text ();
		public bool targets_include_uri ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_separator_get_type ()")]
	public class Separator : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Separator (Gtk.Orientation orientation);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_separator_menu_item_get_type ()")]
	public class SeparatorMenuItem : Gtk.MenuItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SeparatorMenuItem ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_separator_tool_item_get_type ()")]
	public class SeparatorToolItem : Gtk.ToolItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public SeparatorToolItem ();
		public bool get_draw ();
		public void set_draw (bool draw);
		public bool draw { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_settings_get_type ()")]
	public class Settings : GLib.Object, Gtk.StyleProvider {
		[CCode (has_construct_function = false)]
		protected Settings ();
		public static unowned Gtk.Settings get_default ();
		public static unowned Gtk.Settings get_for_screen (Gdk.Screen screen);
		public static void install_property (GLib.ParamSpec pspec);
		public static void install_property_parser (GLib.ParamSpec pspec, Gtk.RcPropertyParser parser);
		public void set_double_property (string name, double v_double, string origin);
		public void set_long_property (string name, long v_long, string origin);
		public void set_property_value (string name, Gtk.SettingsValue svalue);
		public void set_string_property (string name, string v_string, string origin);
		[NoAccessorMethod]
		public GLib.HashTable<string,Gdk.Color> color_hash { owned get; }
		[NoAccessorMethod]
		public bool gtk_alternative_button_order { get; set; }
		[NoAccessorMethod]
		public bool gtk_alternative_sort_arrows { get; set; }
		[NoAccessorMethod]
		public bool gtk_application_prefer_dark_theme { get; set; }
		[NoAccessorMethod]
		public bool gtk_auto_mnemonics { get; set; }
		[NoAccessorMethod]
		public bool gtk_button_images { get; set; }
		[NoAccessorMethod]
		public bool gtk_can_change_accels { get; set; }
		[NoAccessorMethod]
		public string gtk_color_palette { owned get; set; }
		[NoAccessorMethod]
		public string gtk_color_scheme { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_cursor_blink { get; set; }
		[NoAccessorMethod]
		public int gtk_cursor_blink_time { get; set; }
		[NoAccessorMethod]
		public int gtk_cursor_blink_timeout { get; set; }
		[NoAccessorMethod]
		public string gtk_cursor_theme_name { owned get; set; }
		[NoAccessorMethod]
		public int gtk_cursor_theme_size { get; set; }
		[NoAccessorMethod]
		public string gtk_decoration_layout { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_dialogs_use_header { get; set; }
		[NoAccessorMethod]
		public int gtk_dnd_drag_threshold { get; set; }
		[NoAccessorMethod]
		public int gtk_double_click_distance { get; set; }
		[NoAccessorMethod]
		public int gtk_double_click_time { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_accels { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_animations { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_event_sounds { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_input_feedback_sounds { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_mnemonics { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_primary_paste { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_tooltips { get; set; }
		[NoAccessorMethod]
		public uint gtk_entry_password_hint_timeout { get; set; }
		[NoAccessorMethod]
		public bool gtk_entry_select_on_focus { get; set; }
		[NoAccessorMethod]
		public bool gtk_error_bell { get; set; }
		[NoAccessorMethod]
		public string gtk_fallback_icon_theme { owned get; set; }
		[NoAccessorMethod]
		public string gtk_file_chooser_backend { owned get; set; }
		[NoAccessorMethod]
		public string gtk_font_name { owned get; set; }
		[NoAccessorMethod]
		public uint gtk_fontconfig_timestamp { get; set; }
		[NoAccessorMethod]
		public string gtk_icon_sizes { owned get; set; }
		[NoAccessorMethod]
		public string gtk_icon_theme_name { owned get; set; }
		[NoAccessorMethod]
		public string gtk_im_module { owned get; set; }
		[NoAccessorMethod]
		public Gtk.IMPreeditStyle gtk_im_preedit_style { get; set; }
		[NoAccessorMethod]
		public Gtk.IMStatusStyle gtk_im_status_style { get; set; }
		[NoAccessorMethod]
		public string gtk_key_theme_name { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_keynav_cursor_only { get; set; }
		[NoAccessorMethod]
		public bool gtk_keynav_wrap_around { get; set; }
		[NoAccessorMethod]
		public bool gtk_label_select_on_focus { get; set; }
		[NoAccessorMethod]
		public uint gtk_long_press_time { get; set; }
		[NoAccessorMethod]
		public string gtk_menu_bar_accel { owned get; set; }
		[NoAccessorMethod]
		public int gtk_menu_bar_popup_delay { get; set; }
		[NoAccessorMethod]
		public bool gtk_menu_images { get; set; }
		[NoAccessorMethod]
		public int gtk_menu_popdown_delay { get; set; }
		[NoAccessorMethod]
		public int gtk_menu_popup_delay { get; set; }
		[NoAccessorMethod]
		public string gtk_modules { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_primary_button_warps_slider { get; set; }
		[NoAccessorMethod]
		public string gtk_print_backends { owned get; set; }
		[NoAccessorMethod]
		public string gtk_print_preview_command { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_recent_files_enabled { get; set; }
		[NoAccessorMethod]
		public int gtk_recent_files_limit { get; set; }
		[NoAccessorMethod]
		public int gtk_recent_files_max_age { get; set; }
		[NoAccessorMethod]
		public Gtk.CornerType gtk_scrolled_window_placement { get; set; }
		[NoAccessorMethod]
		public bool gtk_shell_shows_app_menu { get; set; }
		[NoAccessorMethod]
		public bool gtk_shell_shows_desktop { get; set; }
		[NoAccessorMethod]
		public bool gtk_shell_shows_menubar { get; set; }
		[NoAccessorMethod]
		public bool gtk_show_input_method_menu { get; set; }
		[NoAccessorMethod]
		public bool gtk_show_unicode_menu { get; set; }
		[NoAccessorMethod]
		public string gtk_sound_theme_name { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_split_cursor { get; set; }
		[NoAccessorMethod]
		public string gtk_theme_name { owned get; set; }
		[NoAccessorMethod]
		public int gtk_timeout_expand { get; set; }
		[NoAccessorMethod]
		public int gtk_timeout_initial { get; set; }
		[NoAccessorMethod]
		public int gtk_timeout_repeat { get; set; }
		[NoAccessorMethod]
		public string gtk_titlebar_double_click { owned get; set; }
		[NoAccessorMethod]
		public string gtk_titlebar_middle_click { owned get; set; }
		[NoAccessorMethod]
		public string gtk_titlebar_right_click { owned get; set; }
		[NoAccessorMethod]
		public Gtk.IconSize gtk_toolbar_icon_size { get; set; }
		[NoAccessorMethod]
		public Gtk.ToolbarStyle gtk_toolbar_style { get; set; }
		[NoAccessorMethod]
		public int gtk_tooltip_browse_mode_timeout { get; set; }
		[NoAccessorMethod]
		public int gtk_tooltip_browse_timeout { get; set; }
		[NoAccessorMethod]
		public int gtk_tooltip_timeout { get; set; }
		[Deprecated (replacement = "Gdk.Event.get_source_device", since = "3.4")]
		[NoAccessorMethod]
		public bool gtk_touchscreen_mode { get; set; }
		[NoAccessorMethod]
		public Gtk.PolicyType gtk_visible_focus { get; set; }
		[NoAccessorMethod]
		public int gtk_xft_antialias { get; set; }
		[NoAccessorMethod]
		public int gtk_xft_dpi { get; set; }
		[NoAccessorMethod]
		public int gtk_xft_hinting { get; set; }
		[NoAccessorMethod]
		public string gtk_xft_hintstyle { owned get; set; }
		[NoAccessorMethod]
		public string gtk_xft_rgba { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_size_group_get_type ()")]
	public class SizeGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public SizeGroup (Gtk.SizeGroupMode mode);
		public void add_widget (Gtk.Widget widget);
		public bool get_ignore_hidden ();
		public Gtk.SizeGroupMode get_mode ();
		public unowned GLib.SList<Gtk.Widget> get_widgets ();
		public void remove_widget (Gtk.Widget widget);
		public void set_ignore_hidden (bool ignore_hidden);
		public void set_mode (Gtk.SizeGroupMode mode);
		public bool ignore_hidden { get; set; }
		public Gtk.SizeGroupMode mode { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtkx.h", type_id = "gtk_socket_get_type ()")]
	public class Socket : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Socket ();
		public void add_id (X.Window window);
		public X.Window get_id ();
		public unowned Gdk.Window get_plug_window ();
		public virtual signal void plug_added ();
		public virtual signal bool plug_removed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_spin_button_get_type ()")]
	public class SpinButton : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.Editable, Gtk.CellEditable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SpinButton (Gtk.Adjustment adjustment, double climb_rate, uint digits);
		public void configure (Gtk.Adjustment adjustment, double climb_rate, uint digits);
		public unowned Gtk.Adjustment get_adjustment ();
		public uint get_digits ();
		public void get_increments (out double step, out double page);
		public bool get_numeric ();
		public void get_range (out double min, out double max);
		public bool get_snap_to_ticks ();
		public Gtk.SpinButtonUpdatePolicy get_update_policy ();
		public double get_value ();
		public int get_value_as_int ();
		public bool get_wrap ();
		public void set_adjustment (Gtk.Adjustment adjustment);
		public void set_digits (uint digits);
		public void set_increments (double step, double page);
		public void set_numeric (bool numeric);
		public void set_range (double min, double max);
		public void set_snap_to_ticks (bool snap_to_ticks);
		public void set_update_policy (Gtk.SpinButtonUpdatePolicy policy);
		public void set_value (double value);
		public void set_wrap (bool wrap);
		public void spin (Gtk.SpinType direction, double increment);
		public void update ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SpinButton.with_range (double min, double max, double step);
		public Gtk.Adjustment adjustment { get; set; }
		[NoAccessorMethod]
		public double climb_rate { get; set; }
		public uint digits { get; set; }
		public bool numeric { get; set; }
		public bool snap_to_ticks { get; set; }
		public Gtk.SpinButtonUpdatePolicy update_policy { get; set; }
		public double value { get; set; }
		public bool wrap { get; set; }
		public virtual signal void change_value (Gtk.ScrollType scroll);
		public virtual signal int input (out double new_value);
		public virtual signal bool output ();
		public virtual signal void value_changed ();
		public virtual signal void wrapped ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_spin_button_accessible_get_type ()")]
	public class SpinButtonAccessible : Gtk.EntryAccessible, Atk.Component, Atk.EditableText, Atk.Text, Atk.Action, Atk.Value {
		[CCode (has_construct_function = false)]
		protected SpinButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_spinner_get_type ()")]
	public class Spinner : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Spinner ();
		public void start ();
		public void stop ();
		[NoAccessorMethod]
		public bool active { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_spinner_accessible_get_type ()")]
	public class SpinnerAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected SpinnerAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_stack_get_type ()")]
	public class Stack : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Stack ();
		public void add_named (Gtk.Widget child, string name);
		public void add_titled (Gtk.Widget child, string name, string title);
		public unowned Gtk.Widget get_child_by_name (string name);
		public bool get_hhomogeneous ();
		public bool get_homogeneous ();
		public uint get_transition_duration ();
		public bool get_transition_running ();
		public Gtk.StackTransitionType get_transition_type ();
		public bool get_vhomogeneous ();
		public unowned Gtk.Widget get_visible_child ();
		public unowned string get_visible_child_name ();
		public void set_hhomogeneous (bool hhomogeneous);
		public void set_homogeneous (bool homogeneous);
		public void set_transition_duration (uint duration);
		public void set_transition_type (Gtk.StackTransitionType transition);
		public void set_vhomogeneous (bool vhomogeneous);
		public void set_visible_child (Gtk.Widget child);
		public void set_visible_child_full (string name, Gtk.StackTransitionType transition);
		public void set_visible_child_name (string name);
		public bool hhomogeneous { get; set construct; }
		public bool homogeneous { get; set; }
		public uint transition_duration { get; set construct; }
		public bool transition_running { get; }
		public Gtk.StackTransitionType transition_type { get; set construct; }
		public bool vhomogeneous { get; set construct; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public class StackSidebar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public StackSidebar ();
		public unowned Gtk.Stack get_stack ();
		public void set_stack (Gtk.Stack stack);
		public Gtk.Stack stack { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_stack_switcher_get_type ()")]
	public class StackSwitcher : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public StackSwitcher ();
		public unowned Gtk.Stack get_stack ();
		public void set_stack (Gtk.Stack stack);
		public Gtk.Stack stack { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_status_icon_get_type ()")]
	public class StatusIcon : GLib.Object {
		[CCode (has_construct_function = false)]
		public StatusIcon ();
		[CCode (has_construct_function = false)]
		public StatusIcon.from_file (string filename);
		[CCode (has_construct_function = false)]
		public StatusIcon.from_gicon (GLib.Icon icon);
		[CCode (has_construct_function = false)]
		public StatusIcon.from_icon_name (string icon_name);
		[CCode (has_construct_function = false)]
		public StatusIcon.from_pixbuf (Gdk.Pixbuf pixbuf);
		[CCode (has_construct_function = false)]
		public StatusIcon.from_stock (string stock_id);
		public bool get_geometry (out unowned Gdk.Screen screen, out Gdk.Rectangle area, out Gtk.Orientation orientation);
		public unowned GLib.Icon get_gicon ();
		public bool get_has_tooltip ();
		public unowned string get_icon_name ();
		public unowned Gdk.Pixbuf get_pixbuf ();
		public unowned Gdk.Screen get_screen ();
		public int get_size ();
		public unowned string get_stock ();
		public Gtk.ImageType get_storage_type ();
		public unowned string get_title ();
		public string get_tooltip_markup ();
		public string get_tooltip_text ();
		public bool get_visible ();
		public uint32 get_x11_window_id ();
		public bool is_embedded ();
		[CCode (instance_pos = -1)]
		public void position_menu (Gtk.Menu menu, ref int x, ref int y, out bool push_in);
		public void set_from_file (string filename);
		public void set_from_gicon (GLib.Icon icon);
		public void set_from_icon_name (string icon_name);
		public void set_from_pixbuf (Gdk.Pixbuf pixbuf);
		public void set_from_stock (string stock_id);
		public void set_has_tooltip (bool has_tooltip);
		public void set_name (string name);
		public void set_screen (Gdk.Screen screen);
		public void set_title (string title);
		public void set_tooltip_markup (string markup);
		public void set_tooltip_text (string text);
		public void set_visible (bool visible);
		[NoAccessorMethod]
		public bool embedded { get; }
		[NoAccessorMethod]
		public string file { set; }
		[NoAccessorMethod]
		public GLib.Icon gicon { owned get; set; }
		public bool has_tooltip { get; set; }
		[NoAccessorMethod]
		public string icon_name { owned get; set; }
		[NoAccessorMethod]
		public Gtk.Orientation orientation { get; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf { owned get; set; }
		public Gdk.Screen screen { get; set; }
		public int size { get; }
		[NoAccessorMethod]
		public string stock { owned get; set; }
		public Gtk.ImageType storage_type { get; }
		public string title { get; set; }
		public string tooltip_markup { owned get; set; }
		public string tooltip_text { owned get; set; }
		public bool visible { get; set; }
		public virtual signal void activate ();
		public virtual signal bool button_press_event (Gdk.EventButton event);
		public virtual signal bool button_release_event (Gdk.EventButton event);
		public virtual signal void popup_menu (uint button, uint activate_time);
		public virtual signal bool query_tooltip (int x, int y, bool keyboard_mode, Gtk.Tooltip tooltip);
		public virtual signal bool scroll_event (Gdk.EventScroll event);
		public virtual signal bool size_changed (int size);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_statusbar_get_type ()")]
	public class Statusbar : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Statusbar ();
		public uint get_context_id (string context_description);
		public unowned Gtk.Container get_message_area ();
		public void pop (uint context_id);
		public uint push (uint context_id, string text);
		public void remove (uint context_id, uint message_id);
		public void remove_all (uint context_id);
		public virtual signal void text_popped (uint context_id, string text);
		public virtual signal void text_pushed (uint context_id, string text);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_statusbar_accessible_get_type ()")]
	public class StatusbarAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected StatusbarAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext", since = "3.0")]
	public class Style : GLib.Object {
		public int attach_count;
		[CCode (array_length = false)]
		public weak Cairo.Pattern[] background;
		[CCode (array_length = false)]
		public Gdk.Color[] @base;
		[CCode (array_length = false)]
		public Gdk.Color[] bg;
		public Gdk.Color black;
		[CCode (array_length = false)]
		public Gdk.Color[] dark;
		[CCode (array_length = false)]
		public Gdk.Color[] fg;
		public weak Pango.FontDescription font_desc;
		public weak GLib.SList icon_factories;
		[CCode (array_length = false)]
		public Gdk.Color[] light;
		[CCode (array_length = false)]
		public Gdk.Color[] mid;
		public weak GLib.Array property_cache;
		public weak Gtk.RcStyle rc_style;
		public weak GLib.SList styles;
		[CCode (array_length = false)]
		public Gdk.Color[] text;
		[CCode (array_length = false)]
		public Gdk.Color[] text_aa;
		public weak Gdk.Visual visual;
		public Gdk.Color white;
		public int xthickness;
		public int ythickness;
		[CCode (has_construct_function = false)]
		public Style ();
		public void apply_default_background (Cairo.Context cr, Gdk.Window window, Gtk.StateType state_type, int x, int y, int width, int height);
		public unowned Gtk.Style attach (Gdk.Window window);
		[NoWrapper]
		public virtual Gtk.Style clone ();
		public Gtk.Style copy ();
		[CCode (instance_pos = -1, vfunc_name = "copy")]
		[NoWrapper]
		public virtual void copy_to (Gtk.Style dest);
		public void detach ();
		[NoWrapper]
		public virtual void draw_arrow (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, Gtk.ArrowType arrow_type, bool fill, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_box (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_box_gap (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width);
		[NoWrapper]
		public virtual void draw_check (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_diamond (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_expander (Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, int x, int y, Gtk.ExpanderStyle expander_style);
		[NoWrapper]
		public virtual void draw_extension (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.PositionType gap_side);
		[NoWrapper]
		public virtual void draw_flat_box (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_focus (Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_handle (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.Orientation orientation);
		[NoWrapper]
		public virtual void draw_hline (Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, int x1, int x2, int y);
		[NoWrapper]
		public virtual void draw_layout (Cairo.Context cr, Gtk.StateType state_type, bool use_text, Gtk.Widget widget, string detail, int x, int y, Pango.Layout layout);
		[NoWrapper]
		public virtual void draw_option (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_resize_grip (Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, Gdk.WindowEdge edge, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_shadow (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_shadow_gap (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width);
		[NoWrapper]
		public virtual void draw_slider (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height, Gtk.Orientation orientation);
		[NoWrapper]
		public virtual void draw_spinner (Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, uint step, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_tab (Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget widget, string detail, int x, int y, int width, int height);
		[NoWrapper]
		public virtual void draw_vline (Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, int y1_, int y2_, int x);
		public void @get (GLib.Type widget_type, ...);
		public void get_style_property (GLib.Type widget_type, string property_name, out GLib.Value value);
		public void get_valist (GLib.Type widget_type, string first_property_name, void* var_args);
		public bool has_context ();
		[NoWrapper]
		public virtual void init_from_rc (Gtk.RcStyle rc_style);
		public bool lookup_color (string color_name, out Gdk.Color color);
		public unowned Gtk.IconSet lookup_icon_set (string stock_id);
		public virtual Gdk.Pixbuf render_icon (Gtk.IconSource source, Gtk.TextDirection direction, Gtk.StateType state, Gtk.IconSize size, Gtk.Widget widget, string detail);
		public virtual void set_background (Gdk.Window window, Gtk.StateType state_type);
		[NoAccessorMethod]
		public Gtk.StyleContext context { owned get; construct; }
		public virtual signal void realize ();
		public virtual signal void unrealize ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_style_context_get_type ()")]
	public class StyleContext : GLib.Object {
		[CCode (has_construct_function = false)]
		public StyleContext ();
		public void add_class (string class_name);
		public void add_provider (Gtk.StyleProvider provider, uint priority);
		public static void add_provider_for_screen (Gdk.Screen screen, Gtk.StyleProvider provider, uint priority);
		public void add_region (string region_name, Gtk.RegionFlags flags);
		public void cancel_animations (void* region_id);
		public void @get (Gtk.StateFlags state, ...);
		public Gdk.RGBA get_background_color (Gtk.StateFlags state);
		public Gtk.Border get_border (Gtk.StateFlags state);
		public Gdk.RGBA get_border_color (Gtk.StateFlags state);
		public Gdk.RGBA get_color (Gtk.StateFlags state);
		public Gtk.TextDirection get_direction ();
		public unowned Pango.FontDescription get_font (Gtk.StateFlags state);
		public unowned Gdk.FrameClock get_frame_clock ();
		public Gtk.JunctionSides get_junction_sides ();
		public Gtk.Border get_margin (Gtk.StateFlags state);
		public Gtk.Border get_padding (Gtk.StateFlags state);
		public unowned Gtk.StyleContext get_parent ();
		public unowned Gtk.WidgetPath get_path ();
		public GLib.Value get_property (string property, Gtk.StateFlags state);
		public int get_scale ();
		public unowned Gdk.Screen get_screen ();
		public Gtk.CssSection get_section (string property);
		public Gtk.StateFlags get_state ();
		public void get_style (...);
		public void get_style_property (string property_name, GLib.Value value);
		public void get_style_valist (va_list args);
		public void get_valist (Gtk.StateFlags state, va_list args);
		public bool has_class (string class_name);
		public bool has_region (string region_name, out Gtk.RegionFlags flags_return);
		public void invalidate ();
		public GLib.List<weak string> list_classes ();
		public GLib.List<weak string> list_regions ();
		public bool lookup_color (string color_name, out Gdk.RGBA color);
		public unowned Gtk.IconSet lookup_icon_set (string stock_id);
		public void notify_state_change (Gdk.Window window, void* region_id, Gtk.StateType state, bool state_value);
		public void pop_animatable_region ();
		public void push_animatable_region (void* region_id);
		public void remove_class (string class_name);
		public void remove_provider (Gtk.StyleProvider provider);
		public static void remove_provider_for_screen (Gdk.Screen screen, Gtk.StyleProvider provider);
		public void remove_region (string region_name);
		[CCode (cname = "gtk_render_activity")]
		public void render_activity (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_arrow")]
		public void render_arrow (Cairo.Context cr, double angle, double x, double y, double size);
		[CCode (cname = "gtk_render_background")]
		public void render_background (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_check")]
		public void render_check (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_expander")]
		public void render_expander (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_extension")]
		public void render_extension (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side);
		[CCode (cname = "gtk_render_focus")]
		public void render_focus (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_frame")]
		public void render_frame (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_frame_gap")]
		public void render_frame_gap (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap);
		[CCode (cname = "gtk_render_handle")]
		public void render_handle (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_icon")]
		public void render_icon (Cairo.Context cr, Gdk.Pixbuf pixbuf, double x, double y);
		[CCode (cname = "gtk_render_icon_pixbuf")]
		public Gdk.Pixbuf render_icon_pixbuf (Gtk.IconSource source, Gtk.IconSize size);
		[CCode (cname = "gtk_render_layout")]
		public void render_layout (Cairo.Context cr, double x, double y, Pango.Layout layout);
		[CCode (cname = "gtk_render_line")]
		public void render_line (Cairo.Context cr, double x0, double y0, double x1, double y1);
		[CCode (cname = "gtk_render_option")]
		public void render_option (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cname = "gtk_render_slider")]
		public void render_slider (Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation);
		public static void reset_widgets (Gdk.Screen screen);
		public void restore ();
		public void save ();
		public void scroll_animations (Gdk.Window window, int dx, int dy);
		public void set_background (Gdk.Window window);
		public void set_direction (Gtk.TextDirection direction);
		public void set_frame_clock (Gdk.FrameClock frame_clock);
		public void set_junction_sides (Gtk.JunctionSides sides);
		public void set_parent (Gtk.StyleContext parent);
		public void set_path (Gtk.WidgetPath path);
		public void set_scale (int scale);
		public void set_screen (Gdk.Screen screen);
		public void set_state (Gtk.StateFlags flags);
		public bool state_is_running (Gtk.StateType state, double progress);
		public Gtk.TextDirection direction { get; set; }
		[NoAccessorMethod]
		public Gdk.FrameClock paint_clock { owned get; set; }
		public Gtk.StyleContext parent { get; set; }
		public Gdk.Screen screen { get; set; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_style_properties_get_type ()")]
	public class StyleProperties : GLib.Object, Gtk.StyleProvider {
		[CCode (has_construct_function = false)]
		public StyleProperties ();
		public void clear ();
		public void @get (Gtk.StateFlags state, ...);
		public bool get_property (string property, Gtk.StateFlags state, out GLib.Value value);
		public void get_valist (Gtk.StateFlags state, va_list args);
		public unowned Gtk.SymbolicColor lookup_color (string name);
		public static bool lookup_property (string property_name, out unowned Gtk.StylePropertyParser parse_func, out unowned GLib.ParamSpec pspec);
		public void map_color (string name, Gtk.SymbolicColor color);
		public void merge (Gtk.StyleProperties props_to_merge, bool replace);
		public static void register_property (Gtk.StylePropertyParser? parse_func, GLib.ParamSpec pspec);
		public void @set (Gtk.StateFlags state, ...);
		public void set_property (string property, Gtk.StateFlags state, GLib.Value value);
		public void set_valist (Gtk.StateFlags state, va_list args);
		public void unset_property (string property, Gtk.StateFlags state);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_switch_get_type ()")]
	public class Switch : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Switch ();
		public bool get_active ();
		public bool get_state ();
		public void set_active (bool is_active);
		public void set_state (bool state);
		public bool active { get; set; }
		public bool state { get; set; }
		public virtual signal void activate ();
		public virtual signal bool state_set (bool state);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_switch_accessible_get_type ()")]
	public class SwitchAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Action {
		[CCode (has_construct_function = false)]
		protected SwitchAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_symbolic_color_ref", type_id = "gtk_symbolic_color_get_type ()", unref_function = "gtk_symbolic_color_unref")]
	[Compact]
	public class SymbolicColor {
		[CCode (has_construct_function = false)]
		public SymbolicColor.alpha (Gtk.SymbolicColor color, double factor);
		[CCode (has_construct_function = false)]
		public SymbolicColor.literal (Gdk.RGBA color);
		[CCode (has_construct_function = false)]
		public SymbolicColor.mix (Gtk.SymbolicColor color1, Gtk.SymbolicColor color2, double factor);
		[CCode (has_construct_function = false)]
		public SymbolicColor.name (string name);
		public bool resolve (Gtk.StyleProperties props, out Gdk.RGBA resolved_color);
		[CCode (has_construct_function = false)]
		public SymbolicColor.shade (Gtk.SymbolicColor color, double factor);
		public string to_string ();
		[CCode (has_construct_function = false)]
		public SymbolicColor.win32 (string theme_class, int id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_table_get_type ()")]
	[Deprecated (replacement = "Grid", since = "3.4")]
	public class Table : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Table (uint rows, uint columns, bool homogeneous);
		public void attach (Gtk.Widget child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach, Gtk.AttachOptions xoptions, Gtk.AttachOptions yoptions, uint xpadding, uint ypadding);
		public void attach_defaults (Gtk.Widget widget, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach);
		public uint get_col_spacing (uint column);
		public uint get_default_col_spacing ();
		public uint get_default_row_spacing ();
		public bool get_homogeneous ();
		public uint get_row_spacing (uint row);
		public void get_size (out uint rows, out uint columns);
		public void resize (uint rows, uint columns);
		public void set_col_spacing (uint column, uint spacing);
		public void set_col_spacings (uint spacing);
		public void set_homogeneous (bool homogeneous);
		public void set_row_spacing (uint row, uint spacing);
		public void set_row_spacings (uint spacing);
		[NoAccessorMethod]
		public uint column_spacing { get; set; }
		public bool homogeneous { get; set; }
		[NoAccessorMethod]
		public uint n_columns { get; set; }
		[NoAccessorMethod]
		public uint n_rows { get; set; }
		[NoAccessorMethod]
		public uint row_spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_target_list_ref", type_id = "gtk_target_list_get_type ()", unref_function = "gtk_target_list_unref")]
	[Compact]
	public class TargetList {
		[CCode (has_construct_function = false)]
		public TargetList (Gtk.TargetEntry[]? targets);
		public void add (Gdk.Atom target, uint flags, uint info);
		public void add_image_targets (uint info, bool writable);
		public void add_rich_text_targets (uint info, bool deserializable, Gtk.TextBuffer buffer);
		public void add_table (Gtk.TargetEntry[] targets);
		public void add_text_targets (uint info);
		public void add_uri_targets (uint info);
		public bool find (Gdk.Atom target, out uint info);
		public void remove (Gdk.Atom target);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class TargetPair {
		public uint flags;
		public uint info;
		public Gdk.Atom target;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tearoff_menu_item_get_type ()")]
	[Deprecated (since = "3.4")]
	public class TearoffMenuItem : Gtk.MenuItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TearoffMenuItem ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_text_attributes_ref", type_id = "gtk_text_attributes_get_type ()", unref_function = "gtk_text_attributes_unref")]
	[Compact]
	public class TextAttributes {
		public Gtk.TextAppearance appearance;
		public uint bg_full_height;
		public Gtk.TextDirection direction;
		public uint editable;
		public weak Pango.FontDescription font;
		public double font_scale;
		public int indent;
		public uint invisible;
		public Gtk.Justification justification;
		public Pango.Language language;
		public int left_margin;
		public int letter_spacing;
		public uint no_fallback;
		[CCode (array_length = false)]
		public weak uint[] padding;
		public Gdk.Color pg_bg_color;
		public Gdk.RGBA pg_bg_rgba;
		public int pixels_above_lines;
		public int pixels_below_lines;
		public int pixels_inside_wrap;
		public uint refcount;
		public int right_margin;
		public weak Pango.TabArray tabs;
		public Gtk.WrapMode wrap_mode;
		[CCode (has_construct_function = false)]
		public TextAttributes ();
		public Gtk.TextAttributes copy ();
		public void copy_values (Gtk.TextAttributes dest);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class TextBTree {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_buffer_get_type ()")]
	public class TextBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		public TextBuffer (Gtk.TextTagTable? table);
		public void add_mark (Gtk.TextMark mark, Gtk.TextIter where);
		public void add_selection_clipboard (Gtk.Clipboard clipboard);
		public void apply_tag_by_name (string name, Gtk.TextIter start, Gtk.TextIter end);
		public bool backspace (Gtk.TextIter iter, bool interactive, bool default_editable);
		public void copy_clipboard (Gtk.Clipboard clipboard);
		public unowned Gtk.TextChildAnchor create_child_anchor (Gtk.TextIter iter);
		public unowned Gtk.TextMark create_mark (string? mark_name, Gtk.TextIter where, bool left_gravity);
		public unowned Gtk.TextTag create_tag (string? tag_name, ...);
		public void cut_clipboard (Gtk.Clipboard clipboard, bool default_editable);
		public void @delete (ref Gtk.TextIter start, ref Gtk.TextIter end);
		public bool delete_interactive (ref Gtk.TextIter start_iter, ref Gtk.TextIter end_iter, bool default_editable);
		public void delete_mark (Gtk.TextMark mark);
		public void delete_mark_by_name (string name);
		public bool delete_selection (bool interactive, bool default_editable);
		public bool deserialize (Gtk.TextBuffer content_buffer, Gdk.Atom format, Gtk.TextIter iter, [CCode (array_length_type = "gsize")] uint8[] data) throws GLib.Error;
		public bool deserialize_get_can_create_tags (Gdk.Atom format);
		public void deserialize_set_can_create_tags (Gdk.Atom format, bool can_create_tags);
		public void get_bounds (out Gtk.TextIter start, out Gtk.TextIter end);
		public int get_char_count ();
		public unowned Gtk.TargetList get_copy_target_list ();
		public Gdk.Atom[] get_deserialize_formats ();
		public void get_end_iter (out Gtk.TextIter iter);
		public bool get_has_selection ();
		public unowned Gtk.TextMark get_insert ();
		public void get_iter_at_child_anchor (out Gtk.TextIter iter, Gtk.TextChildAnchor anchor);
		public void get_iter_at_line (out Gtk.TextIter iter, int line_number);
		public void get_iter_at_line_index (out Gtk.TextIter iter, int line_number, int byte_index);
		public void get_iter_at_line_offset (out Gtk.TextIter iter, int line_number, int char_offset);
		public void get_iter_at_mark (out Gtk.TextIter iter, Gtk.TextMark mark);
		public void get_iter_at_offset (out Gtk.TextIter iter, int char_offset);
		public int get_line_count ();
		public unowned Gtk.TextMark get_mark (string name);
		public bool get_modified ();
		public unowned Gtk.TargetList get_paste_target_list ();
		public unowned Gtk.TextMark get_selection_bound ();
		public bool get_selection_bounds (out Gtk.TextIter start, out Gtk.TextIter end);
		public Gdk.Atom[] get_serialize_formats ();
		public string get_slice (Gtk.TextIter start, Gtk.TextIter end, bool include_hidden_chars);
		public void get_start_iter (out Gtk.TextIter iter);
		public unowned Gtk.TextTagTable get_tag_table ();
		public string get_text (Gtk.TextIter start, Gtk.TextIter end, bool include_hidden_chars);
		public void insert (ref Gtk.TextIter iter, string text, int len);
		public void insert_at_cursor (string text, int len);
		public bool insert_interactive (ref Gtk.TextIter iter, string text, int len, bool default_editable);
		public bool insert_interactive_at_cursor (string text, int len, bool default_editable);
		public void insert_markup (ref Gtk.TextIter iter, string markup, int len);
		public void insert_range (ref Gtk.TextIter iter, Gtk.TextIter start, Gtk.TextIter end);
		public bool insert_range_interactive (ref Gtk.TextIter iter, Gtk.TextIter start, Gtk.TextIter end, bool default_editable);
		public void insert_with_tags (ref Gtk.TextIter iter, string text, int len, ...);
		public void insert_with_tags_by_name (ref Gtk.TextIter iter, string text, int len, ...);
		public void move_mark (Gtk.TextMark mark, Gtk.TextIter where);
		public void move_mark_by_name (string name, Gtk.TextIter where);
		public void paste_clipboard (Gtk.Clipboard clipboard, Gtk.TextIter? override_location, bool default_editable);
		public void place_cursor (Gtk.TextIter where);
		public Gdk.Atom register_deserialize_format (string mime_type, owned Gtk.TextBufferDeserializeFunc function);
		public Gdk.Atom register_deserialize_tagset (string tagset_name);
		public Gdk.Atom register_serialize_format (string mime_type, owned Gtk.TextBufferSerializeFunc function);
		public Gdk.Atom register_serialize_tagset (string tagset_name);
		public void remove_all_tags (Gtk.TextIter start, Gtk.TextIter end);
		public void remove_selection_clipboard (Gtk.Clipboard clipboard);
		public void remove_tag_by_name (string name, Gtk.TextIter start, Gtk.TextIter end);
		public void select_range (Gtk.TextIter ins, Gtk.TextIter bound);
		[CCode (array_length_type = "gsize")]
		public uint8[] serialize (Gtk.TextBuffer content_buffer, Gdk.Atom format, Gtk.TextIter start, Gtk.TextIter end);
		public void set_modified (bool setting);
		public void set_text (string text, int len = -1);
		public void unregister_deserialize_format (Gdk.Atom format);
		public void unregister_serialize_format (Gdk.Atom format);
		public Gtk.TargetList copy_target_list { get; }
		[NoAccessorMethod]
		public int cursor_position { get; }
		public bool has_selection { get; }
		public Gtk.TargetList paste_target_list { get; }
		public Gtk.TextTagTable tag_table { get; construct; }
		[NoAccessorMethod]
		public string text { owned get; set; }
		[HasEmitter]
		public virtual signal void apply_tag (Gtk.TextTag tag, Gtk.TextIter start, Gtk.TextIter end);
		[HasEmitter]
		public virtual signal void begin_user_action ();
		public virtual signal void changed ();
		public virtual signal void delete_range (Gtk.TextIter start, Gtk.TextIter end);
		[HasEmitter]
		public virtual signal void end_user_action ();
		[HasEmitter]
		public virtual signal void insert_child_anchor (Gtk.TextIter iter, Gtk.TextChildAnchor anchor);
		[HasEmitter]
		public virtual signal void insert_pixbuf (Gtk.TextIter iter, Gdk.Pixbuf pixbuf);
		public virtual signal void insert_text (ref Gtk.TextIter pos, string new_text, int new_text_length);
		public virtual signal void mark_deleted (Gtk.TextMark mark);
		public virtual signal void mark_set (Gtk.TextIter location, Gtk.TextMark mark);
		public virtual signal void modified_changed ();
		public virtual signal void paste_done (Gtk.Clipboard clipboard);
		[HasEmitter]
		public virtual signal void remove_tag (Gtk.TextTag tag, Gtk.TextIter start, Gtk.TextIter end);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_text_cell_accessible_get_type ()")]
	public class TextCellAccessible : Gtk.RendererCellAccessible, Atk.Action, Atk.Component, Atk.Text {
		[CCode (has_construct_function = false)]
		protected TextCellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_child_anchor_get_type ()")]
	public class TextChildAnchor : GLib.Object {
		public void* segment;
		[CCode (has_construct_function = false)]
		public TextChildAnchor ();
		public bool get_deleted ();
		public GLib.List<weak Gtk.Widget> get_widgets ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_mark_get_type ()")]
	public class TextMark : GLib.Object {
		public void* segment;
		[CCode (has_construct_function = false)]
		public TextMark (string? name, bool left_gravity = false);
		public unowned Gtk.TextBuffer get_buffer ();
		public bool get_deleted ();
		public bool get_left_gravity ();
		public unowned string get_name ();
		public bool get_visible ();
		public void set_visible (bool setting);
		public bool left_gravity { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_tag_get_type ()")]
	public class TextTag : GLib.Object {
		[CCode (has_construct_function = false)]
		public TextTag (string? name = null);
		public int get_priority ();
		public void set_priority (int priority);
		[NoAccessorMethod]
		public bool accumulative_margin { get; set; }
		[NoAccessorMethod]
		public string background { set; }
		[NoAccessorMethod]
		public bool background_full_height { get; set; }
		[NoAccessorMethod]
		public bool background_full_height_set { get; set; }
		[Deprecated (replacement = "background_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color background_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA background_rgba { get; set; }
		[NoAccessorMethod]
		public bool background_set { get; set; }
		[NoAccessorMethod]
		public Gtk.TextDirection direction { get; set; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool editable_set { get; set; }
		[NoAccessorMethod]
		public bool fallback { get; set; }
		[NoAccessorMethod]
		public bool fallback_set { get; set; }
		[NoAccessorMethod]
		public string family { owned get; set; }
		[NoAccessorMethod]
		public bool family_set { get; set; }
		[NoAccessorMethod]
		public string font { owned get; set; }
		[NoAccessorMethod]
		public Pango.FontDescription font_desc { owned get; set; }
		[NoAccessorMethod]
		public string foreground { set; }
		[Deprecated (replacement = "foreground_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color foreground_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA foreground_rgba { get; set; }
		[NoAccessorMethod]
		public bool foreground_set { get; set; }
		[NoAccessorMethod]
		public int indent { get; set; }
		[NoAccessorMethod]
		public bool indent_set { get; set; }
		[NoAccessorMethod]
		public bool invisible { get; set; }
		[NoAccessorMethod]
		public bool invisible_set { get; set; }
		[NoAccessorMethod]
		public Gtk.Justification justification { get; set; }
		[NoAccessorMethod]
		public bool justification_set { get; set; }
		[NoAccessorMethod]
		public string language { owned get; set; }
		[NoAccessorMethod]
		public bool language_set { get; set; }
		[NoAccessorMethod]
		public int left_margin { get; set; }
		[NoAccessorMethod]
		public bool left_margin_set { get; set; }
		[NoAccessorMethod]
		public int letter_spacing { get; set; }
		[NoAccessorMethod]
		public bool letter_spacing_set { get; set; }
		[NoAccessorMethod]
		public string name { owned get; construct; }
		[NoAccessorMethod]
		public string paragraph_background { set; }
		[Deprecated (replacement = "paragraph_background_rgba", since = "3.4")]
		[NoAccessorMethod]
		public Gdk.Color paragraph_background_gdk { get; set; }
		[NoAccessorMethod]
		public Gdk.RGBA paragraph_background_rgba { get; set; }
		[NoAccessorMethod]
		public bool paragraph_background_set { get; set; }
		[NoAccessorMethod]
		public int pixels_above_lines { get; set; }
		[NoAccessorMethod]
		public bool pixels_above_lines_set { get; set; }
		[NoAccessorMethod]
		public int pixels_below_lines { get; set; }
		[NoAccessorMethod]
		public bool pixels_below_lines_set { get; set; }
		[NoAccessorMethod]
		public int pixels_inside_wrap { get; set; }
		[NoAccessorMethod]
		public bool pixels_inside_wrap_set { get; set; }
		[NoAccessorMethod]
		public int right_margin { get; set; }
		[NoAccessorMethod]
		public bool right_margin_set { get; set; }
		[NoAccessorMethod]
		public int rise { get; set; }
		[NoAccessorMethod]
		public bool rise_set { get; set; }
		[NoAccessorMethod]
		public double scale { get; set; }
		[NoAccessorMethod]
		public bool scale_set { get; set; }
		[NoAccessorMethod]
		public int size { get; set; }
		[NoAccessorMethod]
		public double size_points { get; set; }
		[NoAccessorMethod]
		public bool size_set { get; set; }
		[NoAccessorMethod]
		public Pango.Stretch stretch { get; set; }
		[NoAccessorMethod]
		public bool stretch_set { get; set; }
		[NoAccessorMethod]
		public bool strikethrough { get; set; }
		[NoAccessorMethod]
		public bool strikethrough_set { get; set; }
		[NoAccessorMethod]
		public Pango.Style style { get; set; }
		[NoAccessorMethod]
		public bool style_set { get; set; }
		[NoAccessorMethod]
		public Pango.TabArray tabs { owned get; set; }
		[NoAccessorMethod]
		public bool tabs_set { get; set; }
		[NoAccessorMethod]
		public Pango.Underline underline { get; set; }
		[NoAccessorMethod]
		public bool underline_set { get; set; }
		[NoAccessorMethod]
		public Pango.Variant variant { get; set; }
		[NoAccessorMethod]
		public bool variant_set { get; set; }
		[NoAccessorMethod]
		public int weight { get; set; }
		[NoAccessorMethod]
		public bool weight_set { get; set; }
		[NoAccessorMethod]
		public Gtk.WrapMode wrap_mode { get; set; }
		[NoAccessorMethod]
		public bool wrap_mode_set { get; set; }
		[HasEmitter]
		public virtual signal bool event (GLib.Object event_object, Gdk.Event event, Gtk.TextIter iter);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_tag_table_get_type ()")]
	public class TextTagTable : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TextTagTable ();
		public bool add (Gtk.TextTag tag);
		public void @foreach (Gtk.TextTagTableForeach func);
		public int get_size ();
		public unowned Gtk.TextTag lookup (string name);
		public void remove (Gtk.TextTag tag);
		public virtual signal void tag_added (Gtk.TextTag tag);
		public virtual signal void tag_changed (Gtk.TextTag tag, bool size_changed);
		public virtual signal void tag_removed (Gtk.TextTag tag);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_view_get_type ()")]
	public class TextView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TextView ();
		public void add_child_at_anchor (Gtk.Widget child, Gtk.TextChildAnchor anchor);
		public void add_child_in_window (Gtk.Widget child, Gtk.TextWindowType which_window, int xpos, int ypos);
		public bool backward_display_line (Gtk.TextIter iter);
		public bool backward_display_line_start (Gtk.TextIter iter);
		public void buffer_to_window_coords (Gtk.TextWindowType win, int buffer_x, int buffer_y, out int window_x, out int window_y);
		[NoWrapper]
		public virtual Gtk.TextBuffer create_buffer ();
		[NoWrapper]
		public virtual void draw_layer (Gtk.TextViewLayer layer, Cairo.Context cr);
		public bool forward_display_line (Gtk.TextIter iter);
		public bool forward_display_line_end (Gtk.TextIter iter);
		public bool get_accepts_tab ();
		public int get_border_window_size (Gtk.TextWindowType type);
		public unowned Gtk.TextBuffer get_buffer ();
		public void get_cursor_locations (Gtk.TextIter? iter, out Gdk.Rectangle strong, out Gdk.Rectangle @weak);
		public bool get_cursor_visible ();
		public Gtk.TextAttributes get_default_attributes ();
		public bool get_editable ();
		public unowned Gtk.Adjustment get_hadjustment ();
		public int get_indent ();
		public Gtk.InputHints get_input_hints ();
		public Gtk.InputPurpose get_input_purpose ();
		public void get_iter_at_location (out Gtk.TextIter iter, int x, int y);
		public void get_iter_at_position (out Gtk.TextIter iter, out int trailing, int x, int y);
		public void get_iter_location (Gtk.TextIter iter, out Gdk.Rectangle location);
		public Gtk.Justification get_justification ();
		public int get_left_margin ();
		public void get_line_at_y (out Gtk.TextIter target_iter, int y, out int line_top);
		public void get_line_yrange (Gtk.TextIter iter, out int y, out int height);
		public bool get_monospace ();
		public bool get_overwrite ();
		public int get_pixels_above_lines ();
		public int get_pixels_below_lines ();
		public int get_pixels_inside_wrap ();
		public int get_right_margin ();
		public Pango.TabArray get_tabs ();
		public unowned Gtk.Adjustment get_vadjustment ();
		public void get_visible_rect (out Gdk.Rectangle visible_rect);
		public unowned Gdk.Window get_window (Gtk.TextWindowType win);
		public Gtk.TextWindowType get_window_type (Gdk.Window window);
		public Gtk.WrapMode get_wrap_mode ();
		public bool im_context_filter_keypress (Gdk.EventKey event);
		public void move_child (Gtk.Widget child, int xpos, int ypos);
		public bool move_mark_onscreen (Gtk.TextMark mark);
		public bool move_visually (Gtk.TextIter iter, int count);
		public bool place_cursor_onscreen ();
		public void reset_im_context ();
		public void scroll_mark_onscreen (Gtk.TextMark mark);
		public bool scroll_to_iter (Gtk.TextIter iter, double within_margin, bool use_align, double xalign, double yalign);
		public void scroll_to_mark (Gtk.TextMark mark, double within_margin, bool use_align, double xalign, double yalign);
		public void set_accepts_tab (bool accepts_tab);
		public void set_border_window_size (Gtk.TextWindowType type, int size);
		public void set_buffer (Gtk.TextBuffer buffer);
		public void set_cursor_visible (bool setting);
		public void set_editable (bool setting);
		public void set_indent (int indent);
		public void set_input_hints (Gtk.InputHints hints);
		public void set_input_purpose (Gtk.InputPurpose purpose);
		public void set_justification (Gtk.Justification justification);
		public void set_left_margin (int left_margin);
		public void set_monospace (bool monospace);
		public void set_overwrite (bool overwrite);
		public void set_pixels_above_lines (int pixels_above_lines);
		public void set_pixels_below_lines (int pixels_below_lines);
		public void set_pixels_inside_wrap (int pixels_inside_wrap);
		public void set_right_margin (int right_margin);
		public void set_tabs (Pango.TabArray tabs);
		public void set_wrap_mode (Gtk.WrapMode wrap_mode);
		public bool starts_display_line (Gtk.TextIter iter);
		public void window_to_buffer_coords (Gtk.TextWindowType win, int window_x, int window_y, out int buffer_x, out int buffer_y);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TextView.with_buffer (Gtk.TextBuffer buffer);
		public bool accepts_tab { get; set; }
		public Gtk.TextBuffer buffer { get; set; }
		public bool cursor_visible { get; set; }
		public bool editable { get; set; }
		[NoAccessorMethod]
		public string im_module { owned get; set; }
		public int indent { get; set; }
		public Gtk.InputHints input_hints { get; set; }
		public Gtk.InputPurpose input_purpose { get; set; }
		public Gtk.Justification justification { get; set; }
		public int left_margin { get; set; }
		public bool monospace { get; set; }
		public bool overwrite { get; set; }
		public int pixels_above_lines { get; set; }
		public int pixels_below_lines { get; set; }
		public int pixels_inside_wrap { get; set; }
		[NoAccessorMethod]
		public bool populate_all { get; set; }
		public int right_margin { get; set; }
		public Pango.TabArray tabs { owned get; set; }
		public Gtk.WrapMode wrap_mode { get; set; }
		public virtual signal void backspace ();
		public virtual signal void copy_clipboard ();
		public virtual signal void cut_clipboard ();
		public virtual signal void delete_from_cursor (Gtk.DeleteType type, int count);
		public virtual signal bool extend_selection (Gtk.TextExtendSelection granularity, Gtk.TextIter location, Gtk.TextIter start, Gtk.TextIter end);
		public virtual signal void insert_at_cursor (string str);
		public virtual signal void move_cursor (Gtk.MovementStep step, int count, bool extend_selection);
		public virtual signal void move_viewport (Gtk.ScrollStep p0, int p1);
		public virtual signal void paste_clipboard ();
		public virtual signal void populate_popup (Gtk.Menu popup);
		public virtual signal void preedit_changed (string p0);
		public virtual signal void select_all (bool p0);
		public virtual signal void set_anchor ();
		public virtual signal void toggle_cursor_visible ();
		public virtual signal void toggle_overwrite ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_text_view_accessible_get_type ()")]
	public class TextViewAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.EditableText, Atk.Text, Atk.StreamableContent {
		[CCode (has_construct_function = false)]
		protected TextViewAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class ThemeEngine {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_theming_engine_get_type ()")]
	public class ThemingEngine : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ThemingEngine ();
		public void @get (Gtk.StateFlags state, ...);
		public Gdk.RGBA get_background_color (Gtk.StateFlags state);
		public Gtk.Border get_border (Gtk.StateFlags state);
		public Gdk.RGBA get_border_color (Gtk.StateFlags state);
		public Gdk.RGBA get_color (Gtk.StateFlags state);
		public Gtk.TextDirection get_direction ();
		public unowned Pango.FontDescription get_font (Gtk.StateFlags state);
		public Gtk.JunctionSides get_junction_sides ();
		public Gtk.Border get_margin (Gtk.StateFlags state);
		public Gtk.Border get_padding (Gtk.StateFlags state);
		public unowned Gtk.WidgetPath get_path ();
		public GLib.Value get_property (string property, Gtk.StateFlags state);
		public unowned Gdk.Screen get_screen ();
		public Gtk.StateFlags get_state ();
		public void get_style (...);
		public GLib.Value get_style_property (string property_name);
		public void get_style_valist (va_list args);
		public void get_valist (Gtk.StateFlags state, va_list args);
		public bool has_class (string style_class);
		public bool has_region (string style_region, out Gtk.RegionFlags flags);
		public static unowned Gtk.ThemingEngine load (string name);
		public bool lookup_color (string color_name, out Gdk.RGBA color);
		public static void register_property (string name_space, Gtk.StylePropertyParser? parse_func, GLib.ParamSpec pspec);
		[NoWrapper]
		public virtual void render_activity (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_arrow (Cairo.Context cr, double angle, double x, double y, double size);
		[NoWrapper]
		public virtual void render_background (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_check (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_expander (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_extension (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side);
		[NoWrapper]
		public virtual void render_focus (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_frame (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_frame_gap (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap);
		[NoWrapper]
		public virtual void render_handle (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_icon (Cairo.Context cr, Gdk.Pixbuf pixbuf, double x, double y);
		[NoWrapper]
		public virtual Gdk.Pixbuf render_icon_pixbuf (Gtk.IconSource source, Gtk.IconSize size);
		[NoWrapper]
		public virtual void render_icon_surface (Cairo.Context cr, Cairo.Surface surface, double x, double y);
		[NoWrapper]
		public virtual void render_layout (Cairo.Context cr, double x, double y, Pango.Layout layout);
		[NoWrapper]
		public virtual void render_line (Cairo.Context cr, double x0, double y0, double x1, double y1);
		[NoWrapper]
		public virtual void render_option (Cairo.Context cr, double x, double y, double width, double height);
		[NoWrapper]
		public virtual void render_slider (Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation);
		[Deprecated (since = "3.6")]
		public bool state_is_running (Gtk.StateType state, out double progress);
		[NoAccessorMethod]
		public string name { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toggle_action_get_type ()")]
	public class ToggleAction : Gtk.Action, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public ToggleAction (string name, string? label, string? tooltip, string? stock_id);
		public bool get_active ();
		public bool get_draw_as_radio ();
		public void set_active (bool is_active);
		public void set_draw_as_radio (bool draw_as_radio);
		public bool active { get; set; }
		public bool draw_as_radio { get; set; }
		[HasEmitter]
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toggle_button_get_type ()")]
	public class ToggleButton : Gtk.Button, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToggleButton ();
		public bool get_active ();
		public bool get_inconsistent ();
		public bool get_mode ();
		public void set_active (bool is_active);
		public void set_inconsistent (bool setting);
		public void set_mode (bool draw_indicator);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToggleButton.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToggleButton.with_mnemonic (string label);
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool draw_indicator { get; set; }
		public bool inconsistent { get; set; }
		[HasEmitter]
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_toggle_button_accessible_get_type ()")]
	public class ToggleButtonAccessible : Gtk.ButtonAccessible, Atk.Component, Atk.Action, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ToggleButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toggle_tool_button_get_type ()")]
	public class ToggleToolButton : Gtk.ToolButton, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public ToggleToolButton ();
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public ToggleToolButton.from_stock (string stock_id);
		public bool get_active ();
		public void set_active (bool is_active);
		public bool active { get; set; }
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_button_get_type ()")]
	public class ToolButton : Gtk.ToolItem, Atk.Implementor, Gtk.Buildable, Gtk.Activatable, Gtk.Actionable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public ToolButton (Gtk.Widget? icon_widget, string? label);
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public ToolButton.from_stock (string stock_id);
		public unowned string get_icon_name ();
		public unowned Gtk.Widget get_icon_widget ();
		public unowned string get_label ();
		public unowned Gtk.Widget get_label_widget ();
		public unowned string get_stock_id ();
		public bool get_use_underline ();
		public void set_icon_name (string icon_name);
		public void set_icon_widget (Gtk.Widget icon_widget);
		public void set_label (string label);
		public void set_label_widget (Gtk.Widget label_widget);
		public void set_stock_id (string stock_id);
		public void set_use_underline (bool use_underline);
		public string icon_name { get; set; }
		public Gtk.Widget icon_widget { get; set; }
		public string label { get; set; }
		public Gtk.Widget label_widget { get; set; }
		public string stock_id { get; set; }
		public bool use_underline { get; set; }
		public virtual signal void clicked ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_item_get_type ()")]
	public class ToolItem : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Activatable {
		[CCode (has_construct_function = false)]
		public ToolItem ();
		public Pango.EllipsizeMode get_ellipsize_mode ();
		public bool get_expand ();
		public bool get_homogeneous ();
		public Gtk.IconSize get_icon_size ();
		public bool get_is_important ();
		public Gtk.Orientation get_orientation ();
		public unowned Gtk.Widget get_proxy_menu_item (string menu_item_id);
		public Gtk.ReliefStyle get_relief_style ();
		public float get_text_alignment ();
		public Gtk.Orientation get_text_orientation ();
		public unowned Gtk.SizeGroup get_text_size_group ();
		public Gtk.ToolbarStyle get_toolbar_style ();
		public bool get_use_drag_window ();
		public bool get_visible_horizontal ();
		public bool get_visible_vertical ();
		public void rebuild_menu ();
		public unowned Gtk.Widget retrieve_proxy_menu_item ();
		public void set_expand (bool expand);
		public void set_homogeneous (bool homogeneous);
		public void set_is_important (bool is_important);
		public void set_proxy_menu_item (string menu_item_id, Gtk.Widget menu_item);
		public void set_tooltip_markup (string markup);
		public void set_tooltip_text (string text);
		public void set_use_drag_window (bool use_drag_window);
		public void set_visible_horizontal (bool visible_horizontal);
		public void set_visible_vertical (bool visible_vertical);
		public bool is_important { get; set; }
		public bool visible_horizontal { get; set; }
		public bool visible_vertical { get; set; }
		public virtual signal bool create_menu_proxy ();
		public virtual signal void toolbar_reconfigured ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_item_group_get_type ()")]
	public class ToolItemGroup : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToolItemGroup (string label);
		public bool get_collapsed ();
		public unowned Gtk.ToolItem get_drop_item (int x, int y);
		public Pango.EllipsizeMode get_ellipsize ();
		public Gtk.ReliefStyle get_header_relief ();
		public int get_item_position (Gtk.ToolItem item);
		public unowned string get_label ();
		public unowned Gtk.Widget get_label_widget ();
		public uint get_n_items ();
		public unowned Gtk.ToolItem get_nth_item (uint index);
		public void insert (Gtk.ToolItem item, int position);
		public void set_collapsed (bool collapsed);
		public void set_ellipsize (Pango.EllipsizeMode ellipsize);
		public void set_header_relief (Gtk.ReliefStyle style);
		public void set_item_position (Gtk.ToolItem item, int position);
		public void set_label (string label);
		public void set_label_widget (Gtk.Widget label_widget);
		public bool collapsed { get; set; }
		public Pango.EllipsizeMode ellipsize { get; set; }
		public Gtk.ReliefStyle header_relief { get; set; }
		public string label { get; set; }
		public Gtk.Widget label_widget { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_palette_get_type ()")]
	public class ToolPalette : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToolPalette ();
		public void add_drag_dest (Gtk.Widget widget, Gtk.DestDefaults flags, Gtk.ToolPaletteDragTargets targets, Gdk.DragAction actions);
		public unowned Gtk.Widget get_drag_item (Gtk.SelectionData selection);
		public static Gtk.TargetEntry get_drag_target_group ();
		public static Gtk.TargetEntry get_drag_target_item ();
		public unowned Gtk.ToolItemGroup get_drop_group (int x, int y);
		public unowned Gtk.ToolItem get_drop_item (int x, int y);
		public bool get_exclusive (Gtk.ToolItemGroup group);
		public bool get_expand (Gtk.ToolItemGroup group);
		public int get_group_position (Gtk.ToolItemGroup group);
		public unowned Gtk.Adjustment get_hadjustment ();
		public Gtk.IconSize get_icon_size ();
		public Gtk.ToolbarStyle get_style ();
		public unowned Gtk.Adjustment get_vadjustment ();
		public void set_drag_source (Gtk.ToolPaletteDragTargets targets);
		public void set_exclusive (Gtk.ToolItemGroup group, bool exclusive);
		public void set_expand (Gtk.ToolItemGroup group, bool expand);
		public void set_group_position (Gtk.ToolItemGroup group, int position);
		public void set_icon_size (Gtk.IconSize icon_size);
		public void set_style (Gtk.ToolbarStyle style);
		public void unset_icon_size ();
		public void unset_style ();
		public Gtk.IconSize icon_size { get; set; }
		[NoAccessorMethod]
		public bool icon_size_set { get; set; }
		[NoAccessorMethod]
		public Gtk.ToolbarStyle toolbar_style { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toolbar_get_type ()")]
	public class Toolbar : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.ToolShell, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Toolbar ();
		public int get_drop_index (int x, int y);
		public int get_item_index (Gtk.ToolItem item);
		public int get_n_items ();
		public unowned Gtk.ToolItem get_nth_item (int n);
		public bool get_show_arrow ();
		public void insert (Gtk.ToolItem item, int pos);
		public void set_drop_highlight_item (Gtk.ToolItem tool_item, int index_);
		public void set_icon_size (Gtk.IconSize icon_size);
		public void set_show_arrow (bool show_arrow);
		public void set_style (Gtk.ToolbarStyle style);
		public void unset_icon_size ();
		public void unset_style ();
		public Gtk.IconSize icon_size { get; set; }
		[NoAccessorMethod]
		public bool icon_size_set { get; set; }
		public bool show_arrow { get; set; }
		[NoAccessorMethod]
		public Gtk.ToolbarStyle toolbar_style { get; set; }
		public virtual signal bool focus_home_or_end (bool p0);
		public virtual signal void orientation_changed (Gtk.Orientation orientation);
		public virtual signal bool popup_context_menu (int x, int y, int button_number);
		public virtual signal void style_changed (Gtk.ToolbarStyle style);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tooltip_get_type ()")]
	public class Tooltip : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Tooltip ();
		public void set_custom (Gtk.Widget custom_widget);
		public void set_icon (Gdk.Pixbuf pixbuf);
		public void set_icon_from_gicon (GLib.Icon gicon, Gtk.IconSize size);
		public void set_icon_from_icon_name (string icon_name, Gtk.IconSize size);
		public void set_icon_from_stock (string stock_id, Gtk.IconSize size);
		public void set_markup (string markup);
		public void set_text (string text);
		public void set_tip_area (Gdk.Rectangle rect);
		public static void trigger_tooltip_query (Gdk.Display display);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_toplevel_accessible_get_type ()")]
	public class ToplevelAccessible : Atk.Object {
		[CCode (has_construct_function = false)]
		protected ToplevelAccessible ();
		public unowned GLib.List get_children ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_model_filter_get_type ()")]
	public class TreeModelFilter : GLib.Object, Gtk.TreeModel, Gtk.TreeDragSource {
		[CCode (has_construct_function = false, type = "GtkTreeModel*")]
		public TreeModelFilter (Gtk.TreeModel child_model, Gtk.TreePath? root);
		public void clear_cache ();
		public bool convert_child_iter_to_iter (out Gtk.TreeIter filter_iter, Gtk.TreeIter child_iter);
		public Gtk.TreePath convert_child_path_to_path (Gtk.TreePath child_path);
		public void convert_iter_to_child_iter (out Gtk.TreeIter child_iter, Gtk.TreeIter filter_iter);
		public Gtk.TreePath convert_path_to_child_path (Gtk.TreePath filter_path);
		public unowned Gtk.TreeModel get_model ();
		[NoWrapper]
		public virtual void modify (Gtk.TreeModel child_model, Gtk.TreeIter iter, GLib.Value value, int column);
		public void refilter ();
		public void set_modify_func ([CCode (array_length_pos = 0.9)] GLib.Type[] types, owned Gtk.TreeModelFilterModifyFunc func);
		public void set_visible_column (int column);
		public void set_visible_func (owned Gtk.TreeModelFilterVisibleFunc func);
		[NoWrapper]
		public virtual bool visible (Gtk.TreeModel child_model, Gtk.TreeIter iter);
		[NoAccessorMethod]
		public Gtk.TreeModel child_model { owned get; construct; }
		[NoAccessorMethod]
		public Gtk.TreePath virtual_root { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_model_sort_get_type ()")]
	public class TreeModelSort : GLib.Object, Gtk.TreeModel, Gtk.TreeSortable, Gtk.TreeDragSource {
		[CCode (has_construct_function = false)]
		protected TreeModelSort ();
		public void clear_cache ();
		public bool convert_child_iter_to_iter (out Gtk.TreeIter sort_iter, Gtk.TreeIter child_iter);
		public Gtk.TreePath convert_child_path_to_path (Gtk.TreePath child_path);
		public void convert_iter_to_child_iter (out Gtk.TreeIter child_iter, Gtk.TreeIter sorted_iter);
		public Gtk.TreePath convert_path_to_child_path (Gtk.TreePath sorted_path);
		public unowned Gtk.TreeModel get_model ();
		public bool iter_is_valid (Gtk.TreeIter iter);
		public void reset_default_sort_func ();
		[CCode (has_construct_function = false, type = "GtkTreeModel*")]
		public TreeModelSort.with_model (Gtk.TreeModel child_model);
		public Gtk.TreeModel model { get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", const_cname = "GtkTreePath", copy_function = "gtk_tree_path_copy", type_id = "gtk_tree_path_get_type ()")]
	[Compact]
	[Immutable]
	public class TreePath {
		[CCode (has_construct_function = false)]
		public TreePath ();
		public void append_index (int index_);
		public int compare (Gtk.TreePath b);
		public Gtk.TreePath copy ();
		public void down ();
		[CCode (has_construct_function = false)]
		public TreePath.first ();
		[CCode (has_construct_function = false, sentinel = "-1")]
		public TreePath.from_indices (...);
		[CCode (has_construct_function = false)]
		public TreePath.from_indicesv ([CCode (array_length_pos = 1.9)] int[] indices);
		[CCode (has_construct_function = false)]
		public TreePath.from_string (string path);
		public int get_depth ();
		[CCode (cname = "gtk_tree_path_get_indices_with_depth")]
		public unowned int[] get_indices ();
		public bool is_ancestor (Gtk.TreePath descendant);
		public bool is_descendant (Gtk.TreePath ancestor);
		public void next ();
		public void prepend_index (int index_);
		public bool prev ();
		public string to_string ();
		public bool up ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "gtk_tree_row_reference_copy", type_id = "gtk_tree_row_reference_get_type ()")]
	[Compact]
	[Immutable]
	public class TreeRowReference {
		[CCode (has_construct_function = false)]
		public TreeRowReference (Gtk.TreeModel model, Gtk.TreePath path);
		public Gtk.TreeRowReference copy ();
		public static void deleted (GLib.Object proxy, Gtk.TreePath path);
		public unowned Gtk.TreeModel get_model ();
		public Gtk.TreePath get_path ();
		public static void inserted (GLib.Object proxy, Gtk.TreePath path);
		[CCode (has_construct_function = false)]
		public TreeRowReference.proxy (GLib.Object proxy, Gtk.TreeModel model, Gtk.TreePath path);
		public static void reordered (GLib.Object proxy, Gtk.TreePath path, Gtk.TreeIter iter, int[] new_order);
		public bool valid ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_selection_get_type ()")]
	public class TreeSelection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TreeSelection ();
		public int count_selected_rows ();
		public Gtk.SelectionMode get_mode ();
		public unowned Gtk.TreeSelectionFunc get_select_function ();
		public bool get_selected (out unowned Gtk.TreeModel model, out Gtk.TreeIter iter);
		public GLib.List<Gtk.TreePath> get_selected_rows (out unowned Gtk.TreeModel model);
		public unowned Gtk.TreeView get_tree_view ();
		public void* get_user_data ();
		public bool iter_is_selected (Gtk.TreeIter iter);
		public bool path_is_selected (Gtk.TreePath path);
		public void select_all ();
		public void select_iter (Gtk.TreeIter iter);
		public void select_path (Gtk.TreePath path);
		public void select_range (Gtk.TreePath start_path, Gtk.TreePath end_path);
		public void selected_foreach (Gtk.TreeSelectionForeachFunc func);
		public void set_mode (Gtk.SelectionMode type);
		public void set_select_function (owned Gtk.TreeSelectionFunc func);
		public void unselect_all ();
		public void unselect_iter (Gtk.TreeIter iter);
		public void unselect_path (Gtk.TreePath path);
		public void unselect_range (Gtk.TreePath start_path, Gtk.TreePath end_path);
		public Gtk.SelectionMode mode { get; set; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_store_get_type ()")]
	public class TreeStore : GLib.Object, Gtk.TreeModel, Gtk.TreeDragSource, Gtk.TreeDragDest, Gtk.TreeSortable, Gtk.Buildable {
		[CCode (has_construct_function = false, sentinel = "")]
		public TreeStore (int n_columns, ...);
		public void append (out Gtk.TreeIter iter, Gtk.TreeIter? parent);
		public void clear ();
		public void insert (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int position);
		public void insert_after (out Gtk.TreeIter iter, Gtk.TreeIter? parent, Gtk.TreeIter? sibling);
		public void insert_before (out Gtk.TreeIter iter, Gtk.TreeIter? parent, Gtk.TreeIter? sibling);
		[CCode (sentinel = "-1")]
		public void insert_with_values (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int position, ...);
		public void insert_with_valuesv (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int position, [CCode (array_length_pos = 5.1)] int[] columns, [CCode (array_length_pos = 5.1)] GLib.Value[] values);
		public bool is_ancestor (Gtk.TreeIter iter, Gtk.TreeIter descendant);
		public int iter_depth (Gtk.TreeIter iter);
		public bool iter_is_valid (Gtk.TreeIter iter);
		public void move_after (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		public void move_before (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		[CCode (cname = "gtk_tree_store_newv", has_construct_function = false)]
		public TreeStore.newv ([CCode (array_length_pos = 0.9)] GLib.Type[] types);
		public void prepend (out Gtk.TreeIter iter, Gtk.TreeIter? parent);
		public bool remove (ref Gtk.TreeIter iter);
		public void reorder (Gtk.TreeIter? parent, int new_order);
		[CCode (sentinel = "-1")]
		public void @set (Gtk.TreeIter iter, ...);
		public void set_column_types ([CCode (array_length_pos = 0.9)] GLib.Type[] types);
		public void set_valist (Gtk.TreeIter iter, void* var_args);
		public void set_value (Gtk.TreeIter iter, int column, GLib.Value value);
		public void set_valuesv (Gtk.TreeIter iter, int columns, GLib.Value[] values);
		public void swap (Gtk.TreeIter a, Gtk.TreeIter b);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_view_get_type ()")]
	public class TreeView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TreeView ();
		public int append_column (Gtk.TreeViewColumn column);
		public void collapse_all ();
		public bool collapse_row (Gtk.TreePath path);
		public void columns_autosize ();
		public void convert_bin_window_to_tree_coords (int bx, int by, out int tx, out int ty);
		public void convert_bin_window_to_widget_coords (int bx, int by, out int wx, out int wy);
		public void convert_tree_to_bin_window_coords (int tx, int ty, out int bx, out int by);
		public void convert_tree_to_widget_coords (int tx, int ty, out int wx, out int wy);
		public void convert_widget_to_bin_window_coords (int wx, int wy, out int bx, out int by);
		public void convert_widget_to_tree_coords (int wx, int wy, out int tx, out int ty);
		public Cairo.Surface create_row_drag_icon (Gtk.TreePath path);
		public void enable_model_drag_dest (Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		public void enable_model_drag_source (Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		public void expand_all ();
		public bool expand_row (Gtk.TreePath path, bool open_all);
		public void expand_to_path (Gtk.TreePath path);
		public bool get_activate_on_single_click ();
		public void get_background_area (Gtk.TreePath? path, Gtk.TreeViewColumn? column, out Gdk.Rectangle rect);
		public unowned Gdk.Window get_bin_window ();
		public void get_cell_area (Gtk.TreePath? path, Gtk.TreeViewColumn? column, out Gdk.Rectangle rect);
		public unowned Gtk.TreeViewColumn get_column (int n);
		public GLib.List<weak Gtk.TreeViewColumn> get_columns ();
		public void get_cursor (out Gtk.TreePath? path, out unowned Gtk.TreeViewColumn? focus_column);
		public bool get_dest_row_at_pos (int drag_x, int drag_y, out Gtk.TreePath? path, out Gtk.TreeViewDropPosition pos);
		public void get_drag_dest_row (out Gtk.TreePath? path, out Gtk.TreeViewDropPosition pos);
		public bool get_enable_search ();
		public bool get_enable_tree_lines ();
		public unowned Gtk.TreeViewColumn get_expander_column ();
		public bool get_fixed_height_mode ();
		public Gtk.TreeViewGridLines get_grid_lines ();
		public unowned Gtk.Adjustment get_hadjustment ();
		public bool get_headers_clickable ();
		public bool get_headers_visible ();
		public bool get_hover_expand ();
		public bool get_hover_selection ();
		public int get_level_indentation ();
		public unowned Gtk.TreeModel get_model ();
		public uint get_n_columns ();
		public bool get_path_at_pos (int x, int y, out Gtk.TreePath? path, out unowned Gtk.TreeViewColumn? column, out int cell_x, out int cell_y);
		public bool get_reorderable ();
		public unowned Gtk.TreeViewRowSeparatorFunc get_row_separator_func ();
		public bool get_rubber_banding ();
		public bool get_rules_hint ();
		public int get_search_column ();
		public unowned Gtk.Entry get_search_entry ();
		public unowned Gtk.TreeViewSearchEqualFunc get_search_equal_func ();
		public unowned Gtk.TreeViewSearchPositionFunc get_search_position_func ();
		public unowned Gtk.TreeSelection get_selection ();
		public bool get_show_expanders ();
		public int get_tooltip_column ();
		public bool get_tooltip_context (ref int x, ref int y, bool keyboard_tip, out unowned Gtk.TreeModel model, out unowned Gtk.TreePath path, out Gtk.TreeIter iter);
		public unowned Gtk.Adjustment get_vadjustment ();
		public bool get_visible_range (out Gtk.TreePath start_path, out Gtk.TreePath end_path);
		public void get_visible_rect (out Gdk.Rectangle visible_rect);
		public int insert_column (Gtk.TreeViewColumn column, int position);
		public int insert_column_with_attributes (int position, string? title, Gtk.CellRenderer cell, ...);
		public int insert_column_with_data_func (int position, string title, Gtk.CellRenderer cell, owned Gtk.TreeCellDataFunc func);
		public bool is_blank_at_pos (int x, int y, out Gtk.TreePath path, out Gtk.TreeViewColumn column, out int cell_x, out int cell_y);
		[CCode (cname = "gtk_tree_view_row_expanded")]
		public bool is_row_expanded (Gtk.TreePath path);
		public bool is_rubber_banding_active ();
		public void map_expanded_rows (Gtk.TreeViewMappingFunc func);
		public void move_column_after (Gtk.TreeViewColumn column, Gtk.TreeViewColumn base_column);
		public int remove_column (Gtk.TreeViewColumn column);
		public void scroll_to_cell (Gtk.TreePath? path, Gtk.TreeViewColumn? column, bool use_align, float row_align, float col_align);
		public void scroll_to_point (int tree_x, int tree_y);
		public void set_activate_on_single_click (bool single);
		public void set_column_drag_function (owned Gtk.TreeViewColumnDropFunc func);
		public void set_cursor (Gtk.TreePath path, Gtk.TreeViewColumn? focus_column, bool start_editing);
		public void set_cursor_on_cell (Gtk.TreePath path, Gtk.TreeViewColumn focus_column, Gtk.CellRenderer focus_cell, bool start_editing);
		public void set_destroy_count_func (owned Gtk.TreeDestroyCountFunc func);
		public void set_drag_dest_row (Gtk.TreePath? path, Gtk.TreeViewDropPosition pos);
		public void set_enable_search (bool enable_search);
		public void set_enable_tree_lines (bool enabled);
		public void set_expander_column (Gtk.TreeViewColumn column);
		public void set_fixed_height_mode (bool enable);
		public void set_grid_lines (Gtk.TreeViewGridLines grid_lines);
		public void set_hadjustment (Gtk.Adjustment adjustment);
		public void set_headers_clickable (bool setting);
		public void set_headers_visible (bool headers_visible);
		public void set_hover_expand (bool expand);
		public void set_hover_selection (bool hover);
		public void set_level_indentation (int indentation);
		public void set_model (Gtk.TreeModel? model);
		public void set_reorderable (bool reorderable);
		public void set_row_separator_func (owned Gtk.TreeViewRowSeparatorFunc func);
		public void set_rubber_banding (bool enable);
		public void set_rules_hint (bool setting);
		public void set_search_column (int column);
		public void set_search_entry (Gtk.Entry? entry);
		public void set_search_equal_func (owned Gtk.TreeViewSearchEqualFunc search_equal_func);
		public void set_search_position_func (owned Gtk.TreeViewSearchPositionFunc func);
		public void set_show_expanders (bool enabled);
		public void set_tooltip_cell (Gtk.Tooltip tooltip, Gtk.TreePath path, Gtk.TreeViewColumn column, Gtk.CellRenderer cell);
		public void set_tooltip_column (int column);
		public void set_tooltip_row (Gtk.Tooltip tooltip, Gtk.TreePath path);
		public void set_vadjustment (Gtk.Adjustment adjustment);
		public void unset_rows_drag_dest ();
		public void unset_rows_drag_source ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TreeView.with_model (Gtk.TreeModel model);
		public bool activate_on_single_click { get; set; }
		[NoAccessorMethod]
		public Gtk.TreeViewGridLines enable_grid_lines { get; set; }
		public bool enable_search { get; set; }
		public bool enable_tree_lines { get; set; }
		public Gtk.TreeViewColumn expander_column { get; set; }
		public bool fixed_height_mode { get; set; }
		public bool headers_clickable { get; set; }
		public bool headers_visible { get; set; }
		public bool hover_expand { get; set; }
		public bool hover_selection { get; set; }
		public int level_indentation { get; set; }
		public Gtk.TreeModel model { get; set; }
		public bool reorderable { get; set; }
		public bool rubber_banding { get; set; }
		public bool rules_hint { get; set; }
		public int search_column { get; set; }
		public bool show_expanders { get; set; }
		public int tooltip_column { get; set; }
		public virtual signal void columns_changed ();
		public virtual signal void cursor_changed ();
		public virtual signal bool expand_collapse_cursor_row (bool logical, bool expand, bool open_all);
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		[HasEmitter]
		public virtual signal void row_activated (Gtk.TreePath path, Gtk.TreeViewColumn column);
		public virtual signal void row_collapsed (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal void row_expanded (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal bool select_all ();
		public virtual signal bool select_cursor_parent ();
		public virtual signal bool select_cursor_row (bool start_editing);
		public virtual signal bool start_interactive_search ();
		public virtual signal bool test_collapse_row (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal bool test_expand_row (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal bool toggle_cursor_row ();
		public virtual signal bool unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_tree_view_accessible_get_type ()")]
	public class TreeViewAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Table, Atk.Selection, Gtk.CellAccessibleParent {
		[CCode (has_construct_function = false)]
		protected TreeViewAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_view_column_get_type ()")]
	public class TreeViewColumn : GLib.InitiallyUnowned, Gtk.CellLayout, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TreeViewColumn ();
		public bool cell_get_position (Gtk.CellRenderer cell_renderer, out int x_offset, out int width);
		public void cell_get_size (Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
		public bool cell_is_visible ();
		public void cell_set_cell_data (Gtk.TreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded);
		public void focus_cell (Gtk.CellRenderer cell);
		public float get_alignment ();
		public unowned Gtk.Widget get_button ();
		public bool get_clickable ();
		public bool get_expand ();
		public int get_fixed_width ();
		public int get_max_width ();
		public int get_min_width ();
		public bool get_reorderable ();
		public bool get_resizable ();
		public Gtk.TreeViewColumnSizing get_sizing ();
		public int get_sort_column_id ();
		public bool get_sort_indicator ();
		public Gtk.SortType get_sort_order ();
		public int get_spacing ();
		public unowned string get_title ();
		public unowned Gtk.Widget get_tree_view ();
		public bool get_visible ();
		public unowned Gtk.Widget get_widget ();
		public int get_width ();
		public int get_x_offset ();
		public void queue_resize ();
		public void set_alignment (float xalign);
		public void set_attributes (Gtk.CellRenderer cell_renderer, ...);
		public void set_clickable (bool clickable);
		public void set_expand (bool expand);
		public void set_fixed_width (int fixed_width);
		public void set_max_width (int max_width);
		public void set_min_width (int min_width);
		public void set_reorderable (bool reorderable);
		public void set_resizable (bool resizable);
		public void set_sizing (Gtk.TreeViewColumnSizing type);
		public void set_sort_column_id (int sort_column_id);
		public void set_sort_indicator (bool setting);
		public void set_sort_order (Gtk.SortType order);
		public void set_spacing (int spacing);
		public void set_title (string title);
		public void set_visible (bool visible);
		public void set_widget (Gtk.Widget widget);
		[CCode (has_construct_function = false)]
		public TreeViewColumn.with_area (Gtk.CellArea area);
		[CCode (has_construct_function = false)]
		public TreeViewColumn.with_attributes (string? title, Gtk.CellRenderer cell, ...);
		public float alignment { get; set; }
		[NoAccessorMethod]
		public Gtk.CellArea cell_area { owned get; construct; }
		public bool clickable { get; set; }
		public bool expand { get; set; }
		public int fixed_width { get; set; }
		public int max_width { get; set; }
		public int min_width { get; set; }
		public bool reorderable { get; set; }
		public bool resizable { get; set; }
		public Gtk.TreeViewColumnSizing sizing { get; set; }
		public int sort_column_id { get; set; }
		public bool sort_indicator { get; set; }
		public Gtk.SortType sort_order { get; set; }
		public int spacing { get; set; }
		public string title { get; set; }
		public bool visible { get; set; }
		public Gtk.Widget widget { get; set; }
		public int width { get; }
		public int x_offset { get; }
		[HasEmitter]
		public virtual signal void clicked ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_ui_manager_get_type ()")]
	public class UIManager : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public UIManager ();
		public void add_ui (uint merge_id, string path, string name, string? action, Gtk.UIManagerItemType type, bool top);
		public uint add_ui_from_file (string filename) throws GLib.Error;
		public uint add_ui_from_resource (string resource_path) throws GLib.Error;
		public uint add_ui_from_string (string buffer, ssize_t length) throws GLib.Error;
		public void ensure_update ();
		public unowned Gtk.AccelGroup get_accel_group ();
		public virtual unowned Gtk.Action get_action (string path);
		public unowned GLib.List<Gtk.ActionGroup> get_action_groups ();
		[Deprecated (since = "3.4")]
		public bool get_add_tearoffs ();
		public GLib.SList<weak Gtk.Widget> get_toplevels (Gtk.UIManagerItemType types);
		public string get_ui ();
		public virtual unowned Gtk.Widget get_widget (string path);
		public void insert_action_group (Gtk.ActionGroup action_group, int pos);
		public uint new_merge_id ();
		public void remove_action_group (Gtk.ActionGroup action_group);
		public void remove_ui (uint merge_id);
		[Deprecated (since = "3.4")]
		public void set_add_tearoffs (bool add_tearoffs);
		[Deprecated (since = "3.4")]
		public bool add_tearoffs { get; set; }
		public string ui { owned get; }
		public virtual signal void actions_changed ();
		public virtual signal void add_widget (Gtk.Widget widget);
		public virtual signal void connect_proxy (Gtk.Action action, Gtk.Widget proxy);
		public virtual signal void disconnect_proxy (Gtk.Action action, Gtk.Widget proxy);
		public virtual signal void post_activate (Gtk.Action action);
		public virtual signal void pre_activate (Gtk.Action action);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_vbox_get_type ()")]
	[Deprecated (replacement = "Box", since = "3.2")]
	public class VBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VBox (bool homogeneous, int spacing);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_vbutton_box_get_type ()")]
	public class VButtonBox : Gtk.ButtonBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VButtonBox ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_vpaned_get_type ()")]
	[Deprecated (replacement = "Paned", since = "3.2")]
	public class VPaned : Gtk.Paned, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VPaned ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_vscale_get_type ()")]
	[Deprecated (replacement = "Scale", since = "3.2")]
	public class VScale : Gtk.Scale, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VScale (Gtk.Adjustment? adjustment);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VScale.with_range (double min, double max, double step);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_vscrollbar_get_type ()")]
	[Deprecated (replacement = "Scrollbar", since = "3.2")]
	public class VScrollbar : Gtk.Scrollbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VScrollbar (Gtk.Adjustment? adjustment);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_vseparator_get_type ()")]
	public class VSeparator : Gtk.Separator, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VSeparator ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_viewport_get_type ()")]
	public class Viewport : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Viewport (Gtk.Adjustment? hadjustment, Gtk.Adjustment? vadjustment);
		public unowned Gdk.Window get_bin_window ();
		public unowned Gtk.Adjustment get_hadjustment ();
		public Gtk.ShadowType get_shadow_type ();
		public unowned Gtk.Adjustment get_vadjustment ();
		public unowned Gdk.Window get_view_window ();
		public void set_hadjustment (Gtk.Adjustment adjustment);
		public void set_shadow_type (Gtk.ShadowType type);
		public void set_vadjustment (Gtk.Adjustment adjustment);
		public Gtk.ShadowType shadow_type { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_volume_button_get_type ()")]
	public class VolumeButton : Gtk.ScaleButton, Atk.Implementor, Gtk.Buildable, Gtk.Actionable, Gtk.Activatable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public VolumeButton ();
		[NoAccessorMethod]
		public bool use_symbolic { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_widget_get_type ()")]
	public class Widget : GLib.InitiallyUnowned, Atk.Implementor, Gtk.Buildable {
		public class uint activate_signal;
		[CCode (construct_function = "gtk_widget_new", has_new_function = false)]
		public Widget (...);
		public bool activate ();
		public void add_accelerator (string accel_signal, Gtk.AccelGroup accel_group, uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags);
		public void add_device_events (Gdk.Device device, Gdk.EventMask events);
		public void add_events (int events);
		public void add_mnemonic_label (Gtk.Widget label);
		public uint add_tick_callback (owned Gtk.TickCallback callback);
		[NoWrapper]
		public virtual void adjust_baseline_allocation (int baseline);
		[NoWrapper]
		public virtual void adjust_baseline_request (int minimum_baseline, int natural_baseline);
		[NoWrapper]
		public virtual void adjust_size_allocation (Gtk.Orientation orientation, ref int minimum_size, ref int natural_size, ref int allocated_pos, ref int allocated_size);
		[NoWrapper]
		public virtual void adjust_size_request (Gtk.Orientation orientation, ref int minimum_size, ref int natural_size);
		[CCode (cname = "gtk_widget_class_bind_template_callback_full")]
		public class void bind_template_callback_full (string callback_name, GLib.Callback callback_symbol);
		[CCode (cname = "gtk_widget_class_bind_template_child_full")]
		public class void bind_template_child_full (string name, bool internal_child, ssize_t struct_offset);
		public bool child_focus (Gtk.DirectionType direction);
		[Deprecated (replacement = "get_path", since = "3.0")]
		public void class_path (out uint path_length, out string path, out string path_reversed);
		public virtual bool compute_expand (Gtk.Orientation orientation);
		[CCode (vfunc_name = "compute_expand")]
		[NoWrapper]
		public virtual void compute_expand_internal (out bool hexpand, out bool vexpand);
		public Pango.Context create_pango_context ();
		public Pango.Layout create_pango_layout (string? text);
		public void destroyed (out unowned Gtk.Widget widget_pointer);
		public bool device_is_shadowed (Gdk.Device device);
		[NoWrapper]
		public virtual void dispatch_child_properties_changed ([CCode (array_length_pos = 0.5)] out GLib.ParamSpec[] pspecs);
		[Deprecated (replacement = "StyleContext", since = "3.0")]
		public void ensure_style ();
		public void error_bell ();
		[CCode (cname = "gtk_widget_class_find_style_property")]
		public class unowned GLib.ParamSpec find_style_property (string property_name);
		public void freeze_child_notify ();
		public virtual unowned Atk.Object get_accessible ();
		public unowned GLib.ActionGroup? get_action_group (string prefix);
		public int get_allocated_baseline ();
		public int get_allocated_height ();
		public int get_allocated_width ();
		public void get_allocation (out Gtk.Allocation allocation);
		public unowned Gtk.Widget get_ancestor (GLib.Type widget_type);
		public bool get_app_paintable ();
		public bool get_can_default ();
		public bool get_can_focus ();
		[Deprecated (replacement = "get_preferred_size", since = "3.0")]
		public void get_child_requisition (out Gtk.Requisition requisition);
		public bool get_child_visible ();
		public void get_clip (out Gtk.Allocation clip);
		public unowned Gtk.Clipboard get_clipboard (Gdk.Atom selection);
		public string get_composite_name ();
		public static Gtk.TextDirection get_default_direction ();
		[Deprecated (replacement = "StyleContext, and CssProvider.get_default() to obtain a Gtk.StyleProvider with the default widget style information", since = "3.0")]
		public static unowned Gtk.Style get_default_style ();
		public bool get_device_enabled (Gdk.Device device);
		public Gdk.EventMask get_device_events (Gdk.Device device);
		public Gtk.TextDirection get_direction ();
		public unowned Gdk.Display get_display ();
		public bool get_double_buffered ();
		public int get_events ();
		public unowned Gdk.FrameClock get_frame_clock ();
		public Gtk.Align get_halign ();
		public bool get_has_tooltip ();
		public bool get_has_window ();
		public bool get_hexpand ();
		public bool get_hexpand_set ();
		public bool get_mapped ();
		public int get_margin_bottom ();
		public int get_margin_end ();
		public int get_margin_left ();
		public int get_margin_right ();
		public int get_margin_start ();
		public int get_margin_top ();
		public Gdk.ModifierType get_modifier_mask (Gdk.ModifierIntent intent);
		[Deprecated (replacement = "StyleContext with a custom StyleProvider", since = "3.0")]
		public unowned Gtk.RcStyle get_modifier_style ();
		public bool get_no_show_all ();
		public double get_opacity ();
		public unowned Pango.Context get_pango_context ();
		[CCode (type = "GtkWidget*")]
		public unowned Gtk.Container? get_parent ();
		public unowned Gdk.Window get_parent_window ();
		public unowned Gtk.WidgetPath get_path ();
		[Deprecated (replacement = "Gdk.Window.get_device_position", since = "3.4")]
		public void get_pointer (out int x, out int y);
		public virtual void get_preferred_height (out int minimum_height, out int natural_height);
		public virtual void get_preferred_height_and_baseline_for_width (int width, out int minimum_height, out int natural_height, out int minimum_baseline, out int natural_baseline);
		public virtual void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
		[CCode (vfunc_name = "get_preferred_height_for_width")]
		[NoWrapper]
		public virtual void get_preferred_height_for_width_internal (int width, out int minimum_height, out int natural_height);
		[CCode (vfunc_name = "get_preferred_height")]
		[NoWrapper]
		public virtual void get_preferred_height_internal (out int minimum_height, out int natural_height);
		public void get_preferred_size (out Gtk.Requisition minimum_size, out Gtk.Requisition natural_size);
		public virtual void get_preferred_width (out int minimum_width, out int natural_width);
		public virtual void get_preferred_width_for_height (int height, out int minimum_width, out int natural_width);
		[CCode (vfunc_name = "get_preferred_width_for_height")]
		[NoWrapper]
		public virtual void get_preferred_width_for_height_internal (int height, out int minimum_width, out int natural_width);
		[CCode (vfunc_name = "get_preferred_width")]
		[NoWrapper]
		public virtual void get_preferred_width_internal (out int minimum_width, out int natural_width);
		public bool get_realized ();
		public bool get_receives_default ();
		public virtual Gtk.SizeRequestMode get_request_mode ();
		public Gtk.Requisition get_requisition ();
		public unowned Gdk.Window get_root_window ();
		public int get_scale_factor ();
		public unowned Gdk.Screen get_screen ();
		public bool get_sensitive ();
		public unowned Gtk.Settings get_settings ();
		public void get_size_request (out int width, out int height);
		[Deprecated (replacement = "get_state_flags", since = "3.0")]
		public Gtk.StateType get_state ();
		public Gtk.StateFlags get_state_flags ();
		[Deprecated (replacement = "StyleContext", since = "3.0")]
		public unowned Gtk.Style get_style ();
		public unowned Gtk.StyleContext get_style_context ();
		public bool get_support_multidevice ();
		public unowned GLib.Object get_template_child (GLib.Type widget_type, string name);
		public string get_tooltip_markup ();
		public string get_tooltip_text ();
		public unowned Gtk.Window get_tooltip_window ();
		public unowned Gtk.Widget get_toplevel ();
		public Gtk.Align get_valign ();
		public Gtk.Align get_valign_with_baseline ();
		public bool get_vexpand ();
		public bool get_vexpand_set ();
		public bool get_visible ();
		public unowned Gdk.Visual get_visual ();
		public unowned Gdk.Window get_window ();
		public void grab_default ();
		public bool has_grab ();
		[Deprecated (replacement = "StyleContext", since = "3.0")]
		public bool has_rc_style ();
		public bool has_screen ();
		public bool has_visible_focus ();
		public bool hide_on_delete ();
		public bool in_destruction ();
		public void init_template ();
		public void input_shape_combine_region (Cairo.Region? region);
		public void insert_action_group (string name, GLib.ActionGroup group);
		[CCode (cname = "gtk_widget_class_install_style_property")]
		public class void install_style_property (GLib.ParamSpec pspec);
		[CCode (cname = "gtk_widget_class_install_style_property_parser")]
		public class void install_style_property_parser (GLib.ParamSpec pspec, Gtk.RcPropertyParser parser);
		public bool intersect (Gdk.Rectangle area, Gdk.Rectangle? intersection);
		public bool is_ancestor (Gtk.Widget ancestor);
		public bool is_composited ();
		public bool is_sensitive ();
		public bool is_toplevel ();
		public bool is_visible ();
		public GLib.List<weak GLib.Closure> list_accel_closures ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string*[] list_action_prefixes ();
		public GLib.List<weak Gtk.Widget> list_mnemonic_labels ();
		[CCode (cname = "gtk_widget_class_list_style_properties")]
		public class unowned GLib.ParamSpec list_style_properties (uint n_properties);
		[Deprecated (replacement = "override_background_color", since = "3.0")]
		public void modify_base (Gtk.StateType state, Gdk.Color? color);
		[Deprecated (replacement = "override_background_color", since = "3.0")]
		public void modify_bg (Gtk.StateType state, Gdk.Color? color);
		[Deprecated (replacement = "override_cursor", since = "3.0")]
		public void modify_cursor (Gdk.Color? primary, Gdk.Color? secondary);
		[Deprecated (replacement = "override_color", since = "3.0")]
		public void modify_fg (Gtk.StateType state, Gdk.Color? color);
		[Deprecated (replacement = "override_font", since = "3.0")]
		public void modify_font (Pango.FontDescription? font_desc);
		[Deprecated (replacement = "StyleContext with a custom StyleProvider", since = "3.0")]
		public void modify_style (Gtk.RcStyle style);
		[Deprecated (replacement = "override_color", since = "3.0")]
		public void modify_text (Gtk.StateType state, Gdk.Color? color);
		public void override_background_color (Gtk.StateFlags state, Gdk.RGBA? color);
		public void override_color (Gtk.StateFlags state, Gdk.RGBA? color);
		public void override_cursor (Gdk.RGBA? cursor, Gdk.RGBA? secondary_cursor);
		public void override_font (Pango.FontDescription? font_desc);
		public void override_symbolic_color (string name, Gdk.RGBA? color);
		[Deprecated (replacement = "get_path", since = "3.0")]
		public void path (out uint path_length, out string path, out string path_reversed);
		public static void pop_composite_child ();
		public static void push_composite_child ();
		public void queue_compute_expand ();
		public void queue_draw ();
		public void queue_draw_area (int x, int y, int width, int height);
		public virtual void queue_draw_region (Cairo.Region region);
		public void queue_resize ();
		public void queue_resize_no_redraw ();
		public Cairo.Region region_intersect (Cairo.Region region);
		public void register_window (Gdk.Window window);
		public bool remove_accelerator (Gtk.AccelGroup accel_group, uint accel_key, Gdk.ModifierType accel_mods);
		public void remove_mnemonic_label (Gtk.Widget label);
		public void remove_tick_callback (uint id);
		public Gdk.Pixbuf render_icon (string stock_id, Gtk.IconSize size, string? detail);
		public Gdk.Pixbuf render_icon_pixbuf (string stock_id, Gtk.IconSize size);
		public void reparent (Gtk.Widget new_parent);
		[Deprecated (replacement = "reset_style", since = "3.0")]
		public void reset_rc_styles ();
		public void reset_style ();
		public int send_expose (Gdk.Event event);
		public bool send_focus_change (Gdk.Event event);
		public void set_accel_path (string accel_path, Gtk.AccelGroup accel_group);
		[CCode (cname = "gtk_widget_class_set_accessible_role")]
		public class void set_accessible_role (Atk.Role role);
		[CCode (cname = "gtk_widget_class_set_accessible_type")]
		public class void set_accessible_type (GLib.Type type);
		public void set_allocation (Gtk.Allocation allocation);
		public void set_app_paintable (bool app_paintable);
		public void set_can_default (bool can_default);
		public void set_can_focus (bool can_focus);
		public void set_child_visible (bool is_visible);
		public void set_clip (Gtk.Allocation clip);
		public void set_composite_name (string name);
		[CCode (cname = "gtk_widget_class_set_connect_func")]
		public class void set_connect_func (Gtk.BuilderConnectFunc connect_func, void* connect_data, GLib.DestroyNotify connect_data_destroy);
		public static void set_default_direction (Gtk.TextDirection dir);
		public void set_device_enabled (Gdk.Device device, bool enabled);
		public void set_device_events (Gdk.Device device, Gdk.EventMask events);
		public void set_direction (Gtk.TextDirection dir);
		public void set_double_buffered (bool double_buffered);
		public void set_events (int events);
		public void set_halign (Gtk.Align align);
		public void set_has_tooltip (bool has_tooltip);
		public void set_has_window (bool has_window);
		public void set_hexpand (bool expand);
		public void set_hexpand_set (bool @set);
		public void set_mapped (bool mapped);
		public void set_margin_bottom (int margin);
		public void set_margin_end (int margin);
		public void set_margin_left (int margin);
		public void set_margin_right (int margin);
		public void set_margin_start (int margin);
		public void set_margin_top (int margin);
		public void set_no_show_all (bool no_show_all);
		public void set_opacity (double opacity);
		public void set_parent ([CCode (type = "GtkWidget*")] Gtk.Container parent);
		public void set_parent_window (Gdk.Window parent_window);
		public void set_realized (bool realized);
		public void set_receives_default (bool receives_default);
		public void set_redraw_on_allocate (bool redraw_on_allocate);
		public void set_sensitive (bool sensitive);
		public void set_size_request (int width, int height);
		[Deprecated (replacement = "set_state_flags", since = "3.0")]
		public void set_state (Gtk.StateType state);
		public void set_state_flags (Gtk.StateFlags flags, bool clear);
		[Deprecated (replacement = "StyleContext", since = "3.0")]
		public void set_style (Gtk.Style? style);
		public void set_support_multidevice (bool support_multidevice);
		[CCode (cname = "gtk_widget_class_set_template")]
		public class void set_template (GLib.Bytes template_bytes);
		[CCode (cname = "gtk_widget_class_set_template_from_resource")]
		public class void set_template_from_resource (string resource_name);
		public void set_tooltip_markup (string markup);
		public void set_tooltip_text (string text);
		public void set_tooltip_window (Gtk.Window custom_window);
		public void set_valign (Gtk.Align align);
		public void set_vexpand (bool expand);
		public void set_vexpand_set (bool @set);
		public void set_visible (bool visible);
		public void set_visual (Gdk.Visual visual);
		public void set_window (owned Gdk.Window window);
		public void shape_combine_region (Cairo.Region? region);
		public virtual void show_all ();
		public void show_now ();
		public void size_allocate_with_baseline (Gtk.Allocation allocation, int baseline);
		[Deprecated (replacement = "StyleContext", since = "3.0")]
		public void style_attach ();
		public void style_get (...);
		public void style_get_property (string property_name, ref GLib.Value value);
		public void style_get_valist (string first_property_name, va_list var_args);
		public void thaw_child_notify ();
		public bool translate_coordinates (Gtk.Widget dest_widget, int src_x, int src_y, out int dest_x, out int dest_y);
		public void trigger_tooltip_query ();
		public void unparent ();
		public void unregister_window (Gdk.Window window);
		public void unset_state_flags (Gtk.StateFlags flags);
		public bool app_paintable { get; set; }
		public bool can_default { get; set; }
		[NoAccessorMethod]
		public bool can_focus { get; set; }
		[NoAccessorMethod]
		public bool composite_child { get; }
		public bool double_buffered { get; set; }
		public Gdk.EventMask events { get; set; }
		[NoAccessorMethod]
		public bool expand { get; set; }
		public Gtk.Align halign { get; set; }
		[NoAccessorMethod]
		public bool has_default { get; set; }
		[NoAccessorMethod]
		public bool has_focus { get; set; }
		public bool has_tooltip { get; set; }
		[NoAccessorMethod]
		public int height_request { get; set; }
		public bool hexpand { get; set; }
		public bool hexpand_set { get; set; }
		[NoAccessorMethod]
		public bool is_focus { get; set; }
		[NoAccessorMethod]
		public int margin { get; set; }
		public int margin_bottom { get; set; }
		public int margin_end { get; set; }
		public int margin_left { get; set; }
		public int margin_right { get; set; }
		public int margin_start { get; set; }
		public int margin_top { get; set; }
		public string name { get; set; }
		public bool no_show_all { get; set; }
		public double opacity { get; set; }
		public Gtk.Container parent { get; set; }
		public bool receives_default { get; set; }
		public int scale_factor { get; }
		public bool sensitive { get; set; }
		public Gtk.Style style { get; set; }
		public string tooltip_markup { owned get; set; }
		public string tooltip_text { owned get; set; }
		public Gtk.Align valign { get; set; }
		public bool vexpand { get; set; }
		public bool vexpand_set { get; set; }
		public bool visible { get; set; }
		[NoAccessorMethod]
		public int width_request { get; set; }
		public virtual signal void accel_closures_changed ();
		public virtual signal bool button_press_event (Gdk.EventButton event);
		public virtual signal bool button_release_event (Gdk.EventButton event);
		[HasEmitter]
		public virtual signal bool can_activate_accel (uint signal_id);
		[HasEmitter]
		public virtual signal void child_notify (GLib.ParamSpec child_property);
		public virtual signal void composited_changed ();
		public virtual signal bool configure_event (Gdk.EventConfigure event);
		public virtual signal bool damage_event (Gdk.EventExpose event);
		public virtual signal bool delete_event (Gdk.EventAny event);
		[HasEmitter]
		public virtual signal void destroy ();
		public virtual signal bool destroy_event (Gdk.EventAny event);
		public virtual signal void direction_changed (Gtk.TextDirection previous_direction);
		public virtual signal void drag_begin (Gdk.DragContext context);
		public virtual signal void drag_data_delete (Gdk.DragContext context);
		public virtual signal void drag_data_get (Gdk.DragContext context, Gtk.SelectionData selection_data, uint info, uint time_);
		public virtual signal void drag_data_received (Gdk.DragContext context, int x, int y, Gtk.SelectionData selection_data, uint info, uint time_);
		public virtual signal bool drag_drop (Gdk.DragContext context, int x, int y, uint time_);
		public virtual signal void drag_end (Gdk.DragContext context);
		public virtual signal bool drag_failed (Gdk.DragContext context, Gtk.DragResult result);
		public virtual signal void drag_leave (Gdk.DragContext context, uint time_);
		public virtual signal bool drag_motion (Gdk.DragContext context, int x, int y, uint time_);
		[HasEmitter]
		public virtual signal bool draw (Cairo.Context cr);
		public virtual signal bool enter_notify_event (Gdk.EventCrossing event);
		[HasEmitter]
		public virtual signal bool event (Gdk.Event event);
		public virtual signal void event_after (Gdk.Event p0);
		public virtual signal bool focus (Gtk.DirectionType direction);
		public virtual signal bool focus_in_event (Gdk.EventFocus event);
		public virtual signal bool focus_out_event (Gdk.EventFocus event);
		public virtual signal bool grab_broken_event (Gdk.EventGrabBroken event);
		[HasEmitter]
		public virtual signal void grab_focus ();
		public virtual signal void grab_notify (bool was_grabbed);
		[HasEmitter]
		public virtual signal void hide ();
		public virtual signal void hierarchy_changed (Gtk.Widget? previous_toplevel);
		public virtual signal bool key_press_event (Gdk.EventKey event);
		public virtual signal bool key_release_event (Gdk.EventKey event);
		[HasEmitter]
		public virtual signal bool keynav_failed (Gtk.DirectionType direction);
		public virtual signal bool leave_notify_event (Gdk.EventCrossing event);
		[HasEmitter]
		public virtual signal void map ();
		public virtual signal bool map_event (Gdk.EventAny event);
		[HasEmitter]
		public virtual signal bool mnemonic_activate (bool group_cycling);
		public virtual signal bool motion_notify_event (Gdk.EventMotion event);
		public virtual signal void move_focus (Gtk.DirectionType direction);
		public virtual signal void parent_set (Gtk.Widget? previous_parent);
		public virtual signal bool popup_menu ();
		public virtual signal bool property_notify_event (Gdk.EventProperty event);
		public virtual signal bool proximity_in_event (Gdk.EventProximity event);
		public virtual signal bool proximity_out_event (Gdk.EventProximity event);
		public virtual signal bool query_tooltip (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip);
		[HasEmitter]
		public virtual signal void realize ();
		public virtual signal void screen_changed (Gdk.Screen previous_screen);
		public virtual signal bool scroll_event (Gdk.EventScroll event);
		public virtual signal bool selection_clear_event (Gdk.EventSelection event);
		public virtual signal void selection_get (Gtk.SelectionData selection_data, uint info, uint time_);
		public virtual signal bool selection_notify_event (Gdk.EventSelection event);
		public virtual signal void selection_received (Gtk.SelectionData selection_data, uint time_);
		public virtual signal bool selection_request_event (Gdk.EventSelection event);
		[HasEmitter]
		public virtual signal void show ();
		public virtual signal bool show_help (Gtk.WidgetHelpType help_type);
		[HasEmitter]
		public virtual signal void size_allocate (Gtk.Allocation allocation);
		public virtual signal void state_changed (Gtk.StateType previous_state);
		public virtual signal void state_flags_changed (Gtk.StateFlags previous_state_flags);
		public virtual signal void style_set (Gtk.Style? previous_style);
		public virtual signal void style_updated ();
		public virtual signal bool touch_event (Gdk.Event event);
		[HasEmitter]
		public virtual signal void unmap ();
		public virtual signal bool unmap_event (Gdk.EventAny event);
		[HasEmitter]
		public virtual signal void unrealize ();
		public virtual signal bool visibility_notify_event (Gdk.EventVisibility event);
		public virtual signal bool window_state_event (Gdk.EventWindowState event);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_widget_accessible_get_type ()")]
	public class WidgetAccessible : Gtk.Accessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected WidgetAccessible ();
		[NoWrapper]
		public virtual void notify_gtk (GLib.Object object, GLib.ParamSpec pspec);
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_widget_path_ref", type_id = "gtk_widget_path_get_type ()", unref_function = "gtk_widget_path_unref")]
	[Compact]
	public class WidgetPath {
		[CCode (has_construct_function = false)]
		public WidgetPath ();
		public int append_for_widget (Gtk.Widget widget);
		public int append_type (GLib.Type type);
		public int append_with_siblings (Gtk.WidgetPath siblings, uint sibling_index);
		public Gtk.WidgetPath copy ();
		public GLib.Type get_object_type ();
		public bool has_parent (GLib.Type type);
		public bool is_type (GLib.Type type);
		public void iter_add_class (int pos, string name);
		public void iter_add_region (int pos, string name, Gtk.RegionFlags flags);
		public void iter_clear_classes (int pos);
		public void iter_clear_regions (int pos);
		public unowned string iter_get_name (int pos);
		public GLib.Type iter_get_object_type (int pos);
		public uint iter_get_sibling_index (int pos);
		public unowned Gtk.WidgetPath iter_get_siblings (int pos);
		public Gtk.StateFlags iter_get_state (int pos);
		public bool iter_has_class (int pos, string name);
		public bool iter_has_name (int pos, string name);
		public bool iter_has_qclass (int pos, GLib.Quark qname);
		public bool iter_has_qname (int pos, GLib.Quark qname);
		public bool iter_has_qregion (int pos, GLib.Quark qname, out Gtk.RegionFlags flags);
		public bool iter_has_region (int pos, string name, out Gtk.RegionFlags flags);
		public GLib.SList<weak string> iter_list_classes (int pos);
		public GLib.SList<weak string> iter_list_regions (int pos);
		public void iter_remove_class (int pos, string name);
		public void iter_remove_region (int pos, string name);
		public void iter_set_name (int pos, string name);
		public void iter_set_object_type (int pos, GLib.Type type);
		public void iter_set_state (int pos, Gtk.StateFlags state);
		public int length ();
		public void prepend_type (GLib.Type type);
		public string to_string ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_window_get_type ()")]
	public class Window : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Window (Gtk.WindowType type = Gtk.WindowType.TOPLEVEL);
		public bool activate_default ();
		public bool activate_focus ();
		public bool activate_key (Gdk.EventKey event);
		public void add_accel_group (Gtk.AccelGroup accel_group);
		public void add_mnemonic (uint keyval, Gtk.Widget target);
		public void begin_move_drag (int button, int root_x, int root_y, uint32 timestamp);
		public void begin_resize_drag (Gdk.WindowEdge edge, int button, int root_x, int root_y, uint32 timestamp);
		public void close ();
		public void deiconify ();
		public void fullscreen ();
		public bool get_accept_focus ();
		public unowned Gtk.Application get_application ();
		public unowned Gtk.Widget get_attached_to ();
		public bool get_decorated ();
		public static GLib.List<weak Gdk.Pixbuf> get_default_icon_list ();
		public static unowned string get_default_icon_name ();
		public void get_default_size (out int width, out int height);
		public unowned Gtk.Widget get_default_widget ();
		public bool get_deletable ();
		public bool get_destroy_with_parent ();
		public unowned Gtk.Widget get_focus ();
		public bool get_focus_on_map ();
		public bool get_focus_visible ();
		public Gdk.Gravity get_gravity ();
		public unowned Gtk.WindowGroup get_group ();
		public bool get_has_resize_grip ();
		public bool get_hide_titlebar_when_maximized ();
		public unowned Gdk.Pixbuf get_icon ();
		public GLib.List<weak Gdk.Pixbuf> get_icon_list ();
		public unowned string get_icon_name ();
		public Gdk.ModifierType get_mnemonic_modifier ();
		public bool get_mnemonics_visible ();
		public bool get_modal ();
		public double get_opacity ();
		public void get_position (out int root_x, out int root_y);
		public bool get_resizable ();
		public bool get_resize_grip_area (out Gdk.Rectangle rect);
		public unowned string get_role ();
		public unowned Gdk.Screen get_screen ();
		public void get_size (out int width, out int height);
		public bool get_skip_pager_hint ();
		public bool get_skip_taskbar_hint ();
		public unowned string get_title ();
		public unowned Gtk.Widget get_titlebar ();
		public unowned Gtk.Window get_transient_for ();
		public Gdk.WindowTypeHint get_type_hint ();
		public bool get_urgency_hint ();
		public Gtk.WindowType get_window_type ();
		public bool has_group ();
		public void iconify ();
		public static GLib.List<weak Gtk.Window> list_toplevels ();
		public void maximize ();
		public bool mnemonic_activate (uint keyval, Gdk.ModifierType modifier);
		public void move (int x, int y);
		public bool parse_geometry (string geometry);
		public void present ();
		public void present_with_time (uint32 timestamp);
		public bool propagate_key_event (Gdk.EventKey event);
		public void remove_accel_group (Gtk.AccelGroup accel_group);
		public void remove_mnemonic (uint keyval, Gtk.Widget target);
		public void reshow_with_initial_size ();
		public void resize (int width, int height);
		public bool resize_grip_is_visible ();
		public void resize_to_geometry (int width, int height);
		public void set_accept_focus (bool setting);
		public void set_application (Gtk.Application application);
		public void set_attached_to (Gtk.Widget attach_widget);
		public static void set_auto_startup_notification (bool setting);
		public void set_decorated (bool setting);
		public void set_default (Gtk.Widget default_widget);
		public void set_default_geometry (int width, int height);
		public static void set_default_icon (Gdk.Pixbuf icon);
		public static bool set_default_icon_from_file (string filename) throws GLib.Error;
		public static void set_default_icon_list (owned GLib.List<weak Gdk.Pixbuf> list);
		public static void set_default_icon_name (string name);
		public void set_default_size (int width, int height);
		public void set_deletable (bool setting);
		public void set_destroy_with_parent (bool setting);
		public void set_focus_on_map (bool setting);
		public void set_focus_visible (bool setting);
		public void set_geometry_hints (Gtk.Widget geometry_widget, Gdk.Geometry geometry, Gdk.WindowHints geom_mask);
		public void set_gravity (Gdk.Gravity gravity);
		public void set_has_resize_grip (bool value);
		public void set_has_user_ref_count (bool setting);
		public void set_hide_titlebar_when_maximized (bool setting);
		public void set_icon (Gdk.Pixbuf icon);
		public bool set_icon_from_file (string filename) throws GLib.Error;
		public void set_icon_list (GLib.List<Gdk.Pixbuf> list);
		public void set_icon_name (string name);
		public static void set_interactive_debugging (bool enable);
		public void set_keep_above (bool setting);
		public void set_keep_below (bool setting);
		public void set_mnemonic_modifier (Gdk.ModifierType modifier);
		public void set_mnemonics_visible (bool setting);
		public void set_modal (bool modal);
		public void set_opacity (double opacity);
		public void set_position (Gtk.WindowPosition position);
		public void set_resizable (bool resizable);
		public void set_role (string role);
		public void set_screen (Gdk.Screen screen);
		public void set_skip_pager_hint (bool setting);
		public void set_skip_taskbar_hint (bool setting);
		public void set_startup_id (string startup_id);
		public void set_title (string title);
		public void set_titlebar (Gtk.Widget titlebar);
		public void set_transient_for (Gtk.Window parent);
		public void set_type_hint (Gdk.WindowTypeHint hint);
		public void set_urgency_hint (bool setting);
		public void set_wmclass (string wmclass_name, string wmclass_class);
		public void stick ();
		public void unfullscreen ();
		public void unmaximize ();
		public void unstick ();
		public bool accept_focus { get; set; }
		public Gtk.Application application { get; set; }
		public Gtk.Widget attached_to { get; set construct; }
		public bool decorated { get; set; }
		[NoAccessorMethod]
		public int default_height { get; set; }
		[NoAccessorMethod]
		public int default_width { get; set; }
		public bool deletable { get; set; }
		public bool destroy_with_parent { get; set; }
		public bool focus_on_map { get; set; }
		public bool focus_visible { get; set; }
		public Gdk.Gravity gravity { get; set; }
		public bool has_resize_grip { get; set; }
		[NoAccessorMethod]
		public bool has_toplevel_focus { get; }
		public bool hide_titlebar_when_maximized { get; set; }
		public Gdk.Pixbuf icon { get; set; }
		public string icon_name { get; set; }
		[NoAccessorMethod]
		public bool is_active { get; }
		[NoAccessorMethod]
		public bool is_maximized { get; }
		public bool mnemonics_visible { get; set; }
		public bool modal { get; set; }
		public bool resizable { get; set; }
		[NoAccessorMethod]
		public bool resize_grip_visible { get; }
		public string role { get; set; }
		public Gdk.Screen screen { get; set; }
		public bool skip_pager_hint { get; set; }
		public bool skip_taskbar_hint { get; set; }
		public string startup_id { set; }
		public string title { get; set; }
		public Gtk.Window transient_for { get; set construct; }
		[NoAccessorMethod]
		public Gtk.WindowType type { get; construct; }
		public Gdk.WindowTypeHint type_hint { get; set; }
		public bool urgency_hint { get; set; }
		[NoAccessorMethod]
		public Gtk.WindowPosition window_position { get; set; }
		[CCode (cname = "activate_default")]
		[Experimental]
		public virtual signal void default_activated ();
		public virtual signal bool enable_debugging (bool toggle);
		[CCode (cname = "activate_focus")]
		[Experimental]
		public virtual signal void focus_activated ();
		public virtual signal void keys_changed ();
		[HasEmitter]
		public virtual signal void set_focus (Gtk.Widget? focus);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_window_accessible_get_type ()")]
	public class WindowAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Window {
		[CCode (has_construct_function = false)]
		protected WindowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Compact]
	public class WindowGeometryInfo {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_window_group_get_type ()")]
	public class WindowGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public WindowGroup ();
		public void add_window (Gtk.Window window);
		public unowned Gtk.Widget get_current_device_grab (Gdk.Device device);
		public unowned Gtk.Widget get_current_grab ();
		public GLib.List<weak Gtk.Window> list_windows ();
		public void remove_window (Gtk.Window window);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkActionableInterface")]
	public interface Actionable : Gtk.Widget {
		public abstract unowned string get_action_name ();
		public abstract unowned GLib.Variant get_action_target_value ();
		public abstract void set_action_name (string action_name);
		public void set_action_target (string format_string, ...);
		public abstract void set_action_target_value (GLib.Variant target_value);
		public void set_detailed_action_name (string detailed_action_name);
		public string action_name { get; set; }
		[NoAccessorMethod]
		public GLib.Variant action_target { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface Activatable : GLib.Object {
		public void do_set_related_action (Gtk.Action action);
		public unowned Gtk.Action get_related_action ();
		public bool get_use_action_appearance ();
		public void set_related_action (Gtk.Action action);
		public void set_use_action_appearance (bool use_appearance);
		public abstract void sync_action_properties (Gtk.Action action);
		[NoWrapper]
		public abstract void update (Gtk.Action action, string property_name);
		public Gtk.Action related_action { get; set; }
		public bool use_action_appearance { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface AppChooser : Gtk.Widget {
		public GLib.AppInfo get_app_info ();
		public string get_content_type ();
		public void refresh ();
		public string content_type { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface Buildable : GLib.Object {
		public abstract void add_child (Gtk.Builder builder, GLib.Object child, string? type);
		public abstract GLib.Object construct_child (Gtk.Builder builder, string name);
		public abstract void custom_finished (Gtk.Builder builder, GLib.Object? child, string tagname, void* data);
		public abstract void custom_tag_end (Gtk.Builder builder, GLib.Object? child, string tagname, out void* data);
		public abstract bool custom_tag_start (Gtk.Builder builder, GLib.Object? child, string tagname, out GLib.MarkupParser parser, out void* data);
		public abstract unowned GLib.Object get_internal_child (Gtk.Builder builder, string childname);
		public abstract unowned string get_name ();
		public abstract void parser_finished (Gtk.Builder builder);
		public abstract void set_buildable_property (Gtk.Builder builder, string name, GLib.Value value);
		public abstract void set_name (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface CellAccessibleParent : GLib.Object {
		public abstract void activate (Gtk.CellAccessible cell);
		public abstract void edit (Gtk.CellAccessible cell);
		public abstract void expand_collapse (Gtk.CellAccessible cell);
		public abstract void get_cell_area (Gtk.CellAccessible cell, Gdk.Rectangle cell_rect);
		public abstract void get_cell_extents (Gtk.CellAccessible cell, int x, int y, int width, int height, Atk.CoordType coord_type);
		public abstract int get_child_index (Gtk.CellAccessible cell);
		public abstract Gtk.CellRendererState get_renderer_state (Gtk.CellAccessible cell);
		public abstract bool grab_focus (Gtk.CellAccessible cell);
		public abstract void update_relationset (Gtk.CellAccessible cell, Atk.RelationSet relationset);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface CellEditable : Gtk.Widget {
		public abstract void start_editing (Gdk.Event event);
		[NoAccessorMethod]
		public bool editing_canceled { get; set; }
		[HasEmitter]
		public signal void editing_done ();
		[HasEmitter]
		public signal void remove_widget ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface CellLayout : GLib.Object {
		public abstract void add_attribute (Gtk.CellRenderer cell, string attribute, int column);
		public abstract void clear ();
		public abstract void clear_attributes (Gtk.CellRenderer cell);
		public abstract unowned Gtk.CellArea get_area ();
		public abstract GLib.List<weak Gtk.CellRenderer> get_cells ();
		public abstract void pack_end (Gtk.CellRenderer cell, bool expand);
		public abstract void pack_start (Gtk.CellRenderer cell, bool expand);
		public abstract void reorder (Gtk.CellRenderer cell, int position);
		public void set_attributes (Gtk.CellRenderer cell, ...);
		public abstract void set_cell_data_func (Gtk.CellRenderer cell, owned Gtk.CellLayoutDataFunc func);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkColorChooserInterface")]
	public interface ColorChooser : GLib.Object {
		public abstract void add_palette (Gtk.Orientation orientation, int colors_per_line, [CCode (array_length_pos = 2.9)] Gdk.RGBA[]? colors);
		public abstract Gdk.RGBA get_rgba ();
		public bool get_use_alpha ();
		public abstract void set_rgba (Gdk.RGBA color);
		public void set_use_alpha (bool use_alpha);
		public Gdk.RGBA rgba { get; set; }
		public bool use_alpha { get; set; }
		public signal void color_activated (Gdk.RGBA color);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkEditableInterface")]
	public interface Editable : GLib.Object {
		public void copy_clipboard ();
		public void cut_clipboard ();
		public void delete_selection ();
		[NoWrapper]
		public abstract void do_delete_text (int start_pos, int end_pos);
		[NoWrapper]
		public abstract void do_insert_text (string new_text, int new_text_length, ref int position);
		public abstract string get_chars (int start_pos = 0, int end_pos = -1);
		public bool get_editable ();
		public abstract int get_position ();
		public abstract bool get_selection_bounds (out int start_pos, out int end_pos);
		public void paste_clipboard ();
		[CCode (vfunc_name = "set_selection_bounds")]
		public abstract void select_region (int start_pos, int end_pos);
		public void set_editable (bool is_editable);
		public abstract void set_position (int position);
		public signal void changed ();
		[HasEmitter]
		public signal void delete_text (int start_pos, int end_pos);
		[HasEmitter]
		public signal void insert_text (string new_text, int new_text_length, ref int position);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface FileChooser : Gtk.Widget {
		public void add_filter (owned Gtk.FileFilter filter);
		public bool add_shortcut_folder (string folder) throws GLib.Error;
		public bool add_shortcut_folder_uri (string uri) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public Gtk.FileChooserAction get_action ();
		public bool get_create_folders ();
		public string get_current_folder ();
		public GLib.File get_current_folder_file ();
		public string get_current_folder_uri ();
		public string get_current_name ();
		public bool get_do_overwrite_confirmation ();
		public unowned Gtk.Widget get_extra_widget ();
		public GLib.File get_file ();
		public string get_filename ();
		public GLib.SList<string> get_filenames ();
		public GLib.SList<GLib.File> get_files ();
		public unowned Gtk.FileFilter get_filter ();
		public bool get_local_only ();
		public GLib.File get_preview_file ();
		public string get_preview_filename ();
		public string get_preview_uri ();
		public unowned Gtk.Widget get_preview_widget ();
		public bool get_preview_widget_active ();
		public bool get_select_multiple ();
		public bool get_show_hidden ();
		public string get_uri ();
		public GLib.SList<string> get_uris ();
		public bool get_use_preview_label ();
		public GLib.SList<weak Gtk.FileFilter> list_filters ();
		public GLib.SList<string>? list_shortcut_folder_uris ();
		public GLib.SList<string>? list_shortcut_folders ();
		public void remove_filter (Gtk.FileFilter filter);
		public bool remove_shortcut_folder (string folder) throws GLib.Error;
		public bool remove_shortcut_folder_uri (string uri) throws GLib.Error;
		public void select_all ();
		public bool select_file (GLib.File file) throws GLib.Error;
		public bool select_filename (string filename);
		public bool select_uri (string uri);
		public void set_action (Gtk.FileChooserAction action);
		public void set_create_folders (bool create_folders);
		public bool set_current_folder (string filename);
		public bool set_current_folder_file (GLib.File file) throws GLib.Error;
		public bool set_current_folder_uri (string uri);
		public void set_current_name (string name);
		public void set_do_overwrite_confirmation (bool do_overwrite_confirmation);
		public void set_extra_widget (Gtk.Widget extra_widget);
		public bool set_file (GLib.File file) throws GLib.Error;
		public bool set_filename (string filename);
		public void set_filter (Gtk.FileFilter filter);
		public void set_local_only (bool local_only);
		public void set_preview_widget (Gtk.Widget preview_widget);
		public void set_preview_widget_active (bool active);
		public void set_select_multiple (bool select_multiple);
		public void set_show_hidden (bool show_hidden);
		public bool set_uri (string uri);
		public void set_use_preview_label (bool use_label);
		public void unselect_all ();
		public void unselect_file (GLib.File file);
		public void unselect_filename (string filename);
		public void unselect_uri (string uri);
		public Gtk.FileChooserAction action { get; set; }
		public bool create_folders { get; set; }
		public bool do_overwrite_confirmation { get; set; }
		public Gtk.Widget extra_widget { get; set; }
		public Gtk.FileFilter filter { get; set; }
		public bool local_only { get; set; }
		public Gtk.Widget preview_widget { get; set; }
		public bool preview_widget_active { get; set; }
		public bool select_multiple { get; set; }
		public bool show_hidden { get; set; }
		public bool use_preview_label { get; set; }
		public signal Gtk.FileChooserConfirmation confirm_overwrite ();
		public signal void current_folder_changed ();
		public signal void file_activated ();
		public signal void selection_changed ();
		public signal void update_preview ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface FileChooserEmbed : GLib.Object {
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface FontChooser : GLib.Object {
		public string get_font ();
		public Pango.FontDescription get_font_desc ();
		public abstract unowned Pango.FontFace get_font_face ();
		public abstract unowned Pango.FontFamily get_font_family ();
		public abstract int get_font_size ();
		public string get_preview_text ();
		public bool get_show_preview_entry ();
		public abstract void set_filter_func (owned Gtk.FontFilterFunc filter);
		public void set_font (string fontname);
		public void set_font_desc (Pango.FontDescription font_desc);
		public void set_preview_text (string text);
		public void set_show_preview_entry (bool show_preview_entry);
		public string font { owned get; set; }
		public Pango.FontDescription font_desc { owned get; set; }
		public string preview_text { owned get; set; }
		public bool show_preview_entry { get; set; }
		public signal void font_activated (string fontname);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface Orientable : GLib.Object {
		public Gtk.Orientation get_orientation ();
		public void set_orientation (Gtk.Orientation orientation);
		public Gtk.Orientation orientation { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface PrintOperationPreview : GLib.Object {
		public abstract void end_preview ();
		public abstract bool is_selected (int page_nr);
		public abstract void render_page (int page_nr);
		public signal void got_page_size (Gtk.PrintContext context, Gtk.PageSetup page_setup);
		public signal void ready (Gtk.PrintContext context);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface RecentChooser : GLib.Object {
		public abstract void add_filter (Gtk.RecentFilter filter);
		public static GLib.Quark error_quark ();
		public Gtk.RecentInfo get_current_item ();
		public abstract string get_current_uri ();
		public unowned Gtk.RecentFilter get_filter ();
		public abstract GLib.List<Gtk.RecentInfo> get_items ();
		public int get_limit ();
		public bool get_local_only ();
		[NoWrapper]
		public abstract unowned Gtk.RecentManager get_recent_manager ();
		public bool get_select_multiple ();
		public bool get_show_icons ();
		public bool get_show_not_found ();
		public bool get_show_private ();
		public bool get_show_tips ();
		public Gtk.RecentSortType get_sort_type ();
		public string[] get_uris ();
		public abstract GLib.SList<weak Gtk.RecentFilter> list_filters ();
		public abstract void remove_filter (Gtk.RecentFilter filter);
		public abstract void select_all ();
		public abstract bool select_uri (string uri) throws GLib.Error;
		public abstract bool set_current_uri (string uri) throws GLib.Error;
		public void set_filter (Gtk.RecentFilter filter);
		public void set_limit (int limit);
		public void set_local_only (bool local_only);
		public void set_select_multiple (bool select_multiple);
		public void set_show_icons (bool show_icons);
		public void set_show_not_found (bool show_not_found);
		public void set_show_private (bool show_private);
		public void set_show_tips (bool show_tips);
		public abstract void set_sort_func (owned Gtk.RecentSortFunc sort_func);
		public void set_sort_type (Gtk.RecentSortType sort_type);
		public abstract void unselect_all ();
		public abstract void unselect_uri (string uri);
		public Gtk.RecentFilter filter { get; set; }
		public int limit { get; set; }
		public bool local_only { get; set; }
		public Gtk.RecentManager recent_manager { construct; }
		public bool select_multiple { get; set; }
		public bool show_icons { get; set; }
		public bool show_not_found { get; set; }
		public bool show_private { get; set; }
		public bool show_tips { get; set; }
		public Gtk.RecentSortType sort_type { get; set; }
		public signal void item_activated ();
		public signal void selection_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkScrollableInterface")]
	public interface Scrollable : GLib.Object {
		public virtual bool get_border (out Gtk.Border border);
		public unowned Gtk.Adjustment get_hadjustment ();
		public Gtk.ScrollablePolicy get_hscroll_policy ();
		public unowned Gtk.Adjustment get_vadjustment ();
		public Gtk.ScrollablePolicy get_vscroll_policy ();
		public void set_hadjustment (Gtk.Adjustment hadjustment);
		public void set_hscroll_policy (Gtk.ScrollablePolicy policy);
		public void set_vadjustment (Gtk.Adjustment vadjustment);
		public void set_vscroll_policy (Gtk.ScrollablePolicy policy);
		public Gtk.Adjustment hadjustment { get; set construct; }
		public Gtk.ScrollablePolicy hscroll_policy { get; set; }
		public Gtk.Adjustment vadjustment { get; set construct; }
		public Gtk.ScrollablePolicy vscroll_policy { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface StyleProvider : GLib.Object {
		public abstract unowned Gtk.IconFactory get_icon_factory (Gtk.WidgetPath path);
		public abstract Gtk.StyleProperties get_style (Gtk.WidgetPath path);
		public abstract bool get_style_property (Gtk.WidgetPath path, Gtk.StateFlags state, GLib.ParamSpec pspec, out GLib.Value value);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface ToolShell : Gtk.Widget {
		public abstract Pango.EllipsizeMode get_ellipsize_mode ();
		public abstract Gtk.IconSize get_icon_size ();
		public abstract Gtk.Orientation get_orientation ();
		public abstract Gtk.ReliefStyle get_relief_style ();
		public abstract Gtk.ToolbarStyle get_style ();
		public abstract float get_text_alignment ();
		public abstract Gtk.Orientation get_text_orientation ();
		public abstract unowned Gtk.SizeGroup get_text_size_group ();
		public abstract void rebuild_menu ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface TreeDragDest : GLib.Object {
		public abstract bool drag_data_received (Gtk.TreePath dest, Gtk.SelectionData selection_data);
		public abstract bool row_drop_possible (Gtk.TreePath dest_path, Gtk.SelectionData selection_data);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface TreeDragSource : GLib.Object {
		public abstract bool drag_data_delete (Gtk.TreePath path);
		public abstract bool drag_data_get (Gtk.TreePath path, Gtk.SelectionData selection_data);
		public abstract bool row_draggable (Gtk.TreePath path);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface TreeModel : GLib.Object {
		public void @foreach (Gtk.TreeModelForeachFunc func);
		[CCode (sentinel = "-1")]
		public void @get (Gtk.TreeIter iter, ...);
		public abstract GLib.Type get_column_type (int index_);
		public abstract Gtk.TreeModelFlags get_flags ();
		public abstract bool get_iter (out Gtk.TreeIter iter, Gtk.TreePath path);
		public bool get_iter_first (out Gtk.TreeIter iter);
		public bool get_iter_from_string (out Gtk.TreeIter iter, string path_string);
		public abstract int get_n_columns ();
		public abstract Gtk.TreePath? get_path (Gtk.TreeIter iter);
		public string get_string_from_iter (Gtk.TreeIter iter);
		public void get_valist (Gtk.TreeIter iter, void* var_args);
		public abstract void get_value (Gtk.TreeIter iter, int column, out GLib.Value value);
		public abstract bool iter_children (out Gtk.TreeIter iter, Gtk.TreeIter? parent);
		public abstract bool iter_has_child (Gtk.TreeIter iter);
		public abstract int iter_n_children (Gtk.TreeIter? iter);
		public abstract bool iter_next (ref Gtk.TreeIter iter);
		public abstract bool iter_nth_child (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int n);
		public abstract bool iter_parent (out Gtk.TreeIter iter, Gtk.TreeIter child);
		public virtual bool iter_previous (ref Gtk.TreeIter iter);
		public virtual void ref_node (Gtk.TreeIter iter);
		public void rows_reordered_with_length (Gtk.TreePath path, Gtk.TreeIter? iter, [CCode (array_length_pos = 3.1)] int[] new_order);
		public virtual void unref_node (Gtk.TreeIter iter);
		[HasEmitter]
		public signal void row_changed (Gtk.TreePath path, Gtk.TreeIter iter);
		[HasEmitter]
		public signal void row_deleted (Gtk.TreePath path);
		[HasEmitter]
		public signal void row_has_child_toggled (Gtk.TreePath path, Gtk.TreeIter iter);
		[HasEmitter]
		public signal void row_inserted (Gtk.TreePath path, Gtk.TreeIter iter);
		[HasEmitter]
		public signal void rows_reordered (Gtk.TreePath path, Gtk.TreeIter? iter, void* new_order);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public interface TreeSortable : Gtk.TreeModel, GLib.Object {
		public abstract bool get_sort_column_id (out int sort_column_id, out Gtk.SortType order);
		public abstract bool has_default_sort_func ();
		public abstract void set_default_sort_func (owned Gtk.TreeIterCompareFunc sort_func);
		public abstract void set_sort_column_id (int sort_column_id, Gtk.SortType order);
		public abstract void set_sort_func (int sort_column_id, owned Gtk.TreeIterCompareFunc sort_func);
		[HasEmitter]
		public signal void sort_column_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct AccelGroupEntry {
		public Gtk.AccelKey key;
		public weak GLib.Closure closure;
		public GLib.Quark accel_path_quark;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct AccelKey {
		public uint accel_key;
		public Gdk.ModifierType accel_mods;
		public uint accel_flags;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct ActionEntry {
		public weak string name;
		public weak string stock_id;
		public weak string label;
		public weak string accelerator;
		public weak string tooltip;
		[CCode (delegate_target = false, type = "GCallback")]
		public weak Gtk.ActionCallback callback;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct Allocation : Gdk.Rectangle {
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct BindingArg {
		[CCode (cname = "d.long_data")]
		public long long_data;
		[CCode (cname = "d.double_data")]
		public double double_data;
		[CCode (cname = "d.string_data")]
		public weak string string_data;
		public GLib.Type arg_type;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct Border {
		public int16 left;
		public int16 right;
		public int16 top;
		public int16 bottom;
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtkimmodule.h")]
	public struct IMContextInfo {
		public weak string context_id;
		public weak string context_name;
		public weak string domain;
		public weak string domain_dirname;
		public weak string default_locales;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct PageRange {
		public int start;
		public int end;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct RadioActionEntry {
		public weak string name;
		public weak string stock_id;
		public weak string label;
		public weak string accelerator;
		public weak string tooltip;
		public int value;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_copy_function = false, has_destroy_function = false)]
	public struct RecentData {
		public string display_name;
		public string description;
		public string mime_type;
		public string app_name;
		public string app_exec;
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] groups;
		public bool is_private;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct RecentFilterInfo {
		public Gtk.RecentFilterFlags contains;
		public weak string uri;
		public weak string display_name;
		public weak string mime_type;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[] applications;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[] groups;
		public int age;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct RequestedSize {
		public void* data;
		public int minimum_size;
		public int natural_size;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct Requisition {
		public int width;
		public int height;
		public Gtk.Requisition copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct SettingsValue {
		public weak string origin;
		public GLib.Value value;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct StockItem {
		public weak string stock_id;
		public weak string label;
		public Gdk.ModifierType modifier;
		public uint keyval;
		public weak string translation_domain;
		public Gtk.StockItem copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct TargetEntry {
		public weak string target;
		public uint flags;
		public uint info;
		[CCode (has_construct_function = false)]
		public TargetEntry (string target, uint flags, uint info);
		public Gtk.TargetEntry copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct TextAppearance {
		public Gdk.Color bg_color;
		public Gdk.Color fg_color;
		public int rise;
		public uint underline;
		public uint strikethrough;
		public uint draw_bg;
		public uint inside_selection;
		public uint is_text;
		[CCode (array_length = false)]
		public Gdk.RGBA[] rgba;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct TextIter {
		public void assign (Gtk.TextIter other);
		public bool backward_char ();
		public bool backward_chars (int count);
		public bool backward_cursor_position ();
		public bool backward_cursor_positions (int count);
		public bool backward_find_char (Gtk.TextCharPredicate pred, Gtk.TextIter? limit);
		public bool backward_line ();
		public bool backward_lines (int count);
		public bool backward_search (string str, Gtk.TextSearchFlags flags, out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter? limit);
		public bool backward_sentence_start ();
		public bool backward_sentence_starts (int count);
		public bool backward_to_tag_toggle (Gtk.TextTag? tag);
		public bool backward_visible_cursor_position ();
		public bool backward_visible_cursor_positions (int count);
		public bool backward_visible_line ();
		public bool backward_visible_lines (int count);
		public bool backward_visible_word_start ();
		public bool backward_visible_word_starts (int count);
		public bool backward_word_start ();
		public bool backward_word_starts (int count);
		public bool begins_tag (Gtk.TextTag? tag);
		public bool can_insert (bool default_editability);
		public int compare (Gtk.TextIter rhs);
		public Gtk.TextIter? copy ();
		public bool editable (bool default_setting);
		public bool ends_line ();
		public bool ends_sentence ();
		public bool ends_tag (Gtk.TextTag? tag);
		public bool ends_word ();
		public bool equal (Gtk.TextIter rhs);
		public bool forward_char ();
		public bool forward_chars (int count);
		public bool forward_cursor_position ();
		public bool forward_cursor_positions (int count);
		public bool forward_find_char (Gtk.TextCharPredicate pred, Gtk.TextIter? limit);
		public bool forward_line ();
		public bool forward_lines (int count);
		public bool forward_search (string str, Gtk.TextSearchFlags flags, out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter? limit);
		public bool forward_sentence_end ();
		public bool forward_sentence_ends (int count);
		public void forward_to_end ();
		public bool forward_to_line_end ();
		public bool forward_to_tag_toggle (Gtk.TextTag? tag);
		public bool forward_visible_cursor_position ();
		public bool forward_visible_cursor_positions (int count);
		public bool forward_visible_line ();
		public bool forward_visible_lines (int count);
		public bool forward_visible_word_end ();
		public bool forward_visible_word_ends (int count);
		public bool forward_word_end ();
		public bool forward_word_ends (int count);
		public void free ();
		public bool get_attributes (Gtk.TextAttributes values);
		public unowned Gtk.TextBuffer get_buffer ();
		public int get_bytes_in_line ();
		public unichar get_char ();
		public int get_chars_in_line ();
		public unowned Gtk.TextChildAnchor get_child_anchor ();
		public Pango.Language get_language ();
		public int get_line ();
		public int get_line_index ();
		public int get_line_offset ();
		public GLib.SList<weak Gtk.TextMark> get_marks ();
		public int get_offset ();
		public unowned Gdk.Pixbuf get_pixbuf ();
		public string get_slice (Gtk.TextIter end);
		public GLib.SList<weak Gtk.TextTag> get_tags ();
		public string get_text (Gtk.TextIter end);
		public GLib.SList<weak Gtk.TextTag> get_toggled_tags (bool toggled_on);
		public int get_visible_line_index ();
		public int get_visible_line_offset ();
		public string get_visible_slice (Gtk.TextIter end);
		public string get_visible_text (Gtk.TextIter end);
		public bool has_tag (Gtk.TextTag tag);
		public bool in_range (Gtk.TextIter start, Gtk.TextIter end);
		public bool inside_sentence ();
		public bool inside_word ();
		public bool is_cursor_position ();
		public bool is_end ();
		public bool is_start ();
		public void order (Gtk.TextIter second);
		public void set_line (int line_number);
		public void set_line_index (int byte_on_line);
		public void set_line_offset (int char_on_line);
		public void set_offset (int char_offset);
		public void set_visible_line_index (int byte_on_line);
		public void set_visible_line_offset (int char_on_line);
		public bool starts_line ();
		public bool starts_sentence ();
		public bool starts_word ();
		public bool toggles_tag (Gtk.TextTag tag);
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct ToggleActionEntry {
		public weak string name;
		public weak string stock_id;
		public weak string label;
		public weak string accelerator;
		public weak string tooltip;
		[CCode (delegate_target = false, type = "GCallback")]
		public weak Gtk.ActionCallback callback;
		public bool is_active;
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public struct TreeIter {
		public int stamp;
		public void* user_data;
		public void* user_data2;
		public void* user_data3;
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ACCEL_")]
	[Flags]
	public enum AccelFlags {
		VISIBLE,
		LOCKED,
		MASK
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ALIGN_")]
	public enum Align {
		FILL,
		START,
		END,
		CENTER,
		BASELINE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_APPLICATION_INHIBIT_")]
	[Flags]
	public enum ApplicationInhibitFlags {
		LOGOUT,
		SWITCH,
		SUSPEND,
		IDLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ARROWS_")]
	public enum ArrowPlacement {
		BOTH,
		START,
		END
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ARROW_")]
	public enum ArrowType {
		UP,
		DOWN,
		LEFT,
		RIGHT,
		NONE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ASSISTANT_PAGE_")]
	public enum AssistantPageType {
		CONTENT,
		INTRO,
		CONFIRM,
		SUMMARY,
		PROGRESS,
		CUSTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_")]
	[Flags]
	public enum AttachOptions {
		EXPAND,
		SHRINK,
		FILL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BASELINE_POSITION_")]
	public enum BaselinePosition {
		TOP,
		CENTER,
		BOTTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BORDER_STYLE_")]
	public enum BorderStyle {
		NONE,
		SOLID,
		INSET,
		OUTSET,
		HIDDEN,
		DOTTED,
		DASHED,
		DOUBLE,
		GROOVE,
		RIDGE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUTTONBOX_")]
	public enum ButtonBoxStyle {
		SPREAD,
		EDGE,
		START,
		END,
		CENTER,
		EXPAND
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUTTON_ROLE_")]
	public enum ButtonRole {
		NORMAL,
		CHECK,
		RADIO
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUTTONS_")]
	public enum ButtonsType {
		NONE,
		OK,
		CLOSE,
		CANCEL,
		YES_NO,
		OK_CANCEL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CALENDAR_")]
	[Flags]
	public enum CalendarDisplayOptions {
		SHOW_HEADING,
		SHOW_DAY_NAMES,
		NO_MONTH_CHANGE,
		SHOW_WEEK_NUMBERS,
		SHOW_DETAILS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CELL_RENDERER_ACCEL_MODE_")]
	public enum CellRendererAccelMode {
		GTK,
		OTHER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CELL_RENDERER_MODE_")]
	public enum CellRendererMode {
		INERT,
		ACTIVATABLE,
		EDITABLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CELL_RENDERER_")]
	[Flags]
	public enum CellRendererState {
		SELECTED,
		PRELIT,
		INSENSITIVE,
		SORTED,
		FOCUSED,
		EXPANDABLE,
		EXPANDED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CORNER_")]
	public enum CornerType {
		TOP_LEFT,
		BOTTOM_LEFT,
		TOP_RIGHT,
		BOTTOM_RIGHT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CSS_SECTION_")]
	public enum CssSectionType {
		DOCUMENT,
		IMPORT,
		COLOR_DEFINITION,
		BINDING_SET,
		RULESET,
		SELECTOR,
		DECLARATION,
		VALUE,
		KEYFRAMES
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DEBUG_")]
	[Flags]
	public enum DebugFlag {
		MISC,
		PLUGSOCKET,
		TEXT,
		TREE,
		UPDATES,
		KEYBINDINGS,
		MULTIHEAD,
		MODULES,
		GEOMETRY,
		ICONTHEME,
		PRINTING,
		BUILDER,
		SIZE_REQUEST,
		NO_CSS_CACHE,
		BASELINES,
		PIXEL_CACHE,
		NO_PIXEL_CACHE,
		INTERACTIVE,
		TOUCHSCREEN,
		ACTIONS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DELETE_")]
	public enum DeleteType {
		CHARS,
		WORD_ENDS,
		WORDS,
		DISPLAY_LINES,
		DISPLAY_LINE_ENDS,
		PARAGRAPH_ENDS,
		PARAGRAPHS,
		WHITESPACE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DEST_DEFAULT_")]
	[Flags]
	public enum DestDefaults {
		MOTION,
		HIGHLIGHT,
		DROP,
		ALL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DIALOG_")]
	[Flags]
	public enum DialogFlags {
		MODAL,
		DESTROY_WITH_PARENT,
		USE_HEADER_BAR
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DIR_")]
	public enum DirectionType {
		TAB_FORWARD,
		TAB_BACKWARD,
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DRAG_RESULT_")]
	public enum DragResult {
		SUCCESS,
		NO_TARGET,
		USER_CANCELLED,
		TIMEOUT_EXPIRED,
		GRAB_BROKEN,
		ERROR
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ENTRY_ICON_")]
	public enum EntryIconPosition {
		PRIMARY,
		SECONDARY
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_EVENT_SEQUENCE_")]
	public enum EventSequenceState {
		NONE,
		CLAIMED,
		DENIED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_EXPANDER_")]
	public enum ExpanderStyle {
		COLLAPSED,
		SEMI_COLLAPSED,
		SEMI_EXPANDED,
		EXPANDED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_CHOOSER_ACTION_")]
	public enum FileChooserAction {
		OPEN,
		SAVE,
		SELECT_FOLDER,
		CREATE_FOLDER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_CHOOSER_CONFIRMATION_")]
	public enum FileChooserConfirmation {
		CONFIRM,
		ACCEPT_FILENAME,
		SELECT_AGAIN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_FILTER_")]
	[Flags]
	public enum FileFilterFlags {
		FILENAME,
		URI,
		DISPLAY_NAME,
		MIME_TYPE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_IM_PREEDIT_")]
	public enum IMPreeditStyle {
		NOTHING,
		CALLBACK,
		NONE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_IM_STATUS_")]
	public enum IMStatusStyle {
		NOTHING,
		CALLBACK,
		NONE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_LOOKUP_")]
	[Flags]
	public enum IconLookupFlags {
		NO_SVG,
		FORCE_SVG,
		USE_BUILTIN,
		GENERIC_FALLBACK,
		FORCE_SIZE,
		FORCE_REGULAR,
		FORCE_SYMBOLIC,
		DIR_LTR,
		DIR_RTL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_SIZE_")]
	public enum IconSize {
		INVALID,
		MENU,
		SMALL_TOOLBAR,
		LARGE_TOOLBAR,
		BUTTON,
		DND,
		DIALOG
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_VIEW_")]
	public enum IconViewDropPosition {
		NO_DROP,
		DROP_INTO,
		DROP_LEFT,
		DROP_RIGHT,
		DROP_ABOVE,
		DROP_BELOW
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_IMAGE_")]
	public enum ImageType {
		EMPTY,
		PIXBUF,
		STOCK,
		ICON_SET,
		ANIMATION,
		ICON_NAME,
		GICON,
		SURFACE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_INPUT_HINT_")]
	[Flags]
	public enum InputHints {
		NONE,
		SPELLCHECK,
		NO_SPELLCHECK,
		WORD_COMPLETION,
		LOWERCASE,
		UPPERCASE_CHARS,
		UPPERCASE_WORDS,
		UPPERCASE_SENTENCES,
		INHIBIT_OSK
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_INPUT_PURPOSE_")]
	public enum InputPurpose {
		FREE_FORM,
		ALPHA,
		DIGITS,
		NUMBER,
		PHONE,
		URL,
		EMAIL,
		NAME,
		PASSWORD,
		PIN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_JUNCTION_")]
	[Flags]
	public enum JunctionSides {
		NONE,
		CORNER_TOPLEFT,
		CORNER_TOPRIGHT,
		CORNER_BOTTOMLEFT,
		CORNER_BOTTOMRIGHT,
		TOP,
		BOTTOM,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_JUSTIFY_")]
	public enum Justification {
		LEFT,
		RIGHT,
		CENTER,
		FILL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_LEVEL_BAR_MODE_")]
	public enum LevelBarMode {
		CONTINUOUS,
		DISCRETE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_LICENSE_")]
	public enum License {
		UNKNOWN,
		CUSTOM,
		GPL_2_0,
		GPL_3_0,
		LGPL_2_1,
		LGPL_3_0,
		BSD,
		MIT_X11,
		ARTISTIC,
		GPL_2_0_ONLY,
		GPL_3_0_ONLY,
		LGPL_2_1_ONLY,
		LGPL_3_0_ONLY
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_MENU_DIR_")]
	public enum MenuDirectionType {
		PARENT,
		CHILD,
		NEXT,
		PREV
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_MESSAGE_")]
	public enum MessageType {
		INFO,
		WARNING,
		QUESTION,
		ERROR,
		OTHER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_MOVEMENT_")]
	public enum MovementStep {
		LOGICAL_POSITIONS,
		VISUAL_POSITIONS,
		WORDS,
		DISPLAY_LINES,
		DISPLAY_LINE_ENDS,
		PARAGRAPHS,
		PARAGRAPH_ENDS,
		PAGES,
		BUFFER_ENDS,
		HORIZONTAL_PAGES
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_NOTEBOOK_TAB_")]
	public enum NotebookTab {
		FIRST,
		LAST
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_NUMBER_UP_LAYOUT_")]
	public enum NumberUpLayout {
		LEFT_TO_RIGHT_TOP_TO_BOTTOM,
		LEFT_TO_RIGHT_BOTTOM_TO_TOP,
		RIGHT_TO_LEFT_TOP_TO_BOTTOM,
		RIGHT_TO_LEFT_BOTTOM_TO_TOP,
		TOP_TO_BOTTOM_LEFT_TO_RIGHT,
		TOP_TO_BOTTOM_RIGHT_TO_LEFT,
		BOTTOM_TO_TOP_LEFT_TO_RIGHT,
		BOTTOM_TO_TOP_RIGHT_TO_LEFT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ORIENTATION_")]
	public enum Orientation {
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PACK_DIRECTION_")]
	public enum PackDirection {
		LTR,
		RTL,
		TTB,
		BTT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PACK_")]
	public enum PackType {
		START,
		END
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAGE_ORIENTATION_")]
	public enum PageOrientation {
		PORTRAIT,
		LANDSCAPE,
		REVERSE_PORTRAIT,
		REVERSE_LANDSCAPE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAGE_SET_")]
	public enum PageSet {
		ALL,
		EVEN,
		ODD
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAN_DIRECTION_")]
	public enum PanDirection {
		LEFT,
		RIGHT,
		UP,
		DOWN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PATH_PRIO_")]
	public enum PathPriorityType {
		LOWEST,
		GTK,
		APPLICATION,
		THEME,
		RC,
		HIGHEST
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PATH_")]
	public enum PathType {
		WIDGET,
		WIDGET_CLASS,
		CLASS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PLACES_OPEN_")]
	[Flags]
	public enum PlacesOpenFlags {
		NORMAL,
		NEW_TAB,
		NEW_WINDOW
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_POLICY_")]
	public enum PolicyType {
		ALWAYS,
		AUTOMATIC,
		NEVER,
		EXTERNAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_POS_")]
	public enum PositionType {
		LEFT,
		RIGHT,
		TOP,
		BOTTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_DUPLEX_")]
	public enum PrintDuplex {
		SIMPLEX,
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_OPERATION_ACTION_")]
	public enum PrintOperationAction {
		PRINT_DIALOG,
		PRINT,
		PREVIEW,
		EXPORT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_OPERATION_RESULT_")]
	public enum PrintOperationResult {
		ERROR,
		APPLY,
		CANCEL,
		IN_PROGRESS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_PAGES_")]
	public enum PrintPages {
		ALL,
		CURRENT,
		RANGES,
		SELECTION
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_QUALITY_")]
	public enum PrintQuality {
		LOW,
		NORMAL,
		HIGH,
		DRAFT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_STATUS_")]
	public enum PrintStatus {
		INITIAL,
		PREPARING,
		GENERATING_DATA,
		SENDING_DATA,
		PENDING,
		PENDING_ISSUE,
		PRINTING,
		FINISHED,
		FINISHED_ABORTED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PHASE_")]
	public enum PropagationPhase {
		NONE,
		CAPTURE,
		BUBBLE,
		TARGET
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RC_")]
	[Flags]
	public enum RcFlags {
		FG,
		BG,
		TEXT,
		BASE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RC_TOKEN_")]
	public enum RcTokenType {
		INVALID,
		INCLUDE,
		NORMAL,
		ACTIVE,
		PRELIGHT,
		SELECTED,
		INSENSITIVE,
		FG,
		BG,
		TEXT,
		BASE,
		XTHICKNESS,
		YTHICKNESS,
		FONT,
		FONTSET,
		FONT_NAME,
		BG_PIXMAP,
		PIXMAP_PATH,
		STYLE,
		BINDING,
		BIND,
		WIDGET,
		WIDGET_CLASS,
		CLASS,
		LOWEST,
		GTK,
		APPLICATION,
		THEME,
		RC,
		HIGHEST,
		ENGINE,
		MODULE_PATH,
		IM_MODULE_PATH,
		IM_MODULE_FILE,
		STOCK,
		LTR,
		RTL,
		COLOR,
		UNBIND,
		LAST
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_FILTER_")]
	[Flags]
	public enum RecentFilterFlags {
		URI,
		DISPLAY_NAME,
		MIME_TYPE,
		APPLICATION,
		GROUP,
		AGE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_SORT_")]
	public enum RecentSortType {
		NONE,
		MRU,
		LRU,
		CUSTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_REGION_")]
	[Flags]
	public enum RegionFlags {
		EVEN,
		ODD,
		FIRST,
		LAST,
		ONLY,
		SORTED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RELIEF_")]
	public enum ReliefStyle {
		NORMAL,
		HALF,
		NONE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RESIZE_")]
	public enum ResizeMode {
		PARENT,
		QUEUE,
		[Deprecated]
		IMMEDIATE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RESPONSE_")]
	public enum ResponseType {
		NONE,
		REJECT,
		ACCEPT,
		DELETE_EVENT,
		OK,
		CANCEL,
		CLOSE,
		YES,
		NO,
		APPLY,
		HELP
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_REVEALER_TRANSITION_TYPE_")]
	public enum RevealerTransitionType {
		NONE,
		CROSSFADE,
		SLIDE_RIGHT,
		SLIDE_LEFT,
		SLIDE_UP,
		SLIDE_DOWN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SCROLL_")]
	public enum ScrollStep {
		STEPS,
		PAGES,
		ENDS,
		HORIZONTAL_STEPS,
		HORIZONTAL_PAGES,
		HORIZONTAL_ENDS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SCROLL_")]
	public enum ScrollType {
		NONE,
		JUMP,
		STEP_BACKWARD,
		STEP_FORWARD,
		PAGE_BACKWARD,
		PAGE_FORWARD,
		STEP_UP,
		STEP_DOWN,
		PAGE_UP,
		PAGE_DOWN,
		STEP_LEFT,
		STEP_RIGHT,
		PAGE_LEFT,
		PAGE_RIGHT,
		START,
		END
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SCROLL_")]
	public enum ScrollablePolicy {
		MINIMUM,
		NATURAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SELECTION_")]
	public enum SelectionMode {
		NONE,
		SINGLE,
		BROWSE,
		MULTIPLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SENSITIVITY_")]
	public enum SensitivityType {
		AUTO,
		ON,
		OFF
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SHADOW_")]
	public enum ShadowType {
		NONE,
		IN,
		OUT,
		ETCHED_IN,
		ETCHED_OUT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SIZE_GROUP_")]
	public enum SizeGroupMode {
		NONE,
		HORIZONTAL,
		VERTICAL,
		BOTH
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SIZE_REQUEST_")]
	public enum SizeRequestMode {
		HEIGHT_FOR_WIDTH,
		WIDTH_FOR_HEIGHT,
		CONSTANT_SIZE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cname = "gint")]
	public enum SortColumn {
		[CCode (cname = "GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID")]
		DEFAULT,
		[CCode (cname = "GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID")]
		UNSORTED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SORT_")]
	public enum SortType {
		ASCENDING,
		DESCENDING
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_UPDATE_")]
	public enum SpinButtonUpdatePolicy {
		ALWAYS,
		IF_VALID
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SPIN_")]
	public enum SpinType {
		STEP_FORWARD,
		STEP_BACKWARD,
		PAGE_FORWARD,
		PAGE_BACKWARD,
		HOME,
		END,
		USER_DEFINED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_STACK_TRANSITION_TYPE_")]
	public enum StackTransitionType {
		NONE,
		CROSSFADE,
		SLIDE_RIGHT,
		SLIDE_LEFT,
		SLIDE_UP,
		SLIDE_DOWN,
		SLIDE_LEFT_RIGHT,
		SLIDE_UP_DOWN,
		OVER_UP,
		OVER_DOWN,
		OVER_LEFT,
		OVER_RIGHT,
		UNDER_UP,
		UNDER_DOWN,
		UNDER_LEFT,
		UNDER_RIGHT,
		OVER_UP_DOWN,
		OVER_DOWN_UP,
		OVER_LEFT_RIGHT,
		OVER_RIGHT_LEFT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_STATE_FLAG_")]
	[Flags]
	public enum StateFlags {
		NORMAL,
		ACTIVE,
		PRELIGHT,
		SELECTED,
		INSENSITIVE,
		INCONSISTENT,
		FOCUSED,
		BACKDROP,
		DIR_LTR,
		DIR_RTL,
		LINK,
		VISITED,
		CHECKED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_STATE_")]
	public enum StateType {
		NORMAL,
		ACTIVE,
		PRELIGHT,
		SELECTED,
		INSENSITIVE,
		INCONSISTENT,
		FOCUSED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TARGET_")]
	[Flags]
	public enum TargetFlags {
		SAME_APP,
		SAME_WIDGET,
		OTHER_APP,
		OTHER_WIDGET
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_BUFFER_TARGET_INFO_")]
	public enum TextBufferTargetInfo {
		BUFFER_CONTENTS,
		RICH_TEXT,
		TEXT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_DIR_")]
	public enum TextDirection {
		NONE,
		LTR,
		RTL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_EXTEND_SELECTION_")]
	public enum TextExtendSelection {
		WORD,
		LINE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_SEARCH_")]
	[Flags]
	public enum TextSearchFlags {
		VISIBLE_ONLY,
		TEXT_ONLY,
		CASE_INSENSITIVE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_VIEW_LAYER_")]
	public enum TextViewLayer {
		BELOW,
		ABOVE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_WINDOW_")]
	public enum TextWindowType {
		PRIVATE,
		WIDGET,
		TEXT,
		LEFT,
		RIGHT,
		TOP,
		BOTTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TOOL_PALETTE_DRAG_")]
	[Flags]
	public enum ToolPaletteDragTargets {
		ITEMS,
		GROUPS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TOOLBAR_SPACE_")]
	public enum ToolbarSpaceStyle {
		EMPTY,
		LINE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TOOLBAR_")]
	public enum ToolbarStyle {
		ICONS,
		TEXT,
		BOTH,
		BOTH_HORIZ
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_MODEL_")]
	[Flags]
	public enum TreeModelFlags {
		ITERS_PERSIST,
		LIST_ONLY
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_VIEW_COLUMN_")]
	public enum TreeViewColumnSizing {
		GROW_ONLY,
		AUTOSIZE,
		FIXED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_VIEW_DROP_")]
	public enum TreeViewDropPosition {
		BEFORE,
		AFTER,
		INTO_OR_BEFORE,
		INTO_OR_AFTER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_VIEW_GRID_LINES_")]
	public enum TreeViewGridLines {
		NONE,
		HORIZONTAL,
		VERTICAL,
		BOTH
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_UI_MANAGER_")]
	[Flags]
	public enum UIManagerItemType {
		AUTO,
		MENUBAR,
		MENU,
		TOOLBAR,
		PLACEHOLDER,
		POPUP,
		MENUITEM,
		TOOLITEM,
		SEPARATOR,
		ACCELERATOR,
		POPUP_WITH_ACCELS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_UNIT_")]
	public enum Unit {
		NONE,
		POINTS,
		INCH,
		MM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WIDGET_HELP_")]
	public enum WidgetHelpType {
		TOOLTIP,
		WHATS_THIS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WIN_POS_")]
	public enum WindowPosition {
		NONE,
		CENTER,
		MOUSE,
		CENTER_ALWAYS,
		CENTER_ON_PARENT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WINDOW_")]
	public enum WindowType {
		TOPLEVEL,
		POPUP
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WRAP_")]
	public enum WrapMode {
		NONE,
		CHAR,
		WORD,
		WORD_CHAR
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUILDER_ERROR_")]
	public errordomain BuilderError {
		INVALID_TYPE_FUNCTION,
		UNHANDLED_TAG,
		MISSING_ATTRIBUTE,
		INVALID_ATTRIBUTE,
		INVALID_TAG,
		MISSING_PROPERTY_VALUE,
		INVALID_VALUE,
		VERSION_MISMATCH,
		DUPLICATE_ID,
		OBJECT_TYPE_REFUSED,
		TEMPLATE_MISMATCH,
		INVALID_PROPERTY,
		INVALID_SIGNAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CSS_PROVIDER_ERROR_")]
	public errordomain CssProviderError {
		FAILED,
		SYNTAX,
		IMPORT,
		NAME,
		DEPRECATED,
		UNKNOWN_VALUE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_CHOOSER_ERROR_")]
	public errordomain FileChooserError {
		NONEXISTENT,
		BAD_FILENAME,
		ALREADY_EXISTS,
		INCOMPLETE_HOSTNAME
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_THEME_")]
	public errordomain IconThemeError {
		NOT_FOUND,
		FAILED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_ERROR_")]
	public errordomain PrintError {
		GENERAL,
		INTERNAL_ERROR,
		NOMEM,
		INVALID_FILE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_CHOOSER_ERROR_")]
	public errordomain RecentChooserError {
		NOT_FOUND,
		INVALID_URI
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_MANAGER_ERROR_")]
	public errordomain RecentManagerError {
		NOT_FOUND,
		INVALID_URI,
		INVALID_ENCODING,
		NOT_REGISTERED,
		READ,
		WRITE,
		UNKNOWN
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool AccelGroupActivate (Gtk.AccelGroup accel_group, GLib.Object acceleratable, uint keyval, Gdk.ModifierType modifier);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool AccelGroupFindFunc (Gtk.AccelKey key, GLib.Closure closure);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void AccelMapForeach (void* data, string accel_path, uint accel_key, Gdk.ModifierType accel_mods, bool changed);
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GCallback")]
	public delegate void ActionCallback (Gtk.Action action);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate int AssistantPageFunc (int current_page);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void BuilderConnectFunc (Gtk.Builder builder, GLib.Object object, string signal_name, string handler_name, GLib.Object? connect_object, GLib.ConnectFlags flags);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate string CalendarDetailFunc (Gtk.Calendar calendar, uint year, uint month, uint day);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void Callback (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool CellAllocCallback (Gtk.CellRenderer renderer, Gdk.Rectangle cell_area, Gdk.Rectangle cell_background);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool CellCallback (Gtk.CellRenderer renderer);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void CellLayoutDataFunc (Gtk.CellLayout cell_layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ClipboardClearFunc (Gtk.Clipboard clipboard, void* user_data_or_owner);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ClipboardGetFunc (Gtk.Clipboard clipboard, Gtk.SelectionData selection_data, uint info, void* user_data_or_owner);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ClipboardImageReceivedFunc (Gtk.Clipboard clipboard, Gdk.Pixbuf pixbuf);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ClipboardReceivedFunc (Gtk.Clipboard clipboard, Gtk.SelectionData selection_data);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ClipboardRichTextReceivedFunc (Gtk.Clipboard clipboard, Gdk.Atom format, [CCode (array_length_type = "gsize")] uint8[] text);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ClipboardTargetsReceivedFunc (Gtk.Clipboard clipboard, Gdk.Atom[] atoms);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ClipboardTextReceivedFunc (Gtk.Clipboard clipboard, string? text);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ClipboardURIReceivedFunc (Gtk.Clipboard clipboard, [CCode (array_length = false, array_null_terminated = true)] string[] uris);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ColorSelectionChangePaletteFunc (Gdk.Color[] colors);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ColorSelectionChangePaletteWithScreenFunc (Gdk.Screen screen, Gdk.Color[] colors);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool EntryCompletionMatchFunc (Gtk.EntryCompletion completion, string key, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool FileFilterFunc (Gtk.FileFilterInfo filter_info);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool FlowBoxFilterFunc (Gtk.FlowBoxChild child);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void FlowBoxForeachFunc (Gtk.FlowBox box, Gtk.FlowBoxChild child);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate int FlowBoxSortFunc (Gtk.FlowBoxChild child1, Gtk.FlowBoxChild child2);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool FontFilterFunc (Pango.FontFamily family, Pango.FontFace face);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void IconViewForeachFunc (Gtk.IconView icon_view, Gtk.TreePath path);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate int KeySnoopFunc (Gtk.Widget grab_widget, Gdk.EventKey event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate Gtk.Widget ListBoxCreateWidgetFunc (GLib.Object item);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool ListBoxFilterFunc (Gtk.ListBoxRow row);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ListBoxForeachFunc (Gtk.ListBox box, Gtk.ListBoxRow row);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate int ListBoxSortFunc (Gtk.ListBoxRow row1, Gtk.ListBoxRow row2);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void ListBoxUpdateHeaderFunc (Gtk.ListBoxRow row, Gtk.ListBoxRow before);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void MenuDetachFunc (Gtk.Widget attach_widget, Gtk.Menu menu);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void MenuPositionFunc (Gtk.Menu menu, ref int x, ref int y, out bool push_in);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ModuleDisplayInitFunc (Gdk.Display display);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ModuleInitFunc (string[]? argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void PageSetupDoneFunc (Gtk.PageSetup page_setup);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void PrintSettingsFunc (string key, string value);
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GCallback")]
	public delegate void RadioActionCallback (Gtk.Action action, Gtk.Action current);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate bool RcPropertyParser (GLib.ParamSpec pspec, GLib.StringBuilder rc_string, GLib.Value property_value);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool RecentFilterFunc (Gtk.RecentFilterInfo filter_info);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate int RecentSortFunc (Gtk.RecentInfo a, Gtk.RecentInfo b);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate bool StylePropertyParser (string str, GLib.Value value) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 5.9)]
	public delegate bool TextBufferDeserializeFunc (Gtk.TextBuffer register_buffer, Gtk.TextBuffer content_buffer, Gtk.TextIter iter, [CCode (array_length_type = "gsize")] uint8[] data, bool create_tags) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate uchar TextBufferSerializeFunc (Gtk.TextBuffer register_buffer, Gtk.TextBuffer content_buffer, Gtk.TextIter start, Gtk.TextIter end, size_t length);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TextCharPredicate (unichar ch);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TextTagTableForeach (Gtk.TextTag tag);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TickCallback (Gtk.Widget widget, Gdk.FrameClock frame_clock);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate string TranslateFunc (string path);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TreeCellDataFunc (Gtk.TreeViewColumn tree_column, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TreeDestroyCountFunc (Gtk.TreeView tree_view, Gtk.TreePath path, int children);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate int TreeIterCompareFunc (Gtk.TreeModel model, Gtk.TreeIter a, Gtk.TreeIter b);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TreeModelFilterModifyFunc (Gtk.TreeModel model, Gtk.TreeIter iter, out GLib.Value value, int column);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TreeModelFilterVisibleFunc (Gtk.TreeModel model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TreeModelForeachFunc (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TreeSelectionForeachFunc (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TreeSelectionFunc (Gtk.TreeSelection selection, Gtk.TreeModel model, Gtk.TreePath path, bool path_currently_selected);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TreeViewColumnDropFunc (Gtk.TreeView tree_view, Gtk.TreeViewColumn column, Gtk.TreeViewColumn prev_column, Gtk.TreeViewColumn next_column);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TreeViewMappingFunc (Gtk.TreeView tree_view, Gtk.TreePath path);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TreeViewRowSeparatorFunc (Gtk.TreeModel model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool TreeViewSearchEqualFunc (Gtk.TreeModel model, int column, string key, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate void TreeViewSearchPositionFunc (Gtk.TreeView tree_view, Gtk.Widget search_dialog);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int BINARY_AGE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int INPUT_ERROR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int INTERFACE_AGE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string LEVEL_BAR_OFFSET_HIGH;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string LEVEL_BAR_OFFSET_LOW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int MAX_COMPOSE_LEN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_A3;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_A4;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_A5;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_B5;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_EXECUTIVE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_LEGAL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PAPER_NAME_LETTER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int PATH_PRIO_MASK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_COLLATE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_DEFAULT_SOURCE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_DITHER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_DUPLEX;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_FINISHINGS;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_MEDIA_TYPE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_NUMBER_UP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_NUMBER_UP_LAYOUT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_N_COPIES;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_ORIENTATION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_OUTPUT_BASENAME;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_OUTPUT_BIN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_OUTPUT_DIR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_OUTPUT_FILE_FORMAT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_OUTPUT_URI;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PAGE_RANGES;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PAGE_SET;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PAPER_FORMAT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PAPER_HEIGHT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PAPER_WIDTH;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PRINTER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PRINTER_LPI;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_PRINT_PAGES;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_QUALITY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_RESOLUTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_RESOLUTION_X;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_RESOLUTION_Y;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_REVERSE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_SCALE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_USE_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_WIN32_DRIVER_EXTRA;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string PRINT_SETTINGS_WIN32_DRIVER_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int PRIORITY_RESIZE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ABOUT", since = "vala-0.12")]
	public const string STOCK_ABOUT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ADD", since = "vala-0.12")]
	public const string STOCK_ADD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.APPLY", since = "vala-0.12")]
	public const string STOCK_APPLY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.BOLD", since = "vala-0.12")]
	public const string STOCK_BOLD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CANCEL", since = "vala-0.12")]
	public const string STOCK_CANCEL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CAPS_LOCK_WARNING", since = "vala-0.12")]
	public const string STOCK_CAPS_LOCK_WARNING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CDROM", since = "vala-0.12")]
	public const string STOCK_CDROM;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CLEAR", since = "vala-0.12")]
	public const string STOCK_CLEAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CLOSE", since = "vala-0.12")]
	public const string STOCK_CLOSE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.COLOR_PICKER", since = "vala-0.12")]
	public const string STOCK_COLOR_PICKER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CONNECT", since = "vala-0.12")]
	public const string STOCK_CONNECT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CONVERT", since = "vala-0.12")]
	public const string STOCK_CONVERT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.COPY", since = "vala-0.12")]
	public const string STOCK_COPY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.CUT", since = "vala-0.12")]
	public const string STOCK_CUT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DELETE", since = "vala-0.12")]
	public const string STOCK_DELETE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DIALOG_AUTHENTICATION", since = "vala-0.12")]
	public const string STOCK_DIALOG_AUTHENTICATION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DIALOG_ERROR", since = "vala-0.12")]
	public const string STOCK_DIALOG_ERROR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DIALOG_INFO", since = "vala-0.12")]
	public const string STOCK_DIALOG_INFO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DIALOG_QUESTION", since = "vala-0.12")]
	public const string STOCK_DIALOG_QUESTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DIALOG_WARNING", since = "vala-0.12")]
	public const string STOCK_DIALOG_WARNING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DIRECTORY", since = "vala-0.12")]
	public const string STOCK_DIRECTORY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DISCARD", since = "vala-0.12")]
	public const string STOCK_DISCARD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DISCONNECT", since = "vala-0.12")]
	public const string STOCK_DISCONNECT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DND", since = "vala-0.12")]
	public const string STOCK_DND;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.DND_MULTIPLE", since = "vala-0.12")]
	public const string STOCK_DND_MULTIPLE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.EDIT", since = "vala-0.12")]
	public const string STOCK_EDIT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.EXECUTE", since = "vala-0.12")]
	public const string STOCK_EXECUTE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.FILE", since = "vala-0.12")]
	public const string STOCK_FILE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.FIND", since = "vala-0.12")]
	public const string STOCK_FIND;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.FIND_AND_REPLACE", since = "vala-0.12")]
	public const string STOCK_FIND_AND_REPLACE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.FLOPPY", since = "vala-0.12")]
	public const string STOCK_FLOPPY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.FULLSCREEN", since = "vala-0.12")]
	public const string STOCK_FULLSCREEN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GOTO_BOTTOM", since = "vala-0.12")]
	public const string STOCK_GOTO_BOTTOM;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GOTO_FIRST", since = "vala-0.12")]
	public const string STOCK_GOTO_FIRST;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GOTO_LAST", since = "vala-0.12")]
	public const string STOCK_GOTO_LAST;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GOTO_TOP", since = "vala-0.12")]
	public const string STOCK_GOTO_TOP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GO_BACK", since = "vala-0.12")]
	public const string STOCK_GO_BACK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GO_DOWN", since = "vala-0.12")]
	public const string STOCK_GO_DOWN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GO_FORWARD", since = "vala-0.12")]
	public const string STOCK_GO_FORWARD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.GO_UP", since = "vala-0.12")]
	public const string STOCK_GO_UP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.HARDDISK", since = "vala-0.12")]
	public const string STOCK_HARDDISK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.HELP", since = "vala-0.12")]
	public const string STOCK_HELP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.HOME", since = "vala-0.12")]
	public const string STOCK_HOME;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.INDENT", since = "vala-0.12")]
	public const string STOCK_INDENT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.INDEX", since = "vala-0.12")]
	public const string STOCK_INDEX;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.INFO", since = "vala-0.12")]
	public const string STOCK_INFO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ITALIC", since = "vala-0.12")]
	public const string STOCK_ITALIC;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.JUMP_TO", since = "vala-0.12")]
	public const string STOCK_JUMP_TO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.JUSTIFY_CENTER", since = "vala-0.12")]
	public const string STOCK_JUSTIFY_CENTER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.JUSTIFY_FILL", since = "vala-0.12")]
	public const string STOCK_JUSTIFY_FILL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.JUSTIFY_LEFT", since = "vala-0.12")]
	public const string STOCK_JUSTIFY_LEFT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.JUSTIFY_RIGHT", since = "vala-0.12")]
	public const string STOCK_JUSTIFY_RIGHT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.FULLSCREEN", since = "vala-0.12")]
	public const string STOCK_LEAVE_FULLSCREEN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_FORWARD", since = "vala-0.12")]
	public const string STOCK_MEDIA_FORWARD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_NEXT", since = "vala-0.12")]
	public const string STOCK_MEDIA_NEXT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_PAUSE", since = "vala-0.12")]
	public const string STOCK_MEDIA_PAUSE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_PLAY", since = "vala-0.12")]
	public const string STOCK_MEDIA_PLAY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_PREVIOUS", since = "vala-0.12")]
	public const string STOCK_MEDIA_PREVIOUS;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_RECORD", since = "vala-0.12")]
	public const string STOCK_MEDIA_RECORD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_REWIND", since = "vala-0.12")]
	public const string STOCK_MEDIA_REWIND;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MEDIA_STOP", since = "vala-0.12")]
	public const string STOCK_MEDIA_STOP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.MISSING_IMAGE", since = "vala-0.12")]
	public const string STOCK_MISSING_IMAGE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.NETWORK", since = "vala-0.12")]
	public const string STOCK_NETWORK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.NEW", since = "vala-0.12")]
	public const string STOCK_NEW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.NO", since = "vala-0.12")]
	public const string STOCK_NO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.OK", since = "vala-0.12")]
	public const string STOCK_OK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.OPEN", since = "vala-0.12")]
	public const string STOCK_OPEN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ORIENTATION_LANDSCAPE", since = "vala-0.12")]
	public const string STOCK_ORIENTATION_LANDSCAPE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ORIENTATION_PORTRAIT", since = "vala-0.12")]
	public const string STOCK_ORIENTATION_PORTRAIT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ORIENTATION_REVERSE_LANDSCAPE", since = "vala-0.12")]
	public const string STOCK_ORIENTATION_REVERSE_LANDSCAPE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ORIENTATION_REVERSE_PORTRAIT", since = "vala-0.12")]
	public const string STOCK_ORIENTATION_REVERSE_PORTRAIT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PAGE_SETUP", since = "vala-0.12")]
	public const string STOCK_PAGE_SETUP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PASTE", since = "vala-0.12")]
	public const string STOCK_PASTE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PREFERENCES", since = "vala-0.12")]
	public const string STOCK_PREFERENCES;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PRINT", since = "vala-0.12")]
	public const string STOCK_PRINT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PRINT_ERROR", since = "vala-0.12")]
	public const string STOCK_PRINT_ERROR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PRINT_PAUSED", since = "vala-0.12")]
	public const string STOCK_PRINT_PAUSED;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PRINT_PREVIEW", since = "vala-0.12")]
	public const string STOCK_PRINT_PREVIEW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PRINT_REPORT", since = "vala-0.12")]
	public const string STOCK_PRINT_REPORT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PRINT_WARNING", since = "vala-0.12")]
	public const string STOCK_PRINT_WARNING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.PROPERTIES", since = "vala-0.12")]
	public const string STOCK_PROPERTIES;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.QUIT", since = "vala-0.12")]
	public const string STOCK_QUIT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.REDO", since = "vala-0.12")]
	public const string STOCK_REDO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.REFRESH", since = "vala-0.12")]
	public const string STOCK_REFRESH;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.REMOVE", since = "vala-0.12")]
	public const string STOCK_REMOVE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.REVERT_TO_SAVED", since = "vala-0.12")]
	public const string STOCK_REVERT_TO_SAVED;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SAVE", since = "vala-0.12")]
	public const string STOCK_SAVE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SAVE_AS", since = "vala-0.12")]
	public const string STOCK_SAVE_AS;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SELECT_ALL", since = "vala-0.12")]
	public const string STOCK_SELECT_ALL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SELECT_COLOR", since = "vala-0.12")]
	public const string STOCK_SELECT_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SELECT_FONT", since = "vala-0.12")]
	public const string STOCK_SELECT_FONT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SORT_ASCENDING", since = "vala-0.12")]
	public const string STOCK_SORT_ASCENDING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SORT_DESCENDING", since = "vala-0.12")]
	public const string STOCK_SORT_DESCENDING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.SPELL_CHECK", since = "vala-0.12")]
	public const string STOCK_SPELL_CHECK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.STOP", since = "vala-0.12")]
	public const string STOCK_STOP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.STRIKETHROUGH", since = "vala-0.12")]
	public const string STOCK_STRIKETHROUGH;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.UNDELETE", since = "vala-0.12")]
	public const string STOCK_UNDELETE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.UNDERLINE", since = "vala-0.12")]
	public const string STOCK_UNDERLINE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.UNDO", since = "vala-0.12")]
	public const string STOCK_UNDO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.UNINDENT", since = "vala-0.12")]
	public const string STOCK_UNINDENT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.YES", since = "vala-0.12")]
	public const string STOCK_YES;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ZOOM_100", since = "vala-0.12")]
	public const string STOCK_ZOOM_100;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ZOOM_FIT", since = "vala-0.12")]
	public const string STOCK_ZOOM_FIT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ZOOM_IN", since = "vala-0.12")]
	public const string STOCK_ZOOM_IN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.ZOOM_OUT", since = "vala-0.12")]
	public const string STOCK_ZOOM_OUT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_ACCELERATOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_ARROW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_BACKGROUND;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_BOTTOM;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_BUTTON;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_CALENDAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_CELL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_CHECK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_COMBOBOX_ENTRY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_CONTEXT_MENU;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_CSD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_CURSOR_HANDLE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_DEFAULT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_DESTRUCTIVE_ACTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_DIM_LABEL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_DND;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_DOCK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_ENTRY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_ERROR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_EXPANDER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_FLAT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_FRAME;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_GRIP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_HEADER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_HIGHLIGHT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_HORIZONTAL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_IMAGE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_INFO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_INLINE_TOOLBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_INSERTION_CURSOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_LABEL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_LEFT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_LEVEL_BAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_LINKED;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_LIST;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_LIST_ROW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_MARK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_MENU;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_MENUBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_MENUITEM;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_MESSAGE_DIALOG;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_MONOSPACE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_NEEDS_ATTENTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_NOTEBOOK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_OSD;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_OVERSHOOT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_PANE_SEPARATOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_PAPER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_POPOVER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_POPUP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_PRIMARY_TOOLBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_PROGRESSBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_PULSE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_QUESTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_RADIO;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_RAISED;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_READ_ONLY;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_RIGHT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_RUBBERBAND;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SCALE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SCALE_HAS_MARKS_ABOVE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SCALE_HAS_MARKS_BELOW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SCROLLBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SCROLLBARS_JUNCTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SEPARATOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SIDEBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SLIDER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SPINBUTTON;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SPINNER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_STATUSBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SUBTITLE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_SUGGESTED_ACTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TITLE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TITLEBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TOOLBAR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TOOLTIP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TOP;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TOUCH_SELECTION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_TROUGH;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_UNDERSHOOT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_VERTICAL;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_VIEW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_WARNING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_CLASS_WIDE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_BACKGROUND_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_BACKGROUND_IMAGE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_BORDER_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_BORDER_RADIUS;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_BORDER_STYLE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_BORDER_WIDTH;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_FONT;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_MARGIN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_PROPERTY_PADDING;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int STYLE_PROVIDER_PRIORITY_APPLICATION;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int STYLE_PROVIDER_PRIORITY_FALLBACK;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int STYLE_PROVIDER_PRIORITY_SETTINGS;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int STYLE_PROVIDER_PRIORITY_THEME;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int STYLE_PROVIDER_PRIORITY_USER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_REGION_COLUMN;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_REGION_COLUMN_HEADER;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_REGION_ROW;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const string STYLE_REGION_TAB;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int TEXT_VIEW_PRIORITY_VALIDATE;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public const int TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool accel_groups_activate (GLib.Object object, uint accel_key, Gdk.ModifierType accel_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned GLib.SList<Gtk.AccelGroup> accel_groups_from_object (GLib.Object object);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gdk.ModifierType accelerator_get_default_mod_mask ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string accelerator_get_label (uint accelerator_key, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string accelerator_get_label_with_keycode (Gdk.Display display, uint accelerator_key, uint keycode, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string accelerator_name (uint accelerator_key, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string accelerator_name_with_keycode (Gdk.Display display, uint accelerator_key, uint keycode, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void accelerator_parse (string accelerator, out uint accelerator_key, out Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void accelerator_parse_with_keycode (string accelerator, out uint accelerator_key, [CCode (array_length = false, array_null_terminated = true)] out uint[] accelerator_codes, out Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void accelerator_set_default_mod_mask (Gdk.ModifierType default_mod_mask);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool accelerator_valid (uint keyval, Gdk.ModifierType modifiers);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool alternative_dialog_button_order (Gdk.Screen screen);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool bindings_activate (GLib.Object object, uint keyval, Gdk.ModifierType modifiers);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool bindings_activate_event (GLib.Object object, Gdk.EventKey event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool cairo_should_draw_window (Cairo.Context cr, Gdk.Window window);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void cairo_transform_to_window (Cairo.Context cr, Gtk.Widget widget, Gdk.Window window);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned string check_version (uint required_major, uint required_minor, uint required_micro);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void device_grab_add (Gtk.Widget widget, Gdk.Device device, bool block_others);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void device_grab_remove (Gtk.Widget widget, Gdk.Device device);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void disable_setlocale ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static int distribute_natural_allocation (int extra_space, uint n_requested_sizes, Gtk.RequestedSize sizes);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gdk.DragContext drag_begin (Gtk.Widget widget, Gtk.TargetList targets, Gdk.DragAction actions, int button, Gdk.Event? event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gdk.DragContext drag_begin_with_coordinates (Gtk.Widget widget, Gtk.TargetList targets, Gdk.DragAction actions, int button, Gdk.Event event, int x, int y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_cancel (Gdk.DragContext context);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool drag_check_threshold (Gtk.Widget widget, int start_x, int start_y, int current_x, int current_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_add_image_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_add_text_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_add_uri_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gdk.Atom drag_dest_find_target (Gtk.Widget widget, Gdk.DragContext context, Gtk.TargetList target_list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.TargetList drag_dest_get_target_list (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool drag_dest_get_track_motion (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_set (Gtk.Widget widget, Gtk.DestDefaults flags, Gtk.TargetEntry[] targets, Gdk.DragAction actions);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_set_proxy (Gtk.Widget widget, Gdk.Window proxy_window, Gdk.DragProtocol protocol, bool use_coordinates);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_set_target_list (Gtk.Widget widget, Gtk.TargetList target_list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_set_track_motion (Gtk.Widget widget, bool track_motion);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_unset (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_finish (Gdk.DragContext context, bool success, bool del, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_get_data (Gtk.Widget widget, Gdk.DragContext context, Gdk.Atom target, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget drag_get_source_widget (Gdk.DragContext context);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_highlight (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_default (Gdk.DragContext context);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_gicon (Gdk.DragContext context, GLib.Icon icon, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_name (Gdk.DragContext context, string icon_name, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_pixbuf (Gdk.DragContext context, Gdk.Pixbuf pixbuf, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_stock (Gdk.DragContext context, string stock_id, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_surface (Gdk.DragContext context, Cairo.Surface surface);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_widget (Gdk.DragContext context, Gtk.Widget widget, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_add_image_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_add_text_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_add_uri_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.TargetList drag_source_get_target_list (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set (Gtk.Widget widget, Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set_icon_gicon (Gtk.Widget widget, GLib.Icon icon);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set_icon_name (Gtk.Widget widget, string icon_name);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set_icon_pixbuf (Gtk.Widget widget, Gdk.Pixbuf pixbuf);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set_icon_stock (Gtk.Widget widget, string stock_id);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set_target_list (Gtk.Widget widget, Gtk.TargetList target_list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_unset (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_unhighlight (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_insertion_cursor", since = "3.4")]
	public static void draw_insertion_cursor (Gtk.Widget widget, Cairo.Context cr, Gdk.Rectangle location, bool is_primary, Gtk.TextDirection direction, bool draw_arrow);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool events_pending ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_binary_age ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gdk.Event get_current_event ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gdk.Device get_current_event_device ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool get_current_event_state (out Gdk.ModifierType state);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint32 get_current_event_time ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_debug_flags ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Pango.Language get_default_language ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget get_event_widget (Gdk.Event event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_interface_age ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gtk.TextDirection get_locale_direction ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_major_version ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_micro_version ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_minor_version ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static GLib.OptionGroup get_option_group (bool open_default_display);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void grab_add (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget grab_get_current ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void grab_remove (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gtk.IconSize icon_size_from_name (string name);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned string icon_size_get_name (Gtk.IconSize size);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool icon_size_lookup (Gtk.IconSize size, out int width, out int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool icon_size_lookup_for_settings (Gtk.Settings settings, Gtk.IconSize size, out int width, out int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gtk.IconSize icon_size_register (string name, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void icon_size_register_alias (string alias, Gtk.IconSize target);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void init ([CCode (array_length_pos = 0.9)] ref unowned string[]? argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool init_check ([CCode (array_length_pos = 0.9)] ref unowned string[] argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool init_with_args ([CCode (array_length_pos = 0.9)] ref unowned string[] argv, string? parameter_string, [CCode (array_length = false)] GLib.OptionEntry[] entries, string? translation_domain) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.4")]
	public static uint key_snooper_install (Gtk.KeySnoopFunc snooper);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.4")]
	public static void key_snooper_remove (uint snooper_handler_id);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void main ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void main_do_event (Gdk.Event event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool main_iteration ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool main_iteration_do (bool blocking);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint main_level ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void main_quit ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_arrow (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, Gtk.ArrowType arrow_type, bool fill, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_background", since = "3.0")]
	public static void paint_box (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_frame_gap", since = "3.0")]
	public static void paint_box_gap (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_check (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_diamond (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_expander", since = "3.0")]
	public static void paint_expander (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget? widget, string? detail, int x, int y, Gtk.ExpanderStyle expander_style);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_frame and render_background", since = "3.0")]
	public static void paint_extension (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height, Gtk.PositionType gap_side);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_flat_box (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_focus (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_handle (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height, Gtk.Orientation orientation);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_hline (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget? widget, string? detail, int x1, int x2, int y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_layout (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, bool use_text, Gtk.Widget? widget, string? detail, int x, int y, Pango.Layout layout);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_option (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_handle", since = "3.0")]
	public static void paint_resize_grip (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget? widget, string? detail, Gdk.WindowEdge edge, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_shadow (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_frame", since = "3.0")]
	public static void paint_shadow_gap (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height, Gtk.PositionType gap_side, int gap_x, int gap_width);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_slider (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height, Gtk.Orientation orientation);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "render_activity", since = "3.0")]
	public static void paint_spinner (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget widget, string detail, uint step, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_tab (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.ShadowType shadow_type, Gtk.Widget? widget, string? detail, int x, int y, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (since = "3.0")]
	public static void paint_vline (Gtk.Style style, Cairo.Context cr, Gtk.StateType state_type, Gtk.Widget? widget, string? detail, int y1_, int y2_, int x);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool parse_args ([CCode (array_length_pos = 0.5)] ref unowned string[] argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static GLib.Quark print_error_quark ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gtk.PageSetup print_run_page_setup_dialog (Gtk.Window parent, Gtk.PageSetup page_setup, Gtk.PrintSettings settings);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void print_run_page_setup_dialog_async (Gtk.Window parent, Gtk.PageSetup page_setup, Gtk.PrintSettings settings, Gtk.PageSetupDoneFunc done_cb);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void propagate_event (Gtk.Widget widget, Gdk.Event event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void rc_add_default_file (string filename);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string rc_find_module_in_path (string module_file);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string rc_find_pixmap_in_path (Gtk.Settings settings, GLib.Scanner scanner, string pixmap_file);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "gtk/gtk.h")]
	public static unowned string[] rc_get_default_files ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string rc_get_im_module_file ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string rc_get_im_module_path ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string rc_get_module_dir ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Style rc_get_style (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Style? rc_get_style_by_paths (Gtk.Settings settings, string? widget_path, string? class_path, GLib.Type type);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string rc_get_theme_dir ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void rc_parse (string filename);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint rc_parse_color (GLib.Scanner scanner, out Gdk.Color color);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint rc_parse_color_full (GLib.Scanner scanner, Gtk.RcStyle style, out Gdk.Color color);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint rc_parse_priority (GLib.Scanner scanner, Gtk.PathPriorityType priority);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint rc_parse_state (GLib.Scanner scanner, out Gtk.StateType state);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void rc_parse_string (string rc_string);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool rc_reparse_all ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool rc_reparse_all_for_settings (Gtk.Settings settings, bool force_load);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void rc_reset_styles (Gtk.Settings settings);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned GLib.Scanner rc_scanner_new ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void rc_set_default_files ([CCode (array_length = false, array_null_terminated = true)] string[] filenames);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_activity", since = "vala-0.16")]
	public static void render_activity (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_arrow", since = "vala-0.16")]
	public static void render_arrow (Gtk.StyleContext context, Cairo.Context cr, double angle, double x, double y, double size);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_background", since = "vala-0.16")]
	public static void render_background (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_check", since = "vala-0.16")]
	public static void render_check (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_expander", since = "vala-0.16")]
	public static void render_expander (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_extension", since = "vala-0.16")]
	public static void render_extension (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_focus", since = "vala-0.16")]
	public static void render_focus (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_frame", since = "vala-0.16")]
	public static void render_frame (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_frame_gap", since = "vala-0.16")]
	public static void render_frame_gap (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_handle", since = "vala-0.16")]
	public static void render_handle (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_icon", since = "vala-0.16")]
	public static void render_icon (Gtk.StyleContext context, Cairo.Context cr, Gdk.Pixbuf pixbuf, double x, double y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_icon_pixbuf", since = "vala-0.16")]
	public static Gdk.Pixbuf render_icon_pixbuf (Gtk.StyleContext context, Gtk.IconSource source, Gtk.IconSize size);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void render_icon_surface (Gtk.StyleContext context, Cairo.Context cr, Cairo.Surface surface, double x, double y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void render_insertion_cursor (Gtk.StyleContext context, Cairo.Context cr, double x, double y, Pango.Layout layout, int index, Pango.Direction direction);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_layout", since = "vala-0.16")]
	public static void render_layout (Gtk.StyleContext context, Cairo.Context cr, double x, double y, Pango.Layout layout);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_line", since = "vala-0.16")]
	public static void render_line (Gtk.StyleContext context, Cairo.Context cr, double x0, double y0, double x1, double y1);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_option", since = "vala-0.16")]
	public static void render_option (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "StyleContext.render_slider", since = "vala-0.16")]
	public static void render_slider (Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void rgb_to_hsv (double r, double g, double b, out double h, out double s, out double v);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_add_target (Gtk.Widget widget, Gdk.Atom selection, Gdk.Atom target, uint info);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_add_targets (Gtk.Widget widget, Gdk.Atom selection, [CCode (array_length_pos = 3.1, array_length_type = "guint")] Gtk.TargetEntry[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_clear_targets (Gtk.Widget widget, Gdk.Atom selection);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool selection_convert (Gtk.Widget widget, Gdk.Atom selection, Gdk.Atom target, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool selection_owner_set (Gtk.Widget widget, Gdk.Atom selection, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool selection_owner_set_for_display (Gdk.Display display, Gtk.Widget widget, Gdk.Atom selection, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_remove_all (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void set_debug_flags (uint flags);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void show_about_dialog (Gtk.Window? parent, ...);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool show_uri (Gdk.Screen? screen, string uri, uint32 timestamp) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.add", since = "vala-0.12")]
	public static void stock_add (Gtk.StockItem[] items);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.add_static", since = "vala-0.12")]
	public static void stock_add_static (Gtk.StockItem[] items);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.list_ids", since = "vala-0.12")]
	public static GLib.SList<string> stock_list_ids ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Deprecated (replacement = "Gtk.Stock.set_translate_func", since = "vala-0.22")]
	public static void stock_set_translate_func (string domain, owned Gtk.TranslateFunc func);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void target_table_free (Gtk.TargetEntry[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gtk.TargetEntry[] target_table_new_from_list (Gtk.TargetList list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool targets_include_image (Gdk.Atom[] targets, bool writable);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool targets_include_rich_text (Gdk.Atom[] targets, Gtk.TextBuffer buffer);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool targets_include_text (Gdk.Atom[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool targets_include_uri (Gdk.Atom[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget test_create_simple_window (string window_title, string dialog_text);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget test_create_widget (GLib.Type widget_type, ...);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gtk.Widget test_display_button_window (string window_title, string dialog_text, ...);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget test_find_label (Gtk.Widget widget, string label_pattern);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget test_find_sibling (Gtk.Widget base_widget, GLib.Type widget_type);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget test_find_widget (Gtk.Widget widget, string label_pattern, GLib.Type widget_type);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void test_init ([CCode (array_length_pos = 0.9)] ref unowned string[] argvp, ...);
	[CCode (array_length = false, array_length_type = "guint", array_null_terminated = true, cheader_filename = "gtk/gtk.h")]
	public static unowned GLib.Type[] test_list_all_types ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void test_register_all_types ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static double test_slider_get_value (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void test_slider_set_perc (Gtk.Widget widget, double percentage);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool test_spin_button_click (Gtk.SpinButton spinner, uint button, bool upwards);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string test_text_get (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void test_text_set (Gtk.Widget widget, string str);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool test_widget_click (Gtk.Widget widget, uint button, Gdk.ModifierType modifiers);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool test_widget_send_key (Gtk.Widget widget, uint keyval, Gdk.ModifierType modifiers);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void test_widget_wait_for_draw (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool tree_get_row_drag_data (Gtk.SelectionData selection_data, out unowned Gtk.TreeModel tree_model, out Gtk.TreePath path);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool tree_set_row_drag_data (Gtk.SelectionData selection_data, Gtk.TreeModel tree_model, Gtk.TreePath path);
}
